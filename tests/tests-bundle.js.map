{"version":3,"sources":["webpack:///tests/tests-bundle.js","webpack:///webpack/bootstrap a481328a1cd9ff10fa4b","webpack:///./~/chai/lib/chai/utils/inspect.js","webpack:///./src/js/config.js?8508","webpack:///./~/chai/~/type-detect/index.js","webpack:///./~/chai/lib/chai/utils/getActual.js","webpack:///./~/chai/lib/chai/utils/getName.js","webpack:///./~/chai/lib/chai/utils/getPathInfo.js","webpack:///./~/chai/lib/chai/utils/hasProperty.js","webpack:///./~/chai/lib/chai/utils/objDisplay.js","webpack:///./~/chai/lib/chai/utils/transferFlags.js","webpack:///./~/chai/~/assertion-error/index.js","webpack:///./tests/cardinalPoints.js","webpack:///./tests/config+helpers.js","webpack:///./tests/controller.js","webpack:///./tests/martians+robots.js","webpack:///./tests/store.js","webpack:///./src/js/helpers.js?e056","webpack:///./src/js/classes/martian.js?d067","webpack:///./~/chai/lib/chai.js","webpack:///./~/chai/lib/chai/assertion.js","webpack:///./~/chai/lib/chai/core/assertions.js","webpack:///./~/chai/lib/chai/interface/assert.js","webpack:///./~/chai/lib/chai/interface/expect.js","webpack:///./~/chai/lib/chai/interface/should.js","webpack:///./~/chai/lib/chai/utils/addChainableMethod.js","webpack:///./~/chai/lib/chai/utils/addMethod.js","webpack:///./~/chai/lib/chai/utils/addProperty.js","webpack:///./~/chai/lib/chai/utils/expectTypes.js","webpack:///./~/chai/lib/chai/utils/getEnumerableProperties.js","webpack:///./~/chai/lib/chai/utils/getMessage.js","webpack:///./~/chai/lib/chai/utils/getPathValue.js","webpack:///./~/chai/lib/chai/utils/getProperties.js","webpack:///./~/chai/lib/chai/utils/index.js","webpack:///./~/chai/lib/chai/utils/overwriteChainableMethod.js","webpack:///./~/chai/lib/chai/utils/overwriteMethod.js","webpack:///./~/chai/lib/chai/utils/overwriteProperty.js","webpack:///./~/chai/lib/chai/utils/test.js","webpack:///./~/chai/~/deep-eql/index.js","webpack:///./~/chai/~/deep-eql/lib/eql.js","webpack:///./~/chai/~/deep-eql/~/type-detect/index.js","webpack:///./~/chai/~/deep-eql/~/type-detect/lib/type.js","webpack:///./~/chai/~/type-detect/lib/type.js","webpack:///external \"os\"?49bc","webpack:///external \"buffer\"","webpack:///./tests/tests.js","webpack:///./~/chai/lib/chai/utils/flag.js","webpack:///./src/js/classes/martianRobot.js?ee4b","webpack:///./src/js/controller.js?086f","webpack:///./src/js/store.js?ff74","webpack:///./~/chai/lib/chai/config.js","webpack:///./~/chai/index.js","webpack:///./src/js/classes/cardinalPoints.js?1ca7"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","i","l","call","m","c","value","d","name","getter","Object","defineProperty","configurable","enumerable","get","n","__esModule","o","object","property","prototype","hasOwnProperty","p","s","109","inspect","obj","showHidden","depth","colors","ctx","seen","stylize","str","formatValue","recurseTimes","constructor","ret","primitive","formatPrimitive","isDOMElement","outerHTML","document","xmlVersion","xmlSerializer","XMLSerializer","serializeToString","ns","container","createElementNS","appendChild","cloneNode","html","innerHTML","replace","err","visibleKeys","getEnumerableProperties","keys","getProperties","length","isError","getName","nameSuffix","isRegExp","RegExp","toString","isDate","Date","toUTCString","formatError","base","array","braces","isArray","push","output","formatArray","map","key","formatProperty","pop","reduceToSingleString","simple","JSON","stringify","Infinity","Error","String","forEach","match","__lookupGetter__","__lookupSetter__","indexOf","split","line","join","substr","numLinesEst","reduce","prev","cur","ar","Array","objectToString","re","e","HTMLElement","nodeType","nodeName","11","__WEBPACK_IMPORTED_MODULE_0__helpers__","MAX_INSTRUCTION","X_BOUNDS","Y_BOUNDS","bounds","MAX_COORD","x","y","point","Map","isSet","110","142","args","_obj","143","func","exec","144","parsePath","path","parts","mArr","parseFloat","_getPathValue","parsed","index","res","tmp","undefined","part","hasProperty","last","info","parent","exists","145","type","literals","number","Number","string","ot","146","config","truncateThreshold","kstr","splice","147","assertion","includeAll","flags","__flags","create","arguments","flag","148","exclude","excludeProps","excludes","slice","AssertionError","message","_props","ssf","extend","props","this","showDiff","callee","captureStackTrace","stack","toJSON","160","__WEBPACK_IMPORTED_MODULE_0__src_js_classes_cardinalPoints__","assert","describe","it","cp","strictEqual","getDegree","getPointName","isValidPoint","161","__WEBPACK_IMPORTED_MODULE_0__src_js_config__","__WEBPACK_IMPORTED_MODULE_1__src_js_helpers__","before","162","__WEBPACK_IMPORTED_MODULE_0_os__","__WEBPACK_IMPORTED_MODULE_0_os___default","__WEBPACK_IMPORTED_MODULE_1__src_js_config__","__WEBPACK_IMPORTED_MODULE_2__src_js_classes_martian__","__WEBPACK_IMPORTED_MODULE_3__src_js_classes_martianRobot__","__WEBPACK_IMPORTED_MODULE_4__src_js_controller__","__WEBPACK_IMPORTED_MODULE_5__src_js_store__","bot1","bot2","bot3","aMartian","find","isAtLeast","a","b","mars","add","deepEqual","getAll","values","163","__WEBPACK_IMPORTED_MODULE_1__src_js_classes_martian__","__WEBPACK_IMPORTED_MODULE_2__src_js_classes_martianRobot__","isAbove","console","log","notEqual","orientation","isAlive","r","164","__WEBPACK_IMPORTED_MODULE_3__src_js_store__","aM","size","update","remove","27","isNumber","test","isPositiveNumber","isPosSafe","pos","posBounds","parseInt","strToEmoji","emoji","beingAsEmoji","regex","set","33","_classCallCheck","instance","Constructor","TypeError","__WEBPACK_IMPORTED_MODULE_1__config__","__WEBPACK_IMPORTED_MODULE_2__cardinalPoints__","_createClass","defineProperties","target","descriptor","writable","protoProps","staticProps","Martian","_name","trim","now","_x","_y","_orientation","toUpperCase","withType","direction","degree","349","used","version","util","use","fn","core","expect","should","350","_chai","Assertion","msg","warn","includeStack","addProperty","addMethod","addChainableMethod","chainingBehavior","overwriteProperty","overwriteMethod","overwriteChainableMethod","expr","negateMsg","expected","_actual","ok","getMessage","actual","getActual","val","351","chai","_","an","toLowerCase","article","charAt","includeChainingBehavior","include","expectTypes","eql","k","subset","checkArguments","assertEqual","assertEql","assertAbove","to","have","len","assertLeast","assertBelow","assertMost","assertInstanceOf","assertOwnProperty","assertOwnPropertyDescriptor","actualDescriptor","getOwnPropertyDescriptor","assertLengthChain","assertLength","assertMatch","assertKeys","mixedArgsMsg","any","all","intersection","filter","every","sort","assertThrows","errMsg","is","thrown","desiredError","thrownError","actuallyGot","expectedThrown","respondTo","method","itself","context","satisfy","matcher","result","objDisplay","negate","closeTo","delta","Math","abs","isSubsetOf","superset","cmp","elem","some","elem2","oneOf","list","be","assertChanges","prop","initial","assertIncreases","assertDecreases","chain","isNaN","start","finish","range","isDeep","pathInfo","getPathInfo","isExtensible","isSealed","isFrozen","352","express","errmsg","fail","operator","isOk","isNotOk","not","equal","act","exp","notStrictEqual","notDeepEqual","abv","above","atlst","least","isBelow","blw","below","isAtMost","atmst","most","isTrue","isNotTrue","isFalse","isNotFalse","isNull","isNotNull","NaN","isNotNaN","isUndefined","isDefined","isFunction","isNotFunction","isObject","isNotObject","isNotArray","isString","isNotString","isNotNumber","isBoolean","isNotBoolean","typeOf","notTypeOf","instanceOf","notInstanceOf","inc","notInclude","notMatch","notProperty","deepProperty","deep","notDeepProperty","propertyVal","propertyNotVal","deepPropertyVal","deepPropertyNotVal","lengthOf","throws","errt","errs","assertErr","throw","doesNotThrow","Throw","val2","approximately","sameMembers","set1","set2","same","members","sameDeepMembers","includeMembers","includeDeepMembers","inList","changes","change","doesNotChange","increases","increase","doesNotIncrease","decreases","decrease","doesNotDecrease","ifError","extensible","isNotExtensible","sealed","isNotSealed","frozen","isNotFrozen","alias","as","353","354","loadShould","shouldGetter","Boolean","valueOf","shouldSetter","val1","exist","Should","355","transferFlags","hasProtoSupport","excludeNames","Function","apply","chainableBehavior","__methods","old_ssfi","__proto__","asserterNames","getOwnPropertyNames","asserterName","pd","356","357","358","types","t","art","or","359","360","flagMsg","361","362","proto","getPrototypeOf","363","getPathValue","364","_chainingBehavior","_method","365","_super","366","_get","367","368","369","sameValue","dateEqual","regexpEqual","Buffer","isBuffer","bufferEqual","argumentsEqual","typeEqual","objectEqual","getTime","iterableEqual","isValue","ka","kb","ex","370","371","getType","natives","Library","tests","[object Array]","[object RegExp]","[object Function]","[object Arguments]","[object Date]","of","define","ReferenceError","372","objectTypeRegexp","Promise","38","require","433","438","48","49","_possibleConstructorReturn","self","_inherits","subClass","superClass","setPrototypeOf","__WEBPACK_IMPORTED_MODULE_0__martian__","__WEBPACK_IMPORTED_MODULE_1__helpers__","__WEBPACK_IMPORTED_MODULE_2__config__","__WEBPACK_IMPORTED_MODULE_3__store__","_processMotion","WeakMap","_hasScent","MartianRobot","_Martian","_this","_isAlive","tempPos","axis","hs","pointStr","axisBounds","pm","50","_toConsumableArray","arr","arr2","from","_processCommands","char","being","turn","move","instruct","instructionsStr","substring","__WEBPACK_IMPORTED_MODULE_0__config__","printMars","__WEBPACK_IMPORTED_MODULE_2_os___default","arrStr","searchMars","condition","concat","__WEBPACK_IMPORTED_MODULE_2_os__","53","lostList","_mars","Store","_len","martian","_key","includes","has","martianName","delete","59","63","78","_slicedToArray","sliceIterator","_arr","_n","_d","_e","_s","_i","Symbol","iterator","next","done","_points","CardinalPoints","points","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","_step$value","return"],"mappings":"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","file":"tests/tests-bundle.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// identity function for calling harmory imports with the correct context\n/******/ \t__webpack_require__.i = function(value) { return value; };\n/******/\n/******/ \t// define getter function for harmory exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tObject.defineProperty(exports, name, {\n/******/ \t\t\tconfigurable: false,\n/******/ \t\t\tenumerable: true,\n/******/ \t\t\tget: getter\n/******/ \t\t});\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 438);\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ 109:\n/***/ function(module, exports, __webpack_require__) {\n\n// This is (almost) directly from Node.js utils\n// https://github.com/joyent/node/blob/f8c335d0caf47f16d31413f89aa28eda3878e3aa/lib/util.js\n\nvar getName = __webpack_require__(143);\nvar getProperties = __webpack_require__(362);\nvar getEnumerableProperties = __webpack_require__(359);\n\nmodule.exports = inspect;\n\n/**\n * Echos the value of a value. Trys to print the value out\n * in the best way possible given the different types.\n *\n * @param {Object} obj The object to print out.\n * @param {Boolean} showHidden Flag that shows hidden (not enumerable)\n *    properties of objects.\n * @param {Number} depth Depth in which to descend in object. Default is 2.\n * @param {Boolean} colors Flag to turn on ANSI escape codes to color the\n *    output. Default is false (no coloring).\n * @namespace Utils\n * @name inspect\n */\nfunction inspect(obj, showHidden, depth, colors) {\n  var ctx = {\n    showHidden: showHidden,\n    seen: [],\n    stylize: function (str) { return str; }\n  };\n  return formatValue(ctx, obj, (typeof depth === 'undefined' ? 2 : depth));\n}\n\n// Returns true if object is a DOM element.\nvar isDOMElement = function (object) {\n  if (typeof HTMLElement === 'object') {\n    return object instanceof HTMLElement;\n  } else {\n    return object &&\n      typeof object === 'object' &&\n      object.nodeType === 1 &&\n      typeof object.nodeName === 'string';\n  }\n};\n\nfunction formatValue(ctx, value, recurseTimes) {\n  // Provide a hook for user-specified inspect functions.\n  // Check that value is an object with an inspect function on it\n  if (value && typeof value.inspect === 'function' &&\n      // Filter out the util module, it's inspect function is special\n      value.inspect !== exports.inspect &&\n      // Also filter out any prototype objects using the circular check.\n      !(value.constructor && value.constructor.prototype === value)) {\n    var ret = value.inspect(recurseTimes);\n    if (typeof ret !== 'string') {\n      ret = formatValue(ctx, ret, recurseTimes);\n    }\n    return ret;\n  }\n\n  // Primitive types cannot have properties\n  var primitive = formatPrimitive(ctx, value);\n  if (primitive) {\n    return primitive;\n  }\n\n  // If this is a DOM element, try to get the outer HTML.\n  if (isDOMElement(value)) {\n    if ('outerHTML' in value) {\n      return value.outerHTML;\n      // This value does not have an outerHTML attribute,\n      //   it could still be an XML element\n    } else {\n      // Attempt to serialize it\n      try {\n        if (document.xmlVersion) {\n          var xmlSerializer = new XMLSerializer();\n          return xmlSerializer.serializeToString(value);\n        } else {\n          // Firefox 11- do not support outerHTML\n          //   It does, however, support innerHTML\n          //   Use the following to render the element\n          var ns = \"http://www.w3.org/1999/xhtml\";\n          var container = document.createElementNS(ns, '_');\n\n          container.appendChild(value.cloneNode(false));\n          html = container.innerHTML\n            .replace('><', '>' + value.innerHTML + '<');\n          container.innerHTML = '';\n          return html;\n        }\n      } catch (err) {\n        // This could be a non-native DOM implementation,\n        //   continue with the normal flow:\n        //   printing the element as if it is an object.\n      }\n    }\n  }\n\n  // Look up the keys of the object.\n  var visibleKeys = getEnumerableProperties(value);\n  var keys = ctx.showHidden ? getProperties(value) : visibleKeys;\n\n  // Some type of object without properties can be shortcutted.\n  // In IE, errors have a single `stack` property, or if they are vanilla `Error`,\n  // a `stack` plus `description` property; ignore those for consistency.\n  if (keys.length === 0 || (isError(value) && (\n      (keys.length === 1 && keys[0] === 'stack') ||\n      (keys.length === 2 && keys[0] === 'description' && keys[1] === 'stack')\n     ))) {\n    if (typeof value === 'function') {\n      var name = getName(value);\n      var nameSuffix = name ? ': ' + name : '';\n      return ctx.stylize('[Function' + nameSuffix + ']', 'special');\n    }\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    }\n    if (isDate(value)) {\n      return ctx.stylize(Date.prototype.toUTCString.call(value), 'date');\n    }\n    if (isError(value)) {\n      return formatError(value);\n    }\n  }\n\n  var base = '', array = false, braces = ['{', '}'];\n\n  // Make Array say that they are Array\n  if (isArray(value)) {\n    array = true;\n    braces = ['[', ']'];\n  }\n\n  // Make functions say that they are functions\n  if (typeof value === 'function') {\n    var name = getName(value);\n    var nameSuffix = name ? ': ' + name : '';\n    base = ' [Function' + nameSuffix + ']';\n  }\n\n  // Make RegExps say that they are RegExps\n  if (isRegExp(value)) {\n    base = ' ' + RegExp.prototype.toString.call(value);\n  }\n\n  // Make dates with properties first say the date\n  if (isDate(value)) {\n    base = ' ' + Date.prototype.toUTCString.call(value);\n  }\n\n  // Make error with message first say the error\n  if (isError(value)) {\n    return formatError(value);\n  }\n\n  if (keys.length === 0 && (!array || value.length == 0)) {\n    return braces[0] + base + braces[1];\n  }\n\n  if (recurseTimes < 0) {\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    } else {\n      return ctx.stylize('[Object]', 'special');\n    }\n  }\n\n  ctx.seen.push(value);\n\n  var output;\n  if (array) {\n    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);\n  } else {\n    output = keys.map(function(key) {\n      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);\n    });\n  }\n\n  ctx.seen.pop();\n\n  return reduceToSingleString(output, base, braces);\n}\n\n\nfunction formatPrimitive(ctx, value) {\n  switch (typeof value) {\n    case 'undefined':\n      return ctx.stylize('undefined', 'undefined');\n\n    case 'string':\n      var simple = '\\'' + JSON.stringify(value).replace(/^\"|\"$/g, '')\n                                               .replace(/'/g, \"\\\\'\")\n                                               .replace(/\\\\\"/g, '\"') + '\\'';\n      return ctx.stylize(simple, 'string');\n\n    case 'number':\n      if (value === 0 && (1/value) === -Infinity) {\n        return ctx.stylize('-0', 'number');\n      }\n      return ctx.stylize('' + value, 'number');\n\n    case 'boolean':\n      return ctx.stylize('' + value, 'boolean');\n  }\n  // For some reason typeof null is \"object\", so special case here.\n  if (value === null) {\n    return ctx.stylize('null', 'null');\n  }\n}\n\n\nfunction formatError(value) {\n  return '[' + Error.prototype.toString.call(value) + ']';\n}\n\n\nfunction formatArray(ctx, value, recurseTimes, visibleKeys, keys) {\n  var output = [];\n  for (var i = 0, l = value.length; i < l; ++i) {\n    if (Object.prototype.hasOwnProperty.call(value, String(i))) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          String(i), true));\n    } else {\n      output.push('');\n    }\n  }\n  keys.forEach(function(key) {\n    if (!key.match(/^\\d+$/)) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          key, true));\n    }\n  });\n  return output;\n}\n\n\nfunction formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {\n  var name, str;\n  if (value.__lookupGetter__) {\n    if (value.__lookupGetter__(key)) {\n      if (value.__lookupSetter__(key)) {\n        str = ctx.stylize('[Getter/Setter]', 'special');\n      } else {\n        str = ctx.stylize('[Getter]', 'special');\n      }\n    } else {\n      if (value.__lookupSetter__(key)) {\n        str = ctx.stylize('[Setter]', 'special');\n      }\n    }\n  }\n  if (visibleKeys.indexOf(key) < 0) {\n    name = '[' + key + ']';\n  }\n  if (!str) {\n    if (ctx.seen.indexOf(value[key]) < 0) {\n      if (recurseTimes === null) {\n        str = formatValue(ctx, value[key], null);\n      } else {\n        str = formatValue(ctx, value[key], recurseTimes - 1);\n      }\n      if (str.indexOf('\\n') > -1) {\n        if (array) {\n          str = str.split('\\n').map(function(line) {\n            return '  ' + line;\n          }).join('\\n').substr(2);\n        } else {\n          str = '\\n' + str.split('\\n').map(function(line) {\n            return '   ' + line;\n          }).join('\\n');\n        }\n      }\n    } else {\n      str = ctx.stylize('[Circular]', 'special');\n    }\n  }\n  if (typeof name === 'undefined') {\n    if (array && key.match(/^\\d+$/)) {\n      return str;\n    }\n    name = JSON.stringify('' + key);\n    if (name.match(/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)) {\n      name = name.substr(1, name.length - 2);\n      name = ctx.stylize(name, 'name');\n    } else {\n      name = name.replace(/'/g, \"\\\\'\")\n                 .replace(/\\\\\"/g, '\"')\n                 .replace(/(^\"|\"$)/g, \"'\");\n      name = ctx.stylize(name, 'string');\n    }\n  }\n\n  return name + ': ' + str;\n}\n\n\nfunction reduceToSingleString(output, base, braces) {\n  var numLinesEst = 0;\n  var length = output.reduce(function(prev, cur) {\n    numLinesEst++;\n    if (cur.indexOf('\\n') >= 0) numLinesEst++;\n    return prev + cur.length + 1;\n  }, 0);\n\n  if (length > 60) {\n    return braces[0] +\n           (base === '' ? '' : base + '\\n ') +\n           ' ' +\n           output.join(',\\n  ') +\n           ' ' +\n           braces[1];\n  }\n\n  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];\n}\n\nfunction isArray(ar) {\n  return Array.isArray(ar) ||\n         (typeof ar === 'object' && objectToString(ar) === '[object Array]');\n}\n\nfunction isRegExp(re) {\n  return typeof re === 'object' && objectToString(re) === '[object RegExp]';\n}\n\nfunction isDate(d) {\n  return typeof d === 'object' && objectToString(d) === '[object Date]';\n}\n\nfunction isError(e) {\n  return typeof e === 'object' && objectToString(e) === '[object Error]';\n}\n\nfunction objectToString(o) {\n  return Object.prototype.toString.call(o);\n}\n\n\n/***/ },\n\n/***/ 11:\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__helpers__ = __webpack_require__(27);\n/* unused harmony export MAX_COORD */\n/* harmony export (binding) */ __webpack_require__.d(exports, \"b\", function() { return MAX_INSTRUCTION; });\n/* harmony export (binding) */ __webpack_require__.d(exports, \"c\", function() { return X_BOUNDS; });\n/* harmony export (binding) */ __webpack_require__.d(exports, \"d\", function() { return Y_BOUNDS; });\n/* harmony export (binding) */ __webpack_require__.d(exports, \"a\", function() { return bounds; });\n/** module config */\n\n\n\n/*\n * Default values\n */\nvar MAX_COORD = 50;\nvar MAX_INSTRUCTION = 100;\nvar X_BOUNDS = 5;\nvar Y_BOUNDS = 3;\n\n/**\n * set boundaries for mars as object literal\n * and return a boundaries a map with our points\n */\nvar x = void 0,\n    y = void 0;\nvar bounds = {\n  set x(value) {\n    x = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__helpers__[\"a\" /* isPositiveNumber */])(value) && value <= MAX_COORD ? value : X_BOUNDS;\n  },\n  get x() {\n    return x;\n  },\n  set y(value) {\n    y = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__helpers__[\"a\" /* isPositiveNumber */])(value) && value <= MAX_COORD ? value : Y_BOUNDS;\n  },\n  get y() {\n    return y;\n  },\n  get point() {\n    return new Map([['x', x], ['y', y]]);\n  },\n  get isSet() {\n    return x > 0 && y > 0;\n  }\n};\n\n/***/ },\n\n/***/ 110:\n/***/ function(module, exports, __webpack_require__) {\n\nmodule.exports = __webpack_require__(372);\n\n\n/***/ },\n\n/***/ 142:\n/***/ function(module, exports) {\n\n/*!\n * Chai - getActual utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * # getActual(object, [actual])\n *\n * Returns the `actual` value for an Assertion\n *\n * @param {Object} object (constructed Assertion)\n * @param {Arguments} chai.Assertion.prototype.assert arguments\n * @namespace Utils\n * @name getActual\n */\n\nmodule.exports = function (obj, args) {\n  return args.length > 4 ? args[4] : obj._obj;\n};\n\n\n/***/ },\n\n/***/ 143:\n/***/ function(module, exports) {\n\n/*!\n * Chai - getName utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * # getName(func)\n *\n * Gets the name of a function, in a cross-browser way.\n *\n * @param {Function} a function (usually a constructor)\n * @namespace Utils\n * @name getName\n */\n\nmodule.exports = function (func) {\n  if (func.name) return func.name;\n\n  var match = /^\\s?function ([^(]*)\\(/.exec(func);\n  return match && match[1] ? match[1] : \"\";\n};\n\n\n/***/ },\n\n/***/ 144:\n/***/ function(module, exports, __webpack_require__) {\n\n/*!\n * Chai - getPathInfo utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar hasProperty = __webpack_require__(145);\n\n/**\n * ### .getPathInfo(path, object)\n *\n * This allows the retrieval of property info in an\n * object given a string path.\n *\n * The path info consists of an object with the\n * following properties:\n *\n * * parent - The parent object of the property referenced by `path`\n * * name - The name of the final property, a number if it was an array indexer\n * * value - The value of the property, if it exists, otherwise `undefined`\n * * exists - Whether the property exists or not\n *\n * @param {String} path\n * @param {Object} object\n * @returns {Object} info\n * @namespace Utils\n * @name getPathInfo\n * @api public\n */\n\nmodule.exports = function getPathInfo(path, obj) {\n  var parsed = parsePath(path),\n      last = parsed[parsed.length - 1];\n\n  var info = {\n    parent: parsed.length > 1 ? _getPathValue(parsed, obj, parsed.length - 1) : obj,\n    name: last.p || last.i,\n    value: _getPathValue(parsed, obj)\n  };\n  info.exists = hasProperty(info.name, info.parent);\n\n  return info;\n};\n\n\n/*!\n * ## parsePath(path)\n *\n * Helper function used to parse string object\n * paths. Use in conjunction with `_getPathValue`.\n *\n *      var parsed = parsePath('myobject.property.subprop');\n *\n * ### Paths:\n *\n * * Can be as near infinitely deep and nested\n * * Arrays are also valid using the formal `myobject.document[3].property`.\n * * Literal dots and brackets (not delimiter) must be backslash-escaped.\n *\n * @param {String} path\n * @returns {Object} parsed\n * @api private\n */\n\nfunction parsePath (path) {\n  var str = path.replace(/([^\\\\])\\[/g, '$1.[')\n    , parts = str.match(/(\\\\\\.|[^.]+?)+/g);\n  return parts.map(function (value) {\n    var re = /^\\[(\\d+)\\]$/\n      , mArr = re.exec(value);\n    if (mArr) return { i: parseFloat(mArr[1]) };\n    else return { p: value.replace(/\\\\([.\\[\\]])/g, '$1') };\n  });\n}\n\n\n/*!\n * ## _getPathValue(parsed, obj)\n *\n * Helper companion function for `.parsePath` that returns\n * the value located at the parsed address.\n *\n *      var value = getPathValue(parsed, obj);\n *\n * @param {Object} parsed definition from `parsePath`.\n * @param {Object} object to search against\n * @param {Number} object to search against\n * @returns {Object|Undefined} value\n * @api private\n */\n\nfunction _getPathValue (parsed, obj, index) {\n  var tmp = obj\n    , res;\n\n  index = (index === undefined ? parsed.length : index);\n\n  for (var i = 0, l = index; i < l; i++) {\n    var part = parsed[i];\n    if (tmp) {\n      if ('undefined' !== typeof part.p)\n        tmp = tmp[part.p];\n      else if ('undefined' !== typeof part.i)\n        tmp = tmp[part.i];\n      if (i == (l - 1)) res = tmp;\n    } else {\n      res = undefined;\n    }\n  }\n  return res;\n}\n\n\n/***/ },\n\n/***/ 145:\n/***/ function(module, exports, __webpack_require__) {\n\n/*!\n * Chai - hasProperty utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar type = __webpack_require__(110);\n\n/**\n * ### .hasProperty(object, name)\n *\n * This allows checking whether an object has\n * named property or numeric array index.\n *\n * Basically does the same thing as the `in`\n * operator but works properly with natives\n * and null/undefined values.\n *\n *     var obj = {\n *         arr: ['a', 'b', 'c']\n *       , str: 'Hello'\n *     }\n *\n * The following would be the results.\n *\n *     hasProperty('str', obj);  // true\n *     hasProperty('constructor', obj);  // true\n *     hasProperty('bar', obj);  // false\n *\n *     hasProperty('length', obj.str); // true\n *     hasProperty(1, obj.str);  // true\n *     hasProperty(5, obj.str);  // false\n *\n *     hasProperty('length', obj.arr);  // true\n *     hasProperty(2, obj.arr);  // true\n *     hasProperty(3, obj.arr);  // false\n *\n * @param {Objuect} object\n * @param {String|Number} name\n * @returns {Boolean} whether it exists\n * @namespace Utils\n * @name getPathInfo\n * @api public\n */\n\nvar literals = {\n    'number': Number\n  , 'string': String\n};\n\nmodule.exports = function hasProperty(name, obj) {\n  var ot = type(obj);\n\n  // Bad Object, obviously no props at all\n  if(ot === 'null' || ot === 'undefined')\n    return false;\n\n  // The `in` operator does not work with certain literals\n  // box these before the check\n  if(literals[ot] && typeof obj !== 'object')\n    obj = new literals[ot](obj);\n\n  return name in obj;\n};\n\n\n/***/ },\n\n/***/ 146:\n/***/ function(module, exports, __webpack_require__) {\n\n/*!\n * Chai - flag utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Module dependancies\n */\n\nvar inspect = __webpack_require__(109);\nvar config = __webpack_require__(59);\n\n/**\n * ### .objDisplay (object)\n *\n * Determines if an object or an array matches\n * criteria to be inspected in-line for error\n * messages or should be truncated.\n *\n * @param {Mixed} javascript object to inspect\n * @name objDisplay\n * @namespace Utils\n * @api public\n */\n\nmodule.exports = function (obj) {\n  var str = inspect(obj)\n    , type = Object.prototype.toString.call(obj);\n\n  if (config.truncateThreshold && str.length >= config.truncateThreshold) {\n    if (type === '[object Function]') {\n      return !obj.name || obj.name === ''\n        ? '[Function]'\n        : '[Function: ' + obj.name + ']';\n    } else if (type === '[object Array]') {\n      return '[ Array(' + obj.length + ') ]';\n    } else if (type === '[object Object]') {\n      var keys = Object.keys(obj)\n        , kstr = keys.length > 2\n          ? keys.splice(0, 2).join(', ') + ', ...'\n          : keys.join(', ');\n      return '{ Object (' + kstr + ') }';\n    } else {\n      return str;\n    }\n  } else {\n    return str;\n  }\n};\n\n\n/***/ },\n\n/***/ 147:\n/***/ function(module, exports) {\n\n/*!\n * Chai - transferFlags utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### transferFlags(assertion, object, includeAll = true)\n *\n * Transfer all the flags for `assertion` to `object`. If\n * `includeAll` is set to `false`, then the base Chai\n * assertion flags (namely `object`, `ssfi`, and `message`)\n * will not be transferred.\n *\n *\n *     var newAssertion = new Assertion();\n *     utils.transferFlags(assertion, newAssertion);\n *\n *     var anotherAsseriton = new Assertion(myObj);\n *     utils.transferFlags(assertion, anotherAssertion, false);\n *\n * @param {Assertion} assertion the assertion to transfer the flags from\n * @param {Object} object the object to transfer the flags to; usually a new assertion\n * @param {Boolean} includeAll\n * @namespace Utils\n * @name transferFlags\n * @api private\n */\n\nmodule.exports = function (assertion, object, includeAll) {\n  var flags = assertion.__flags || (assertion.__flags = Object.create(null));\n\n  if (!object.__flags) {\n    object.__flags = Object.create(null);\n  }\n\n  includeAll = arguments.length === 3 ? includeAll : true;\n\n  for (var flag in flags) {\n    if (includeAll ||\n        (flag !== 'object' && flag !== 'ssfi' && flag != 'message')) {\n      object.__flags[flag] = flags[flag];\n    }\n  }\n};\n\n\n/***/ },\n\n/***/ 148:\n/***/ function(module, exports) {\n\n/*!\n * assertion-error\n * Copyright(c) 2013 Jake Luer <jake@qualiancy.com>\n * MIT Licensed\n */\n\n/*!\n * Return a function that will copy properties from\n * one object to another excluding any originally\n * listed. Returned function will create a new `{}`.\n *\n * @param {String} excluded properties ...\n * @return {Function}\n */\n\nfunction exclude () {\n  var excludes = [].slice.call(arguments);\n\n  function excludeProps (res, obj) {\n    Object.keys(obj).forEach(function (key) {\n      if (!~excludes.indexOf(key)) res[key] = obj[key];\n    });\n  }\n\n  return function extendExclude () {\n    var args = [].slice.call(arguments)\n      , i = 0\n      , res = {};\n\n    for (; i < args.length; i++) {\n      excludeProps(res, args[i]);\n    }\n\n    return res;\n  };\n};\n\n/*!\n * Primary Exports\n */\n\nmodule.exports = AssertionError;\n\n/**\n * ### AssertionError\n *\n * An extension of the JavaScript `Error` constructor for\n * assertion and validation scenarios.\n *\n * @param {String} message\n * @param {Object} properties to include (optional)\n * @param {callee} start stack function (optional)\n */\n\nfunction AssertionError (message, _props, ssf) {\n  var extend = exclude('name', 'message', 'stack', 'constructor', 'toJSON')\n    , props = extend(_props || {});\n\n  // default values\n  this.message = message || 'Unspecified AssertionError';\n  this.showDiff = false;\n\n  // copy from properties\n  for (var key in props) {\n    this[key] = props[key];\n  }\n\n  // capture stack trace\n  ssf = ssf || arguments.callee;\n  if (ssf && Error.captureStackTrace) {\n    Error.captureStackTrace(this, ssf);\n  } else {\n    try {\n      throw new Error();\n    } catch(e) {\n      this.stack = e.stack;\n    }\n  }\n}\n\n/*!\n * Inherit from Error.prototype\n */\n\nAssertionError.prototype = Object.create(Error.prototype);\n\n/*!\n * Statically set name\n */\n\nAssertionError.prototype.name = 'AssertionError';\n\n/*!\n * Ensure correct constructor\n */\n\nAssertionError.prototype.constructor = AssertionError;\n\n/**\n * Allow errors to be converted to JSON for static transfer.\n *\n * @param {Boolean} include stack (default: `true`)\n * @return {Object} object that can be `JSON.stringify`\n */\n\nAssertionError.prototype.toJSON = function (stack) {\n  var extend = exclude('constructor', 'toJSON', 'stack')\n    , props = extend({ name: this.name }, this);\n\n  // include stack if exists and not turned off\n  if (false !== stack && this.stack) {\n    props.stack = this.stack;\n  }\n\n  return props;\n};\n\n\n/***/ },\n\n/***/ 160:\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__src_js_classes_cardinalPoints__ = __webpack_require__(78);\n/* global describe:false, before:false, it:false */\n\n\n\nvar assert = __webpack_require__(63).assert;\n\ndescribe('cardinalPoints.js', function () {\n  it('CardinalPoints{}', function () {\n    var cp = new __WEBPACK_IMPORTED_MODULE_0__src_js_classes_cardinalPoints__[\"a\" /* default */]();\n    assert.strictEqual(cp.getDegree('N'), 0, 'N is a point');\n    assert.strictEqual(cp.getDegree('SE'), undefined, 'SE is not a point');\n    assert.strictEqual(cp.getPointName(270), 'W', 'W = 270°');\n    assert.strictEqual(cp.getPointName(271), undefined, '271 doesnt correspond a point');\n    assert.strictEqual(cp.isValidPoint('SE'), false, 'SE is not a point');\n  });\n});\n\n/***/ },\n\n/***/ 161:\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__src_js_config__ = __webpack_require__(11);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__src_js_helpers__ = __webpack_require__(27);\n/* global describe:false, before:false, it:false */\n\n\n\n\nvar assert = __webpack_require__(63).assert;\n\ndescribe('Config & Helpers', function () {\n  before(function () {\n    __WEBPACK_IMPORTED_MODULE_0__src_js_config__[\"a\" /* bounds */].x = -1;\n    __WEBPACK_IMPORTED_MODULE_0__src_js_config__[\"a\" /* bounds */].y = 15;\n  });\n\n  it('bounds{}', function () {\n    assert.strictEqual(__WEBPACK_IMPORTED_MODULE_0__src_js_config__[\"a\" /* bounds */].point.get('x') === 5, true, 'assigning a negative number to bounds will return the default of 5');\n    assert.strictEqual(__WEBPACK_IMPORTED_MODULE_0__src_js_config__[\"a\" /* bounds */].point.get('y') === 15, true, 'assigning a positive number to bounds will return the number');\n  });\n\n  it('isNumber()', function () {\n    assert.strictEqual(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__src_js_helpers__[\"d\" /* isNumber */])(null), false, 'Null test');\n    assert.strictEqual(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__src_js_helpers__[\"d\" /* isNumber */])(undefined), false, 'undefined test');\n    assert.strictEqual(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__src_js_helpers__[\"d\" /* isNumber */])('undefined'), false, 'string test');\n    assert.strictEqual(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__src_js_helpers__[\"d\" /* isNumber */])(16), true, 'actual number');\n    assert.strictEqual(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__src_js_helpers__[\"d\" /* isNumber */])(-1), true, 'a negative number is still a number');\n  });\n});\n\n/***/ },\n\n/***/ 162:\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_os__ = __webpack_require__(38);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_os___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_os__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__src_js_config__ = __webpack_require__(11);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__src_js_classes_martian__ = __webpack_require__(33);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__src_js_classes_martianRobot__ = __webpack_require__(49);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__src_js_controller__ = __webpack_require__(50);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__src_js_store__ = __webpack_require__(53);\n/* global describe:false, before:false, it:false */\n\n\n\n\n\n\n\n\nvar assert = __webpack_require__(63).assert;\n\ndescribe('controller.js', function () {\n  before(function () {\n    __WEBPACK_IMPORTED_MODULE_1__src_js_config__[\"a\" /* bounds */].x = 5;__WEBPACK_IMPORTED_MODULE_1__src_js_config__[\"a\" /* bounds */].y = 3;\n  });\n\n  it('instruct()', function () {\n    var bot1 = new __WEBPACK_IMPORTED_MODULE_3__src_js_classes_martianRobot__[\"a\" /* default */]('bot 1', 1, 1, 'E'); // instruct 1 1 E RFRFRFRF\n    var bot2 = new __WEBPACK_IMPORTED_MODULE_3__src_js_classes_martianRobot__[\"a\" /* default */]('bot 2', 3, 2, 'N'); // instruct 3 2 N FRRFLLFFRRFLL\n    var bot3 = new __WEBPACK_IMPORTED_MODULE_3__src_js_classes_martianRobot__[\"a\" /* default */]('bot 3', 0, 3, 'W'); // instruct 0 3 W LLFFFLFLFL\n    var aMartian = new __WEBPACK_IMPORTED_MODULE_2__src_js_classes_martian__[\"a\" /* default */]('aMartian', 3, 2, 'N'); // instruct -m 3 2 N FRRFLLFFRRFLLFFF\n\n    assert.strictEqual(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__src_js_controller__[\"a\" /* instruct */])(bot1, 'RFRFRFRF').toString(), '1 1 E', 'Test: 1 1 E');\n    assert.strictEqual(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__src_js_controller__[\"a\" /* instruct */])(bot2, 'FRRFLLFFRRFLL').toString(), '3 3 N LOST', 'Test: 3 2 N');\n    assert.strictEqual(__WEBPACK_IMPORTED_MODULE_5__src_js_store__[\"b\" /* lostList */].find(function (point) {\n      return point === '3,3';\n    }), '3,3', 'confirm that the position of the lost robot is added to the list');\n    assert.isAtLeast(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__src_js_controller__[\"a\" /* instruct */])(aMartian, 'FRRFLLFFRRFLLFFF').y, 3, \"Y coords should be greater than 3 which is where bot 2 was lost '3,3'\");\n    assert.strictEqual(__WEBPACK_IMPORTED_MODULE_5__src_js_store__[\"b\" /* lostList */].find(function (point) {\n      return point === '3,3';\n    }), '3,3', 'confirm that the position of the lost robot is added to the list');\n    assert.strictEqual(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__src_js_controller__[\"a\" /* instruct */])(bot3, 'LLFFFLFLFL').toString(), '2 3 S', 'Test: 0 3 W');\n  });\n\n  it('searchMars()', function () {\n    var a = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__src_js_controller__[\"a\" /* instruct */])(new __WEBPACK_IMPORTED_MODULE_3__src_js_classes_martianRobot__[\"a\" /* default */]('bot 1', 1, 1, 'E'), 'RFRFRFRFFFFFF');\n    var b = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__src_js_controller__[\"a\" /* instruct */])(new __WEBPACK_IMPORTED_MODULE_3__src_js_classes_martianRobot__[\"a\" /* default */]('bot 2', 3, 2, 'N'), 'FRRFLLFFRRFLL');\n    var c = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__src_js_controller__[\"a\" /* instruct */])(new __WEBPACK_IMPORTED_MODULE_3__src_js_classes_martianRobot__[\"a\" /* default */]('bot 3', 0, 3, 'W'), 'LLFFFLFLFL');\n    var m = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__src_js_controller__[\"a\" /* instruct */])(new __WEBPACK_IMPORTED_MODULE_2__src_js_classes_martian__[\"a\" /* default */]('aMartian', 3, 2, 'N'), 'FRRFLLFFRRFLLFFF');\n    var mars = new __WEBPACK_IMPORTED_MODULE_5__src_js_store__[\"a\" /* default */]();\n\n    mars.add(a, b, c, m);\n    // const marsArr = mars.getAll().values();\n\n    if (__WEBPACK_IMPORTED_MODULE_0_os___default.a.type() === 'Darwin') {\n      assert.deepEqual(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__src_js_controller__[\"c\" /* searchMars */])(mars.getAll().values(), false, 'isAlive').array, ['🤖 5 1 ➡️ 🆘'], 'Show lost Robots.');\n      assert.deepEqual(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__src_js_controller__[\"c\" /* searchMars */])(mars.getAll().values(), 'Robot').array, ['🤖 5 1 ➡️ 🆘', '🤖 3 2 ⬆️', '🤖 2 3 ⬇️'], 'Show all Robots.');\n      assert.deepEqual(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__src_js_controller__[\"c\" /* searchMars */])(mars.getAll().values(), 'Martian').array, ['👾 3 6 ⬆️'], 'Show all Martians');\n    } else {\n      assert.deepEqual(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__src_js_controller__[\"c\" /* searchMars */])(mars.getAll().values(), false, 'isAlive').array, ['Robot 5 1 E LOST'], 'Show lost Robots.');\n      assert.deepEqual(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__src_js_controller__[\"c\" /* searchMars */])(mars.getAll().values(), 'Robot').array, ['Robot 5 1 E LOST', 'Robot 3 2 N', 'Robot 2 3 S'], 'Show all Robots.');\n      assert.deepEqual(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__src_js_controller__[\"c\" /* searchMars */])(mars.getAll().values(), 'Martian').array, ['Martian 3 6 N'], 'Show all Martians');\n    }\n  });\n});\n\n/***/ },\n\n/***/ 163:\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__src_js_config__ = __webpack_require__(11);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__src_js_classes_martian__ = __webpack_require__(33);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__src_js_classes_martianRobot__ = __webpack_require__(49);\n/* global describe:false, before:false, it:false */\n\n\n\n\n\nvar assert = __webpack_require__(63).assert;\n\ndescribe('Martians & Robots', function () {\n  before(function () {\n    __WEBPACK_IMPORTED_MODULE_0__src_js_config__[\"a\" /* bounds */].x = 5;__WEBPACK_IMPORTED_MODULE_0__src_js_config__[\"a\" /* bounds */].y = 3;\n  });\n\n  it('Martians', function () {\n    var m = new __WEBPACK_IMPORTED_MODULE_1__src_js_classes_martian__[\"a\" /* default */]('', -1, 4, 'sw');\n    assert.isAbove(m.name.length, 0, \"Name can't be blank, should have been defaulted to Date.now().\");\n    try {\n      m.name = 'Byron';\n    } catch (e) {\n      console.log(e);\n    }\n    assert.notEqual(m.name, 'Byron', \"Can't set the name after initialization.\");\n\n    assert.strictEqual(m.x, 0, 'Negative values are invalid for initialization, defaults to zero.');\n    assert.strictEqual(m.y, 0, 'Values above the boundary are invalid for initialization, defaults to zero.');\n    assert.strictEqual(m.point, '0,0', 'Invalid x,y values defaults to zero.');\n\n    assert.strictEqual(m.orientation, 'N', 'Invalid orientations will be set to north on initialization.');\n    try {\n      m.orientation = 'se';\n    } catch (e) {\n      console.log(e);\n    }\n    assert.strictEqual(m.orientation, 'N', 'Invalid orientations will fail on assignment, thus leaving the previous value.');\n\n    assert.strictEqual(m.isAlive, true, 'Invalid live status will be set to true on initialization.');\n    try {\n      m.isAlive = 'fL';\n    } catch (e) {\n      console.log(e);\n    }\n    assert.strictEqual(m.isAlive, true, 'Invalid live status will fail on assignment, thus leaving the previous value.');\n  });\n\n  it('Robots', function () {\n    var r = new __WEBPACK_IMPORTED_MODULE_2__src_js_classes_martianRobot__[\"a\" /* default */](' ', 4, 2, 'E');\n    assert.isAbove(r.name.length, 0, \"Name can't be blank, should have been defaulted to Date.now().\");\n  });\n});\n\n/***/ },\n\n/***/ 164:\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__src_js_config__ = __webpack_require__(11);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__src_js_classes_martian__ = __webpack_require__(33);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__src_js_classes_martianRobot__ = __webpack_require__(49);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__src_js_store__ = __webpack_require__(53);\n/* global describe:false, before:false, it:false */\n\n\n\n\n\n\nvar assert = __webpack_require__(63).assert;\n\ndescribe('store.js', function () {\n  before(function () {\n    __WEBPACK_IMPORTED_MODULE_0__src_js_config__[\"a\" /* bounds */].x = 5;__WEBPACK_IMPORTED_MODULE_0__src_js_config__[\"a\" /* bounds */].y = 3;\n  });\n\n  it('Storage Methods', function () {\n    var a = new __WEBPACK_IMPORTED_MODULE_2__src_js_classes_martianRobot__[\"a\" /* default */]('a', 1, 1, 'E');\n    var b = new __WEBPACK_IMPORTED_MODULE_2__src_js_classes_martianRobot__[\"a\" /* default */]('b', 3, 2, 'N');\n    var c = new __WEBPACK_IMPORTED_MODULE_2__src_js_classes_martianRobot__[\"a\" /* default */]('c', 0, 3, 'W');\n    var aM = new __WEBPACK_IMPORTED_MODULE_1__src_js_classes_martian__[\"a\" /* default */]('aM', 3, 2, 'N');\n\n    var mars = new __WEBPACK_IMPORTED_MODULE_3__src_js_store__[\"a\" /* default */]();\n    assert.strictEqual(mars.getAll().size, 0, 'Should be zero since its just been made.');\n\n    assert.strictEqual(mars.add(a), 1, 'Should be 1 since we just added a robot.');\n    try {\n      assert.strictEqual(mars.add('a', 1, [2]), 1, 'Try to add something other than a robot or martian, should fail and return last size of 1.');\n    } catch (e) {\n      console.log(e);\n    }\n\n    assert.strictEqual(mars.add(b, c, aM), 4, 'Try to add multiple robots or martians, should succeed and return size 4.');\n    assert.strictEqual(mars.update(a), true, 'Return true if successfully updated.');\n    assert.strictEqual(mars.update('a'), false, \"Return false because it doesn't exist.\");\n    assert.strictEqual(mars.remove(b.name), true, 'Successfully removed');\n    assert.strictEqual(mars.get(b.name), undefined, 'We just deleted this so this should be undefined.');\n    assert.strictEqual(mars.getAll().size, 3, 'Should be 3 since we just tossed one.');\n  });\n});\n\n/***/ },\n\n/***/ 27:\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (immutable) */ exports[\"d\"] = isNumber;\n/* harmony export (immutable) */ exports[\"a\"] = isPositiveNumber;\n/* harmony export (immutable) */ exports[\"b\"] = isPosSafe;\n/* unused harmony export strToEmoji */\n/* harmony export (immutable) */ exports[\"c\"] = beingAsEmoji;\n/** @module helpers **/\n\n/**\n *\n * @param   {number} value\n * @returns {boolean} confirm this is a integer\n */\nfunction isNumber(value) {\n  if (/^(\\-|\\+)?([0-9]+|Infinity)$/.test(value)) {\n    return true;\n  }\n  return false;\n}\n\n/**\n *\n * @param   {number} value [[Description]]\n * @returns {boolean} confirm this is a positve number\n */\nfunction isPositiveNumber(value) {\n  if (isNumber(value) && value > 0) {\n    return true;\n  }\n  return false;\n}\n\n/**\n *\n * @param   {number} position to validate\n * @param   {[[Type]]} boundaries to validate position against\n * @returns {boolean}\n */\nfunction isPosSafe(pos, posBounds) {\n  if (pos < 0 || pos > Number.parseInt(posBounds, 10)) {\n    return false;\n  }\n  return true;\n}\n\nvar emoji = new Map();\nemoji.set('LOST', ['🆘', ':sos:']);\nemoji.set('N', ['⬆️', ':arrow_up:']);\nemoji.set('S', ['⬇️', ':arrow_down:']);\nemoji.set('E', ['➡️', ':arrow_right:']);\nemoji.set('W', ['⬅️', ':arrow_left:']);\nemoji.set('Martian', ['👾', ':space_invader:']);\nemoji.set('Robot', ['🤖', ':robot_face:']);\n\n/*\n * matcher for str.replace\n */\nfunction strToEmoji(match) {\n  return emoji.get(match)[0];\n}\n\n/**\n * Get emoji representation of being status\n * @param   {string} being status\n * @returns {string} transformed string\n */\nfunction beingAsEmoji(str) {\n  var regex = /N|S|E|W|(\\bLOST\\b)|(\\bMartian\\b)|(\\bRobot\\b)/g;\n  return '' + str.replace(regex, strToEmoji);\n}\n\n/***/ },\n\n/***/ 33:\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__helpers__ = __webpack_require__(27);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__config__ = __webpack_require__(11);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__cardinalPoints__ = __webpack_require__(78);\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/** @module Martian */\n\n\n\n\n\nvar cp = new __WEBPACK_IMPORTED_MODULE_2__cardinalPoints__[\"a\" /* default */]();\n\n/**\n * defines a martian and its current state\n * a martian can move anywhere AFTER initialization\n */\n\nvar Martian = function () {\n  /**\n   *\n   * @param {string}   name        martian name: defaults to time string\n   * @param {number} x           martian x coordinate: default to zero\n   * @param {number} y           martian y coordinate: default to zero\n   * @param {string}   orientation\n   * martian orientation, must be a valid CardinalPoint or will default to north\n   * @param {boolean} isAlive     martian status, defaults to true\n   */\n  function Martian(name, x, y, orientation) {\n    _classCallCheck(this, Martian);\n\n    this._name = name.trim().length === 0 ? Date.now().toString() : name + '-' + Date.now();\n    this._x = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__helpers__[\"a\" /* isPositiveNumber */])(x) && x <= __WEBPACK_IMPORTED_MODULE_1__config__[\"a\" /* bounds */].point.get('x') ? x : 0;\n    this._y = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__helpers__[\"a\" /* isPositiveNumber */])(y) && y <= __WEBPACK_IMPORTED_MODULE_1__config__[\"a\" /* bounds */].point.get('y') ? y : 0;\n    this._orientation = cp.isValidPoint(orientation) ? orientation.toUpperCase() : 'N';\n  }\n\n  _createClass(Martian, [{\n    key: 'toString',\n\n\n    /**\n     *\n     * @param   {boolean} withType = false; include object type or nah?\n     * @returns {string} being string description\n     */\n    value: function toString() {\n      var withType = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n      var str = this._x + ' ' + this._y + ' ' + this._orientation + (this.isAlive ? '' : ' LOST');\n\n      if (withType) {\n        return this.type + ' ' + str;\n      }\n      return str;\n    }\n\n    /**\n     *\n     * @param {string} direction: sets new orientation based on L/R direction\n     */\n\n  }, {\n    key: 'turn',\n    value: function turn(direction) {\n      var degree = cp.getDegree(this._orientation);\n\n      if (direction.toUpperCase() === 'R') {\n        // when turning right make sure degree never becomes 360 since that value is not mapped\n        degree = degree === 270 ? 0 : degree + 90;\n      } else if (direction.toUpperCase() === 'L') {\n        // when turning left make sure degree never becomes 360 since that value is not mapped\n        degree = degree === 0 ? 270 : degree - 90;\n      }\n\n      // orientation is defined in cardinal points so lets go back to that instead of degrees\n      this.orientation = cp.getPointName(degree);\n    }\n\n    /**\n     * orientation determines which axis to increment/decrement along\n     */\n\n  }, {\n    key: 'move',\n    value: function move() {\n      switch (this._orientation) {\n        case 'N':\n          this._y += 1;\n          break;\n        case 'S':\n          this._y -= 1;\n          break;\n        case 'E':\n          this._x += 1;\n          break;\n        case 'W':\n          this._x -= 1;\n          break;\n        default:\n        // do nothing\n      }\n    }\n  }, {\n    key: 'name',\n    get: function get() {\n      return this._name;\n    }\n  }, {\n    key: 'x',\n    set: function set(value) {\n      this._x = value;\n    },\n    get: function get() {\n      return this._x;\n    }\n  }, {\n    key: 'y',\n    set: function set(value) {\n      this._y = value;\n    },\n    get: function get() {\n      return this._y;\n    }\n  }, {\n    key: 'orientation',\n    set: function set(value) {\n      if (cp.isValidPoint(value)) {\n        this._orientation = value.toUpperCase();\n      } else {\n        throw new Error('This orientation ' + value + ' is not supported.');\n      }\n    },\n    get: function get() {\n      return this._orientation;\n    }\n  }, {\n    key: 'isAlive',\n    get: function get() {\n      return true;\n    }\n  }, {\n    key: 'point',\n    get: function get() {\n      return this._x + ',' + this._y;\n    }\n  }, {\n    key: 'type',\n    get: function get() {\n      return 'Martian';\n    }\n  }]);\n\n  return Martian;\n}();\n\n/* harmony default export */ exports[\"a\"] = Martian;\n\n/***/ },\n\n/***/ 349:\n/***/ function(module, exports, __webpack_require__) {\n\n/*!\n * chai\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar used = []\n  , exports = module.exports = {};\n\n/*!\n * Chai version\n */\n\nexports.version = '3.5.0';\n\n/*!\n * Assertion Error\n */\n\nexports.AssertionError = __webpack_require__(148);\n\n/*!\n * Utils for plugins (not exported)\n */\n\nvar util = __webpack_require__(363);\n\n/**\n * # .use(function)\n *\n * Provides a way to extend the internals of Chai\n *\n * @param {Function}\n * @returns {this} for chaining\n * @api public\n */\n\nexports.use = function (fn) {\n  if (!~used.indexOf(fn)) {\n    fn(this, util);\n    used.push(fn);\n  }\n\n  return this;\n};\n\n/*!\n * Utility Functions\n */\n\nexports.util = util;\n\n/*!\n * Configuration\n */\n\nvar config = __webpack_require__(59);\nexports.config = config;\n\n/*!\n * Primary `Assertion` prototype\n */\n\nvar assertion = __webpack_require__(350);\nexports.use(assertion);\n\n/*!\n * Core Assertions\n */\n\nvar core = __webpack_require__(351);\nexports.use(core);\n\n/*!\n * Expect interface\n */\n\nvar expect = __webpack_require__(353);\nexports.use(expect);\n\n/*!\n * Should interface\n */\n\nvar should = __webpack_require__(354);\nexports.use(should);\n\n/*!\n * Assert interface\n */\n\nvar assert = __webpack_require__(352);\nexports.use(assert);\n\n\n/***/ },\n\n/***/ 350:\n/***/ function(module, exports, __webpack_require__) {\n\n/*!\n * chai\n * http://chaijs.com\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar config = __webpack_require__(59);\n\nmodule.exports = function (_chai, util) {\n  /*!\n   * Module dependencies.\n   */\n\n  var AssertionError = _chai.AssertionError\n    , flag = util.flag;\n\n  /*!\n   * Module export.\n   */\n\n  _chai.Assertion = Assertion;\n\n  /*!\n   * Assertion Constructor\n   *\n   * Creates object for chaining.\n   *\n   * @api private\n   */\n\n  function Assertion (obj, msg, stack) {\n    flag(this, 'ssfi', stack || arguments.callee);\n    flag(this, 'object', obj);\n    flag(this, 'message', msg);\n  }\n\n  Object.defineProperty(Assertion, 'includeStack', {\n    get: function() {\n      console.warn('Assertion.includeStack is deprecated, use chai.config.includeStack instead.');\n      return config.includeStack;\n    },\n    set: function(value) {\n      console.warn('Assertion.includeStack is deprecated, use chai.config.includeStack instead.');\n      config.includeStack = value;\n    }\n  });\n\n  Object.defineProperty(Assertion, 'showDiff', {\n    get: function() {\n      console.warn('Assertion.showDiff is deprecated, use chai.config.showDiff instead.');\n      return config.showDiff;\n    },\n    set: function(value) {\n      console.warn('Assertion.showDiff is deprecated, use chai.config.showDiff instead.');\n      config.showDiff = value;\n    }\n  });\n\n  Assertion.addProperty = function (name, fn) {\n    util.addProperty(this.prototype, name, fn);\n  };\n\n  Assertion.addMethod = function (name, fn) {\n    util.addMethod(this.prototype, name, fn);\n  };\n\n  Assertion.addChainableMethod = function (name, fn, chainingBehavior) {\n    util.addChainableMethod(this.prototype, name, fn, chainingBehavior);\n  };\n\n  Assertion.overwriteProperty = function (name, fn) {\n    util.overwriteProperty(this.prototype, name, fn);\n  };\n\n  Assertion.overwriteMethod = function (name, fn) {\n    util.overwriteMethod(this.prototype, name, fn);\n  };\n\n  Assertion.overwriteChainableMethod = function (name, fn, chainingBehavior) {\n    util.overwriteChainableMethod(this.prototype, name, fn, chainingBehavior);\n  };\n\n  /**\n   * ### .assert(expression, message, negateMessage, expected, actual, showDiff)\n   *\n   * Executes an expression and check expectations. Throws AssertionError for reporting if test doesn't pass.\n   *\n   * @name assert\n   * @param {Philosophical} expression to be tested\n   * @param {String|Function} message or function that returns message to display if expression fails\n   * @param {String|Function} negatedMessage or function that returns negatedMessage to display if negated expression fails\n   * @param {Mixed} expected value (remember to check for negation)\n   * @param {Mixed} actual (optional) will default to `this.obj`\n   * @param {Boolean} showDiff (optional) when set to `true`, assert will display a diff in addition to the message if expression fails\n   * @api private\n   */\n\n  Assertion.prototype.assert = function (expr, msg, negateMsg, expected, _actual, showDiff) {\n    var ok = util.test(this, arguments);\n    if (true !== showDiff) showDiff = false;\n    if (true !== config.showDiff) showDiff = false;\n\n    if (!ok) {\n      var msg = util.getMessage(this, arguments)\n        , actual = util.getActual(this, arguments);\n      throw new AssertionError(msg, {\n          actual: actual\n        , expected: expected\n        , showDiff: showDiff\n      }, (config.includeStack) ? this.assert : flag(this, 'ssfi'));\n    }\n  };\n\n  /*!\n   * ### ._obj\n   *\n   * Quick reference to stored `actual` value for plugin developers.\n   *\n   * @api private\n   */\n\n  Object.defineProperty(Assertion.prototype, '_obj',\n    { get: function () {\n        return flag(this, 'object');\n      }\n    , set: function (val) {\n        flag(this, 'object', val);\n      }\n  });\n};\n\n\n/***/ },\n\n/***/ 351:\n/***/ function(module, exports) {\n\n/*!\n * chai\n * http://chaijs.com\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nmodule.exports = function (chai, _) {\n  var Assertion = chai.Assertion\n    , toString = Object.prototype.toString\n    , flag = _.flag;\n\n  /**\n   * ### Language Chains\n   *\n   * The following are provided as chainable getters to\n   * improve the readability of your assertions. They\n   * do not provide testing capabilities unless they\n   * have been overwritten by a plugin.\n   *\n   * **Chains**\n   *\n   * - to\n   * - be\n   * - been\n   * - is\n   * - that\n   * - which\n   * - and\n   * - has\n   * - have\n   * - with\n   * - at\n   * - of\n   * - same\n   *\n   * @name language chains\n   * @namespace BDD\n   * @api public\n   */\n\n  [ 'to', 'be', 'been'\n  , 'is', 'and', 'has', 'have'\n  , 'with', 'that', 'which', 'at'\n  , 'of', 'same' ].forEach(function (chain) {\n    Assertion.addProperty(chain, function () {\n      return this;\n    });\n  });\n\n  /**\n   * ### .not\n   *\n   * Negates any of assertions following in the chain.\n   *\n   *     expect(foo).to.not.equal('bar');\n   *     expect(goodFn).to.not.throw(Error);\n   *     expect({ foo: 'baz' }).to.have.property('foo')\n   *       .and.not.equal('bar');\n   *\n   * @name not\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('not', function () {\n    flag(this, 'negate', true);\n  });\n\n  /**\n   * ### .deep\n   *\n   * Sets the `deep` flag, later used by the `equal` and\n   * `property` assertions.\n   *\n   *     expect(foo).to.deep.equal({ bar: 'baz' });\n   *     expect({ foo: { bar: { baz: 'quux' } } })\n   *       .to.have.deep.property('foo.bar.baz', 'quux');\n   *\n   * `.deep.property` special characters can be escaped\n   * by adding two slashes before the `.` or `[]`.\n   *\n   *     var deepCss = { '.link': { '[target]': 42 }};\n   *     expect(deepCss).to.have.deep.property('\\\\.link.\\\\[target\\\\]', 42);\n   *\n   * @name deep\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('deep', function () {\n    flag(this, 'deep', true);\n  });\n\n  /**\n   * ### .any\n   *\n   * Sets the `any` flag, (opposite of the `all` flag)\n   * later used in the `keys` assertion.\n   *\n   *     expect(foo).to.have.any.keys('bar', 'baz');\n   *\n   * @name any\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('any', function () {\n    flag(this, 'any', true);\n    flag(this, 'all', false)\n  });\n\n\n  /**\n   * ### .all\n   *\n   * Sets the `all` flag (opposite of the `any` flag)\n   * later used by the `keys` assertion.\n   *\n   *     expect(foo).to.have.all.keys('bar', 'baz');\n   *\n   * @name all\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('all', function () {\n    flag(this, 'all', true);\n    flag(this, 'any', false);\n  });\n\n  /**\n   * ### .a(type)\n   *\n   * The `a` and `an` assertions are aliases that can be\n   * used either as language chains or to assert a value's\n   * type.\n   *\n   *     // typeof\n   *     expect('test').to.be.a('string');\n   *     expect({ foo: 'bar' }).to.be.an('object');\n   *     expect(null).to.be.a('null');\n   *     expect(undefined).to.be.an('undefined');\n   *     expect(new Error).to.be.an('error');\n   *     expect(new Promise).to.be.a('promise');\n   *     expect(new Float32Array()).to.be.a('float32array');\n   *     expect(Symbol()).to.be.a('symbol');\n   *\n   *     // es6 overrides\n   *     expect({[Symbol.toStringTag]:()=>'foo'}).to.be.a('foo');\n   *\n   *     // language chain\n   *     expect(foo).to.be.an.instanceof(Foo);\n   *\n   * @name a\n   * @alias an\n   * @param {String} type\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function an (type, msg) {\n    if (msg) flag(this, 'message', msg);\n    type = type.toLowerCase();\n    var obj = flag(this, 'object')\n      , article = ~[ 'a', 'e', 'i', 'o', 'u' ].indexOf(type.charAt(0)) ? 'an ' : 'a ';\n\n    this.assert(\n        type === _.type(obj)\n      , 'expected #{this} to be ' + article + type\n      , 'expected #{this} not to be ' + article + type\n    );\n  }\n\n  Assertion.addChainableMethod('an', an);\n  Assertion.addChainableMethod('a', an);\n\n  /**\n   * ### .include(value)\n   *\n   * The `include` and `contain` assertions can be used as either property\n   * based language chains or as methods to assert the inclusion of an object\n   * in an array or a substring in a string. When used as language chains,\n   * they toggle the `contains` flag for the `keys` assertion.\n   *\n   *     expect([1,2,3]).to.include(2);\n   *     expect('foobar').to.contain('foo');\n   *     expect({ foo: 'bar', hello: 'universe' }).to.include.keys('foo');\n   *\n   * @name include\n   * @alias contain\n   * @alias includes\n   * @alias contains\n   * @param {Object|String|Number} obj\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function includeChainingBehavior () {\n    flag(this, 'contains', true);\n  }\n\n  function include (val, msg) {\n    _.expectTypes(this, ['array', 'object', 'string']);\n\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    var expected = false;\n\n    if (_.type(obj) === 'array' && _.type(val) === 'object') {\n      for (var i in obj) {\n        if (_.eql(obj[i], val)) {\n          expected = true;\n          break;\n        }\n      }\n    } else if (_.type(val) === 'object') {\n      if (!flag(this, 'negate')) {\n        for (var k in val) new Assertion(obj).property(k, val[k]);\n        return;\n      }\n      var subset = {};\n      for (var k in val) subset[k] = obj[k];\n      expected = _.eql(subset, val);\n    } else {\n      expected = (obj != undefined) && ~obj.indexOf(val);\n    }\n    this.assert(\n        expected\n      , 'expected #{this} to include ' + _.inspect(val)\n      , 'expected #{this} to not include ' + _.inspect(val));\n  }\n\n  Assertion.addChainableMethod('include', include, includeChainingBehavior);\n  Assertion.addChainableMethod('contain', include, includeChainingBehavior);\n  Assertion.addChainableMethod('contains', include, includeChainingBehavior);\n  Assertion.addChainableMethod('includes', include, includeChainingBehavior);\n\n  /**\n   * ### .ok\n   *\n   * Asserts that the target is truthy.\n   *\n   *     expect('everything').to.be.ok;\n   *     expect(1).to.be.ok;\n   *     expect(false).to.not.be.ok;\n   *     expect(undefined).to.not.be.ok;\n   *     expect(null).to.not.be.ok;\n   *\n   * @name ok\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('ok', function () {\n    this.assert(\n        flag(this, 'object')\n      , 'expected #{this} to be truthy'\n      , 'expected #{this} to be falsy');\n  });\n\n  /**\n   * ### .true\n   *\n   * Asserts that the target is `true`.\n   *\n   *     expect(true).to.be.true;\n   *     expect(1).to.not.be.true;\n   *\n   * @name true\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('true', function () {\n    this.assert(\n        true === flag(this, 'object')\n      , 'expected #{this} to be true'\n      , 'expected #{this} to be false'\n      , this.negate ? false : true\n    );\n  });\n\n  /**\n   * ### .false\n   *\n   * Asserts that the target is `false`.\n   *\n   *     expect(false).to.be.false;\n   *     expect(0).to.not.be.false;\n   *\n   * @name false\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('false', function () {\n    this.assert(\n        false === flag(this, 'object')\n      , 'expected #{this} to be false'\n      , 'expected #{this} to be true'\n      , this.negate ? true : false\n    );\n  });\n\n  /**\n   * ### .null\n   *\n   * Asserts that the target is `null`.\n   *\n   *     expect(null).to.be.null;\n   *     expect(undefined).to.not.be.null;\n   *\n   * @name null\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('null', function () {\n    this.assert(\n        null === flag(this, 'object')\n      , 'expected #{this} to be null'\n      , 'expected #{this} not to be null'\n    );\n  });\n\n  /**\n   * ### .undefined\n   *\n   * Asserts that the target is `undefined`.\n   *\n   *     expect(undefined).to.be.undefined;\n   *     expect(null).to.not.be.undefined;\n   *\n   * @name undefined\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('undefined', function () {\n    this.assert(\n        undefined === flag(this, 'object')\n      , 'expected #{this} to be undefined'\n      , 'expected #{this} not to be undefined'\n    );\n  });\n\n  /**\n   * ### .NaN\n   * Asserts that the target is `NaN`.\n   *\n   *     expect('foo').to.be.NaN;\n   *     expect(4).not.to.be.NaN;\n   *\n   * @name NaN\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('NaN', function () {\n    this.assert(\n        isNaN(flag(this, 'object'))\n        , 'expected #{this} to be NaN'\n        , 'expected #{this} not to be NaN'\n    );\n  });\n\n  /**\n   * ### .exist\n   *\n   * Asserts that the target is neither `null` nor `undefined`.\n   *\n   *     var foo = 'hi'\n   *       , bar = null\n   *       , baz;\n   *\n   *     expect(foo).to.exist;\n   *     expect(bar).to.not.exist;\n   *     expect(baz).to.not.exist;\n   *\n   * @name exist\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('exist', function () {\n    this.assert(\n        null != flag(this, 'object')\n      , 'expected #{this} to exist'\n      , 'expected #{this} to not exist'\n    );\n  });\n\n\n  /**\n   * ### .empty\n   *\n   * Asserts that the target's length is `0`. For arrays and strings, it checks\n   * the `length` property. For objects, it gets the count of\n   * enumerable keys.\n   *\n   *     expect([]).to.be.empty;\n   *     expect('').to.be.empty;\n   *     expect({}).to.be.empty;\n   *\n   * @name empty\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('empty', function () {\n    var obj = flag(this, 'object')\n      , expected = obj;\n\n    if (Array.isArray(obj) || 'string' === typeof object) {\n      expected = obj.length;\n    } else if (typeof obj === 'object') {\n      expected = Object.keys(obj).length;\n    }\n\n    this.assert(\n        !expected\n      , 'expected #{this} to be empty'\n      , 'expected #{this} not to be empty'\n    );\n  });\n\n  /**\n   * ### .arguments\n   *\n   * Asserts that the target is an arguments object.\n   *\n   *     function test () {\n   *       expect(arguments).to.be.arguments;\n   *     }\n   *\n   * @name arguments\n   * @alias Arguments\n   * @namespace BDD\n   * @api public\n   */\n\n  function checkArguments () {\n    var obj = flag(this, 'object')\n      , type = Object.prototype.toString.call(obj);\n    this.assert(\n        '[object Arguments]' === type\n      , 'expected #{this} to be arguments but got ' + type\n      , 'expected #{this} to not be arguments'\n    );\n  }\n\n  Assertion.addProperty('arguments', checkArguments);\n  Assertion.addProperty('Arguments', checkArguments);\n\n  /**\n   * ### .equal(value)\n   *\n   * Asserts that the target is strictly equal (`===`) to `value`.\n   * Alternately, if the `deep` flag is set, asserts that\n   * the target is deeply equal to `value`.\n   *\n   *     expect('hello').to.equal('hello');\n   *     expect(42).to.equal(42);\n   *     expect(1).to.not.equal(true);\n   *     expect({ foo: 'bar' }).to.not.equal({ foo: 'bar' });\n   *     expect({ foo: 'bar' }).to.deep.equal({ foo: 'bar' });\n   *\n   * @name equal\n   * @alias equals\n   * @alias eq\n   * @alias deep.equal\n   * @param {Mixed} value\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertEqual (val, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    if (flag(this, 'deep')) {\n      return this.eql(val);\n    } else {\n      this.assert(\n          val === obj\n        , 'expected #{this} to equal #{exp}'\n        , 'expected #{this} to not equal #{exp}'\n        , val\n        , this._obj\n        , true\n      );\n    }\n  }\n\n  Assertion.addMethod('equal', assertEqual);\n  Assertion.addMethod('equals', assertEqual);\n  Assertion.addMethod('eq', assertEqual);\n\n  /**\n   * ### .eql(value)\n   *\n   * Asserts that the target is deeply equal to `value`.\n   *\n   *     expect({ foo: 'bar' }).to.eql({ foo: 'bar' });\n   *     expect([ 1, 2, 3 ]).to.eql([ 1, 2, 3 ]);\n   *\n   * @name eql\n   * @alias eqls\n   * @param {Mixed} value\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertEql(obj, msg) {\n    if (msg) flag(this, 'message', msg);\n    this.assert(\n        _.eql(obj, flag(this, 'object'))\n      , 'expected #{this} to deeply equal #{exp}'\n      , 'expected #{this} to not deeply equal #{exp}'\n      , obj\n      , this._obj\n      , true\n    );\n  }\n\n  Assertion.addMethod('eql', assertEql);\n  Assertion.addMethod('eqls', assertEql);\n\n  /**\n   * ### .above(value)\n   *\n   * Asserts that the target is greater than `value`.\n   *\n   *     expect(10).to.be.above(5);\n   *\n   * Can also be used in conjunction with `length` to\n   * assert a minimum length. The benefit being a\n   * more informative error message than if the length\n   * was supplied directly.\n   *\n   *     expect('foo').to.have.length.above(2);\n   *     expect([ 1, 2, 3 ]).to.have.length.above(2);\n   *\n   * @name above\n   * @alias gt\n   * @alias greaterThan\n   * @param {Number} value\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertAbove (n, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    if (flag(this, 'doLength')) {\n      new Assertion(obj, msg).to.have.property('length');\n      var len = obj.length;\n      this.assert(\n          len > n\n        , 'expected #{this} to have a length above #{exp} but got #{act}'\n        , 'expected #{this} to not have a length above #{exp}'\n        , n\n        , len\n      );\n    } else {\n      this.assert(\n          obj > n\n        , 'expected #{this} to be above ' + n\n        , 'expected #{this} to be at most ' + n\n      );\n    }\n  }\n\n  Assertion.addMethod('above', assertAbove);\n  Assertion.addMethod('gt', assertAbove);\n  Assertion.addMethod('greaterThan', assertAbove);\n\n  /**\n   * ### .least(value)\n   *\n   * Asserts that the target is greater than or equal to `value`.\n   *\n   *     expect(10).to.be.at.least(10);\n   *\n   * Can also be used in conjunction with `length` to\n   * assert a minimum length. The benefit being a\n   * more informative error message than if the length\n   * was supplied directly.\n   *\n   *     expect('foo').to.have.length.of.at.least(2);\n   *     expect([ 1, 2, 3 ]).to.have.length.of.at.least(3);\n   *\n   * @name least\n   * @alias gte\n   * @param {Number} value\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertLeast (n, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    if (flag(this, 'doLength')) {\n      new Assertion(obj, msg).to.have.property('length');\n      var len = obj.length;\n      this.assert(\n          len >= n\n        , 'expected #{this} to have a length at least #{exp} but got #{act}'\n        , 'expected #{this} to have a length below #{exp}'\n        , n\n        , len\n      );\n    } else {\n      this.assert(\n          obj >= n\n        , 'expected #{this} to be at least ' + n\n        , 'expected #{this} to be below ' + n\n      );\n    }\n  }\n\n  Assertion.addMethod('least', assertLeast);\n  Assertion.addMethod('gte', assertLeast);\n\n  /**\n   * ### .below(value)\n   *\n   * Asserts that the target is less than `value`.\n   *\n   *     expect(5).to.be.below(10);\n   *\n   * Can also be used in conjunction with `length` to\n   * assert a maximum length. The benefit being a\n   * more informative error message than if the length\n   * was supplied directly.\n   *\n   *     expect('foo').to.have.length.below(4);\n   *     expect([ 1, 2, 3 ]).to.have.length.below(4);\n   *\n   * @name below\n   * @alias lt\n   * @alias lessThan\n   * @param {Number} value\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertBelow (n, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    if (flag(this, 'doLength')) {\n      new Assertion(obj, msg).to.have.property('length');\n      var len = obj.length;\n      this.assert(\n          len < n\n        , 'expected #{this} to have a length below #{exp} but got #{act}'\n        , 'expected #{this} to not have a length below #{exp}'\n        , n\n        , len\n      );\n    } else {\n      this.assert(\n          obj < n\n        , 'expected #{this} to be below ' + n\n        , 'expected #{this} to be at least ' + n\n      );\n    }\n  }\n\n  Assertion.addMethod('below', assertBelow);\n  Assertion.addMethod('lt', assertBelow);\n  Assertion.addMethod('lessThan', assertBelow);\n\n  /**\n   * ### .most(value)\n   *\n   * Asserts that the target is less than or equal to `value`.\n   *\n   *     expect(5).to.be.at.most(5);\n   *\n   * Can also be used in conjunction with `length` to\n   * assert a maximum length. The benefit being a\n   * more informative error message than if the length\n   * was supplied directly.\n   *\n   *     expect('foo').to.have.length.of.at.most(4);\n   *     expect([ 1, 2, 3 ]).to.have.length.of.at.most(3);\n   *\n   * @name most\n   * @alias lte\n   * @param {Number} value\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertMost (n, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    if (flag(this, 'doLength')) {\n      new Assertion(obj, msg).to.have.property('length');\n      var len = obj.length;\n      this.assert(\n          len <= n\n        , 'expected #{this} to have a length at most #{exp} but got #{act}'\n        , 'expected #{this} to have a length above #{exp}'\n        , n\n        , len\n      );\n    } else {\n      this.assert(\n          obj <= n\n        , 'expected #{this} to be at most ' + n\n        , 'expected #{this} to be above ' + n\n      );\n    }\n  }\n\n  Assertion.addMethod('most', assertMost);\n  Assertion.addMethod('lte', assertMost);\n\n  /**\n   * ### .within(start, finish)\n   *\n   * Asserts that the target is within a range.\n   *\n   *     expect(7).to.be.within(5,10);\n   *\n   * Can also be used in conjunction with `length` to\n   * assert a length range. The benefit being a\n   * more informative error message than if the length\n   * was supplied directly.\n   *\n   *     expect('foo').to.have.length.within(2,4);\n   *     expect([ 1, 2, 3 ]).to.have.length.within(2,4);\n   *\n   * @name within\n   * @param {Number} start lowerbound inclusive\n   * @param {Number} finish upperbound inclusive\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addMethod('within', function (start, finish, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , range = start + '..' + finish;\n    if (flag(this, 'doLength')) {\n      new Assertion(obj, msg).to.have.property('length');\n      var len = obj.length;\n      this.assert(\n          len >= start && len <= finish\n        , 'expected #{this} to have a length within ' + range\n        , 'expected #{this} to not have a length within ' + range\n      );\n    } else {\n      this.assert(\n          obj >= start && obj <= finish\n        , 'expected #{this} to be within ' + range\n        , 'expected #{this} to not be within ' + range\n      );\n    }\n  });\n\n  /**\n   * ### .instanceof(constructor)\n   *\n   * Asserts that the target is an instance of `constructor`.\n   *\n   *     var Tea = function (name) { this.name = name; }\n   *       , Chai = new Tea('chai');\n   *\n   *     expect(Chai).to.be.an.instanceof(Tea);\n   *     expect([ 1, 2, 3 ]).to.be.instanceof(Array);\n   *\n   * @name instanceof\n   * @param {Constructor} constructor\n   * @param {String} message _optional_\n   * @alias instanceOf\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertInstanceOf (constructor, msg) {\n    if (msg) flag(this, 'message', msg);\n    var name = _.getName(constructor);\n    this.assert(\n        flag(this, 'object') instanceof constructor\n      , 'expected #{this} to be an instance of ' + name\n      , 'expected #{this} to not be an instance of ' + name\n    );\n  };\n\n  Assertion.addMethod('instanceof', assertInstanceOf);\n  Assertion.addMethod('instanceOf', assertInstanceOf);\n\n  /**\n   * ### .property(name, [value])\n   *\n   * Asserts that the target has a property `name`, optionally asserting that\n   * the value of that property is strictly equal to  `value`.\n   * If the `deep` flag is set, you can use dot- and bracket-notation for deep\n   * references into objects and arrays.\n   *\n   *     // simple referencing\n   *     var obj = { foo: 'bar' };\n   *     expect(obj).to.have.property('foo');\n   *     expect(obj).to.have.property('foo', 'bar');\n   *\n   *     // deep referencing\n   *     var deepObj = {\n   *         green: { tea: 'matcha' }\n   *       , teas: [ 'chai', 'matcha', { tea: 'konacha' } ]\n   *     };\n   *\n   *     expect(deepObj).to.have.deep.property('green.tea', 'matcha');\n   *     expect(deepObj).to.have.deep.property('teas[1]', 'matcha');\n   *     expect(deepObj).to.have.deep.property('teas[2].tea', 'konacha');\n   *\n   * You can also use an array as the starting point of a `deep.property`\n   * assertion, or traverse nested arrays.\n   *\n   *     var arr = [\n   *         [ 'chai', 'matcha', 'konacha' ]\n   *       , [ { tea: 'chai' }\n   *         , { tea: 'matcha' }\n   *         , { tea: 'konacha' } ]\n   *     ];\n   *\n   *     expect(arr).to.have.deep.property('[0][1]', 'matcha');\n   *     expect(arr).to.have.deep.property('[1][2].tea', 'konacha');\n   *\n   * Furthermore, `property` changes the subject of the assertion\n   * to be the value of that property from the original object. This\n   * permits for further chainable assertions on that property.\n   *\n   *     expect(obj).to.have.property('foo')\n   *       .that.is.a('string');\n   *     expect(deepObj).to.have.property('green')\n   *       .that.is.an('object')\n   *       .that.deep.equals({ tea: 'matcha' });\n   *     expect(deepObj).to.have.property('teas')\n   *       .that.is.an('array')\n   *       .with.deep.property('[2]')\n   *         .that.deep.equals({ tea: 'konacha' });\n   *\n   * Note that dots and bracket in `name` must be backslash-escaped when\n   * the `deep` flag is set, while they must NOT be escaped when the `deep`\n   * flag is not set.\n   *\n   *     // simple referencing\n   *     var css = { '.link[target]': 42 };\n   *     expect(css).to.have.property('.link[target]', 42);\n   *\n   *     // deep referencing\n   *     var deepCss = { '.link': { '[target]': 42 }};\n   *     expect(deepCss).to.have.deep.property('\\\\.link.\\\\[target\\\\]', 42);\n   *\n   * @name property\n   * @alias deep.property\n   * @param {String} name\n   * @param {Mixed} value (optional)\n   * @param {String} message _optional_\n   * @returns value of property for chaining\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addMethod('property', function (name, val, msg) {\n    if (msg) flag(this, 'message', msg);\n\n    var isDeep = !!flag(this, 'deep')\n      , descriptor = isDeep ? 'deep property ' : 'property '\n      , negate = flag(this, 'negate')\n      , obj = flag(this, 'object')\n      , pathInfo = isDeep ? _.getPathInfo(name, obj) : null\n      , hasProperty = isDeep\n        ? pathInfo.exists\n        : _.hasProperty(name, obj)\n      , value = isDeep\n        ? pathInfo.value\n        : obj[name];\n\n    if (negate && arguments.length > 1) {\n      if (undefined === value) {\n        msg = (msg != null) ? msg + ': ' : '';\n        throw new Error(msg + _.inspect(obj) + ' has no ' + descriptor + _.inspect(name));\n      }\n    } else {\n      this.assert(\n          hasProperty\n        , 'expected #{this} to have a ' + descriptor + _.inspect(name)\n        , 'expected #{this} to not have ' + descriptor + _.inspect(name));\n    }\n\n    if (arguments.length > 1) {\n      this.assert(\n          val === value\n        , 'expected #{this} to have a ' + descriptor + _.inspect(name) + ' of #{exp}, but got #{act}'\n        , 'expected #{this} to not have a ' + descriptor + _.inspect(name) + ' of #{act}'\n        , val\n        , value\n      );\n    }\n\n    flag(this, 'object', value);\n  });\n\n\n  /**\n   * ### .ownProperty(name)\n   *\n   * Asserts that the target has an own property `name`.\n   *\n   *     expect('test').to.have.ownProperty('length');\n   *\n   * @name ownProperty\n   * @alias haveOwnProperty\n   * @param {String} name\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertOwnProperty (name, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    this.assert(\n        obj.hasOwnProperty(name)\n      , 'expected #{this} to have own property ' + _.inspect(name)\n      , 'expected #{this} to not have own property ' + _.inspect(name)\n    );\n  }\n\n  Assertion.addMethod('ownProperty', assertOwnProperty);\n  Assertion.addMethod('haveOwnProperty', assertOwnProperty);\n\n  /**\n   * ### .ownPropertyDescriptor(name[, descriptor[, message]])\n   *\n   * Asserts that the target has an own property descriptor `name`, that optionally matches `descriptor`.\n   *\n   *     expect('test').to.have.ownPropertyDescriptor('length');\n   *     expect('test').to.have.ownPropertyDescriptor('length', { enumerable: false, configurable: false, writable: false, value: 4 });\n   *     expect('test').not.to.have.ownPropertyDescriptor('length', { enumerable: false, configurable: false, writable: false, value: 3 });\n   *     expect('test').ownPropertyDescriptor('length').to.have.property('enumerable', false);\n   *     expect('test').ownPropertyDescriptor('length').to.have.keys('value');\n   *\n   * @name ownPropertyDescriptor\n   * @alias haveOwnPropertyDescriptor\n   * @param {String} name\n   * @param {Object} descriptor _optional_\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertOwnPropertyDescriptor (name, descriptor, msg) {\n    if (typeof descriptor === 'string') {\n      msg = descriptor;\n      descriptor = null;\n    }\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    var actualDescriptor = Object.getOwnPropertyDescriptor(Object(obj), name);\n    if (actualDescriptor && descriptor) {\n      this.assert(\n          _.eql(descriptor, actualDescriptor)\n        , 'expected the own property descriptor for ' + _.inspect(name) + ' on #{this} to match ' + _.inspect(descriptor) + ', got ' + _.inspect(actualDescriptor)\n        , 'expected the own property descriptor for ' + _.inspect(name) + ' on #{this} to not match ' + _.inspect(descriptor)\n        , descriptor\n        , actualDescriptor\n        , true\n      );\n    } else {\n      this.assert(\n          actualDescriptor\n        , 'expected #{this} to have an own property descriptor for ' + _.inspect(name)\n        , 'expected #{this} to not have an own property descriptor for ' + _.inspect(name)\n      );\n    }\n    flag(this, 'object', actualDescriptor);\n  }\n\n  Assertion.addMethod('ownPropertyDescriptor', assertOwnPropertyDescriptor);\n  Assertion.addMethod('haveOwnPropertyDescriptor', assertOwnPropertyDescriptor);\n\n  /**\n   * ### .length\n   *\n   * Sets the `doLength` flag later used as a chain precursor to a value\n   * comparison for the `length` property.\n   *\n   *     expect('foo').to.have.length.above(2);\n   *     expect([ 1, 2, 3 ]).to.have.length.above(2);\n   *     expect('foo').to.have.length.below(4);\n   *     expect([ 1, 2, 3 ]).to.have.length.below(4);\n   *     expect('foo').to.have.length.within(2,4);\n   *     expect([ 1, 2, 3 ]).to.have.length.within(2,4);\n   *\n   * *Deprecation notice:* Using `length` as an assertion will be deprecated\n   * in version 2.4.0 and removed in 3.0.0. Code using the old style of\n   * asserting for `length` property value using `length(value)` should be\n   * switched to use `lengthOf(value)` instead.\n   *\n   * @name length\n   * @namespace BDD\n   * @api public\n   */\n\n  /**\n   * ### .lengthOf(value[, message])\n   *\n   * Asserts that the target's `length` property has\n   * the expected value.\n   *\n   *     expect([ 1, 2, 3]).to.have.lengthOf(3);\n   *     expect('foobar').to.have.lengthOf(6);\n   *\n   * @name lengthOf\n   * @param {Number} length\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertLengthChain () {\n    flag(this, 'doLength', true);\n  }\n\n  function assertLength (n, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    new Assertion(obj, msg).to.have.property('length');\n    var len = obj.length;\n\n    this.assert(\n        len == n\n      , 'expected #{this} to have a length of #{exp} but got #{act}'\n      , 'expected #{this} to not have a length of #{act}'\n      , n\n      , len\n    );\n  }\n\n  Assertion.addChainableMethod('length', assertLength, assertLengthChain);\n  Assertion.addMethod('lengthOf', assertLength);\n\n  /**\n   * ### .match(regexp)\n   *\n   * Asserts that the target matches a regular expression.\n   *\n   *     expect('foobar').to.match(/^foo/);\n   *\n   * @name match\n   * @alias matches\n   * @param {RegExp} RegularExpression\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n  function assertMatch(re, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    this.assert(\n        re.exec(obj)\n      , 'expected #{this} to match ' + re\n      , 'expected #{this} not to match ' + re\n    );\n  }\n\n  Assertion.addMethod('match', assertMatch);\n  Assertion.addMethod('matches', assertMatch);\n\n  /**\n   * ### .string(string)\n   *\n   * Asserts that the string target contains another string.\n   *\n   *     expect('foobar').to.have.string('bar');\n   *\n   * @name string\n   * @param {String} string\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addMethod('string', function (str, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    new Assertion(obj, msg).is.a('string');\n\n    this.assert(\n        ~obj.indexOf(str)\n      , 'expected #{this} to contain ' + _.inspect(str)\n      , 'expected #{this} to not contain ' + _.inspect(str)\n    );\n  });\n\n\n  /**\n   * ### .keys(key1, [key2], [...])\n   *\n   * Asserts that the target contains any or all of the passed-in keys.\n   * Use in combination with `any`, `all`, `contains`, or `have` will affect\n   * what will pass.\n   *\n   * When used in conjunction with `any`, at least one key that is passed\n   * in must exist in the target object. This is regardless whether or not\n   * the `have` or `contain` qualifiers are used. Note, either `any` or `all`\n   * should be used in the assertion. If neither are used, the assertion is\n   * defaulted to `all`.\n   *\n   * When both `all` and `contain` are used, the target object must have at\n   * least all of the passed-in keys but may have more keys not listed.\n   *\n   * When both `all` and `have` are used, the target object must both contain\n   * all of the passed-in keys AND the number of keys in the target object must\n   * match the number of keys passed in (in other words, a target object must\n   * have all and only all of the passed-in keys).\n   *\n   *     expect({ foo: 1, bar: 2 }).to.have.any.keys('foo', 'baz');\n   *     expect({ foo: 1, bar: 2 }).to.have.any.keys('foo');\n   *     expect({ foo: 1, bar: 2 }).to.contain.any.keys('bar', 'baz');\n   *     expect({ foo: 1, bar: 2 }).to.contain.any.keys(['foo']);\n   *     expect({ foo: 1, bar: 2 }).to.contain.any.keys({'foo': 6});\n   *     expect({ foo: 1, bar: 2 }).to.have.all.keys(['bar', 'foo']);\n   *     expect({ foo: 1, bar: 2 }).to.have.all.keys({'bar': 6, 'foo': 7});\n   *     expect({ foo: 1, bar: 2, baz: 3 }).to.contain.all.keys(['bar', 'foo']);\n   *     expect({ foo: 1, bar: 2, baz: 3 }).to.contain.all.keys({'bar': 6});\n   *\n   *\n   * @name keys\n   * @alias key\n   * @param {...String|Array|Object} keys\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertKeys (keys) {\n    var obj = flag(this, 'object')\n      , str\n      , ok = true\n      , mixedArgsMsg = 'keys must be given single argument of Array|Object|String, or multiple String arguments';\n\n    switch (_.type(keys)) {\n      case \"array\":\n        if (arguments.length > 1) throw (new Error(mixedArgsMsg));\n        break;\n      case \"object\":\n        if (arguments.length > 1) throw (new Error(mixedArgsMsg));\n        keys = Object.keys(keys);\n        break;\n      default:\n        keys = Array.prototype.slice.call(arguments);\n    }\n\n    if (!keys.length) throw new Error('keys required');\n\n    var actual = Object.keys(obj)\n      , expected = keys\n      , len = keys.length\n      , any = flag(this, 'any')\n      , all = flag(this, 'all');\n\n    if (!any && !all) {\n      all = true;\n    }\n\n    // Has any\n    if (any) {\n      var intersection = expected.filter(function(key) {\n        return ~actual.indexOf(key);\n      });\n      ok = intersection.length > 0;\n    }\n\n    // Has all\n    if (all) {\n      ok = keys.every(function(key){\n        return ~actual.indexOf(key);\n      });\n      if (!flag(this, 'negate') && !flag(this, 'contains')) {\n        ok = ok && keys.length == actual.length;\n      }\n    }\n\n    // Key string\n    if (len > 1) {\n      keys = keys.map(function(key){\n        return _.inspect(key);\n      });\n      var last = keys.pop();\n      if (all) {\n        str = keys.join(', ') + ', and ' + last;\n      }\n      if (any) {\n        str = keys.join(', ') + ', or ' + last;\n      }\n    } else {\n      str = _.inspect(keys[0]);\n    }\n\n    // Form\n    str = (len > 1 ? 'keys ' : 'key ') + str;\n\n    // Have / include\n    str = (flag(this, 'contains') ? 'contain ' : 'have ') + str;\n\n    // Assertion\n    this.assert(\n        ok\n      , 'expected #{this} to ' + str\n      , 'expected #{this} to not ' + str\n      , expected.slice(0).sort()\n      , actual.sort()\n      , true\n    );\n  }\n\n  Assertion.addMethod('keys', assertKeys);\n  Assertion.addMethod('key', assertKeys);\n\n  /**\n   * ### .throw(constructor)\n   *\n   * Asserts that the function target will throw a specific error, or specific type of error\n   * (as determined using `instanceof`), optionally with a RegExp or string inclusion test\n   * for the error's message.\n   *\n   *     var err = new ReferenceError('This is a bad function.');\n   *     var fn = function () { throw err; }\n   *     expect(fn).to.throw(ReferenceError);\n   *     expect(fn).to.throw(Error);\n   *     expect(fn).to.throw(/bad function/);\n   *     expect(fn).to.not.throw('good function');\n   *     expect(fn).to.throw(ReferenceError, /bad function/);\n   *     expect(fn).to.throw(err);\n   *\n   * Please note that when a throw expectation is negated, it will check each\n   * parameter independently, starting with error constructor type. The appropriate way\n   * to check for the existence of a type of error but for a message that does not match\n   * is to use `and`.\n   *\n   *     expect(fn).to.throw(ReferenceError)\n   *        .and.not.throw(/good function/);\n   *\n   * @name throw\n   * @alias throws\n   * @alias Throw\n   * @param {ErrorConstructor} constructor\n   * @param {String|RegExp} expected error message\n   * @param {String} message _optional_\n   * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\n   * @returns error for chaining (null if no error)\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertThrows (constructor, errMsg, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    new Assertion(obj, msg).is.a('function');\n\n    var thrown = false\n      , desiredError = null\n      , name = null\n      , thrownError = null;\n\n    if (arguments.length === 0) {\n      errMsg = null;\n      constructor = null;\n    } else if (constructor && (constructor instanceof RegExp || 'string' === typeof constructor)) {\n      errMsg = constructor;\n      constructor = null;\n    } else if (constructor && constructor instanceof Error) {\n      desiredError = constructor;\n      constructor = null;\n      errMsg = null;\n    } else if (typeof constructor === 'function') {\n      name = constructor.prototype.name;\n      if (!name || (name === 'Error' && constructor !== Error)) {\n        name = constructor.name || (new constructor()).name;\n      }\n    } else {\n      constructor = null;\n    }\n\n    try {\n      obj();\n    } catch (err) {\n      // first, check desired error\n      if (desiredError) {\n        this.assert(\n            err === desiredError\n          , 'expected #{this} to throw #{exp} but #{act} was thrown'\n          , 'expected #{this} to not throw #{exp}'\n          , (desiredError instanceof Error ? desiredError.toString() : desiredError)\n          , (err instanceof Error ? err.toString() : err)\n        );\n\n        flag(this, 'object', err);\n        return this;\n      }\n\n      // next, check constructor\n      if (constructor) {\n        this.assert(\n            err instanceof constructor\n          , 'expected #{this} to throw #{exp} but #{act} was thrown'\n          , 'expected #{this} to not throw #{exp} but #{act} was thrown'\n          , name\n          , (err instanceof Error ? err.toString() : err)\n        );\n\n        if (!errMsg) {\n          flag(this, 'object', err);\n          return this;\n        }\n      }\n\n      // next, check message\n      var message = 'error' === _.type(err) && \"message\" in err\n        ? err.message\n        : '' + err;\n\n      if ((message != null) && errMsg && errMsg instanceof RegExp) {\n        this.assert(\n            errMsg.exec(message)\n          , 'expected #{this} to throw error matching #{exp} but got #{act}'\n          , 'expected #{this} to throw error not matching #{exp}'\n          , errMsg\n          , message\n        );\n\n        flag(this, 'object', err);\n        return this;\n      } else if ((message != null) && errMsg && 'string' === typeof errMsg) {\n        this.assert(\n            ~message.indexOf(errMsg)\n          , 'expected #{this} to throw error including #{exp} but got #{act}'\n          , 'expected #{this} to throw error not including #{act}'\n          , errMsg\n          , message\n        );\n\n        flag(this, 'object', err);\n        return this;\n      } else {\n        thrown = true;\n        thrownError = err;\n      }\n    }\n\n    var actuallyGot = ''\n      , expectedThrown = name !== null\n        ? name\n        : desiredError\n          ? '#{exp}' //_.inspect(desiredError)\n          : 'an error';\n\n    if (thrown) {\n      actuallyGot = ' but #{act} was thrown'\n    }\n\n    this.assert(\n        thrown === true\n      , 'expected #{this} to throw ' + expectedThrown + actuallyGot\n      , 'expected #{this} to not throw ' + expectedThrown + actuallyGot\n      , (desiredError instanceof Error ? desiredError.toString() : desiredError)\n      , (thrownError instanceof Error ? thrownError.toString() : thrownError)\n    );\n\n    flag(this, 'object', thrownError);\n  };\n\n  Assertion.addMethod('throw', assertThrows);\n  Assertion.addMethod('throws', assertThrows);\n  Assertion.addMethod('Throw', assertThrows);\n\n  /**\n   * ### .respondTo(method)\n   *\n   * Asserts that the object or class target will respond to a method.\n   *\n   *     Klass.prototype.bar = function(){};\n   *     expect(Klass).to.respondTo('bar');\n   *     expect(obj).to.respondTo('bar');\n   *\n   * To check if a constructor will respond to a static function,\n   * set the `itself` flag.\n   *\n   *     Klass.baz = function(){};\n   *     expect(Klass).itself.to.respondTo('baz');\n   *\n   * @name respondTo\n   * @alias respondsTo\n   * @param {String} method\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function respondTo (method, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , itself = flag(this, 'itself')\n      , context = ('function' === _.type(obj) && !itself)\n        ? obj.prototype[method]\n        : obj[method];\n\n    this.assert(\n        'function' === typeof context\n      , 'expected #{this} to respond to ' + _.inspect(method)\n      , 'expected #{this} to not respond to ' + _.inspect(method)\n    );\n  }\n\n  Assertion.addMethod('respondTo', respondTo);\n  Assertion.addMethod('respondsTo', respondTo);\n\n  /**\n   * ### .itself\n   *\n   * Sets the `itself` flag, later used by the `respondTo` assertion.\n   *\n   *     function Foo() {}\n   *     Foo.bar = function() {}\n   *     Foo.prototype.baz = function() {}\n   *\n   *     expect(Foo).itself.to.respondTo('bar');\n   *     expect(Foo).itself.not.to.respondTo('baz');\n   *\n   * @name itself\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('itself', function () {\n    flag(this, 'itself', true);\n  });\n\n  /**\n   * ### .satisfy(method)\n   *\n   * Asserts that the target passes a given truth test.\n   *\n   *     expect(1).to.satisfy(function(num) { return num > 0; });\n   *\n   * @name satisfy\n   * @alias satisfies\n   * @param {Function} matcher\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function satisfy (matcher, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    var result = matcher(obj);\n    this.assert(\n        result\n      , 'expected #{this} to satisfy ' + _.objDisplay(matcher)\n      , 'expected #{this} to not satisfy' + _.objDisplay(matcher)\n      , this.negate ? false : true\n      , result\n    );\n  }\n\n  Assertion.addMethod('satisfy', satisfy);\n  Assertion.addMethod('satisfies', satisfy);\n\n  /**\n   * ### .closeTo(expected, delta)\n   *\n   * Asserts that the target is equal `expected`, to within a +/- `delta` range.\n   *\n   *     expect(1.5).to.be.closeTo(1, 0.5);\n   *\n   * @name closeTo\n   * @alias approximately\n   * @param {Number} expected\n   * @param {Number} delta\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function closeTo(expected, delta, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n\n    new Assertion(obj, msg).is.a('number');\n    if (_.type(expected) !== 'number' || _.type(delta) !== 'number') {\n      throw new Error('the arguments to closeTo or approximately must be numbers');\n    }\n\n    this.assert(\n        Math.abs(obj - expected) <= delta\n      , 'expected #{this} to be close to ' + expected + ' +/- ' + delta\n      , 'expected #{this} not to be close to ' + expected + ' +/- ' + delta\n    );\n  }\n\n  Assertion.addMethod('closeTo', closeTo);\n  Assertion.addMethod('approximately', closeTo);\n\n  function isSubsetOf(subset, superset, cmp) {\n    return subset.every(function(elem) {\n      if (!cmp) return superset.indexOf(elem) !== -1;\n\n      return superset.some(function(elem2) {\n        return cmp(elem, elem2);\n      });\n    })\n  }\n\n  /**\n   * ### .members(set)\n   *\n   * Asserts that the target is a superset of `set`,\n   * or that the target and `set` have the same strictly-equal (===) members.\n   * Alternately, if the `deep` flag is set, set members are compared for deep\n   * equality.\n   *\n   *     expect([1, 2, 3]).to.include.members([3, 2]);\n   *     expect([1, 2, 3]).to.not.include.members([3, 2, 8]);\n   *\n   *     expect([4, 2]).to.have.members([2, 4]);\n   *     expect([5, 2]).to.not.have.members([5, 2, 1]);\n   *\n   *     expect([{ id: 1 }]).to.deep.include.members([{ id: 1 }]);\n   *\n   * @name members\n   * @param {Array} set\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addMethod('members', function (subset, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n\n    new Assertion(obj).to.be.an('array');\n    new Assertion(subset).to.be.an('array');\n\n    var cmp = flag(this, 'deep') ? _.eql : undefined;\n\n    if (flag(this, 'contains')) {\n      return this.assert(\n          isSubsetOf(subset, obj, cmp)\n        , 'expected #{this} to be a superset of #{act}'\n        , 'expected #{this} to not be a superset of #{act}'\n        , obj\n        , subset\n      );\n    }\n\n    this.assert(\n        isSubsetOf(obj, subset, cmp) && isSubsetOf(subset, obj, cmp)\n        , 'expected #{this} to have the same members as #{act}'\n        , 'expected #{this} to not have the same members as #{act}'\n        , obj\n        , subset\n    );\n  });\n\n  /**\n   * ### .oneOf(list)\n   *\n   * Assert that a value appears somewhere in the top level of array `list`.\n   *\n   *     expect('a').to.be.oneOf(['a', 'b', 'c']);\n   *     expect(9).to.not.be.oneOf(['z']);\n   *     expect([3]).to.not.be.oneOf([1, 2, [3]]);\n   *\n   *     var three = [3];\n   *     // for object-types, contents are not compared\n   *     expect(three).to.not.be.oneOf([1, 2, [3]]);\n   *     // comparing references works\n   *     expect(three).to.be.oneOf([1, 2, three]);\n   *\n   * @name oneOf\n   * @param {Array<*>} list\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function oneOf (list, msg) {\n    if (msg) flag(this, 'message', msg);\n    var expected = flag(this, 'object');\n    new Assertion(list).to.be.an('array');\n\n    this.assert(\n        list.indexOf(expected) > -1\n      , 'expected #{this} to be one of #{exp}'\n      , 'expected #{this} to not be one of #{exp}'\n      , list\n      , expected\n    );\n  }\n\n  Assertion.addMethod('oneOf', oneOf);\n\n\n  /**\n   * ### .change(function)\n   *\n   * Asserts that a function changes an object property\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val += 3 };\n   *     var noChangeFn = function() { return 'foo' + 'bar'; }\n   *     expect(fn).to.change(obj, 'val');\n   *     expect(noChangeFn).to.not.change(obj, 'val')\n   *\n   * @name change\n   * @alias changes\n   * @alias Change\n   * @param {String} object\n   * @param {String} property name\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertChanges (object, prop, msg) {\n    if (msg) flag(this, 'message', msg);\n    var fn = flag(this, 'object');\n    new Assertion(object, msg).to.have.property(prop);\n    new Assertion(fn).is.a('function');\n\n    var initial = object[prop];\n    fn();\n\n    this.assert(\n      initial !== object[prop]\n      , 'expected .' + prop + ' to change'\n      , 'expected .' + prop + ' to not change'\n    );\n  }\n\n  Assertion.addChainableMethod('change', assertChanges);\n  Assertion.addChainableMethod('changes', assertChanges);\n\n  /**\n   * ### .increase(function)\n   *\n   * Asserts that a function increases an object property\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 15 };\n   *     expect(fn).to.increase(obj, 'val');\n   *\n   * @name increase\n   * @alias increases\n   * @alias Increase\n   * @param {String} object\n   * @param {String} property name\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertIncreases (object, prop, msg) {\n    if (msg) flag(this, 'message', msg);\n    var fn = flag(this, 'object');\n    new Assertion(object, msg).to.have.property(prop);\n    new Assertion(fn).is.a('function');\n\n    var initial = object[prop];\n    fn();\n\n    this.assert(\n      object[prop] - initial > 0\n      , 'expected .' + prop + ' to increase'\n      , 'expected .' + prop + ' to not increase'\n    );\n  }\n\n  Assertion.addChainableMethod('increase', assertIncreases);\n  Assertion.addChainableMethod('increases', assertIncreases);\n\n  /**\n   * ### .decrease(function)\n   *\n   * Asserts that a function decreases an object property\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 5 };\n   *     expect(fn).to.decrease(obj, 'val');\n   *\n   * @name decrease\n   * @alias decreases\n   * @alias Decrease\n   * @param {String} object\n   * @param {String} property name\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertDecreases (object, prop, msg) {\n    if (msg) flag(this, 'message', msg);\n    var fn = flag(this, 'object');\n    new Assertion(object, msg).to.have.property(prop);\n    new Assertion(fn).is.a('function');\n\n    var initial = object[prop];\n    fn();\n\n    this.assert(\n      object[prop] - initial < 0\n      , 'expected .' + prop + ' to decrease'\n      , 'expected .' + prop + ' to not decrease'\n    );\n  }\n\n  Assertion.addChainableMethod('decrease', assertDecreases);\n  Assertion.addChainableMethod('decreases', assertDecreases);\n\n  /**\n   * ### .extensible\n   *\n   * Asserts that the target is extensible (can have new properties added to\n   * it).\n   *\n   *     var nonExtensibleObject = Object.preventExtensions({});\n   *     var sealedObject = Object.seal({});\n   *     var frozenObject = Object.freeze({});\n   *\n   *     expect({}).to.be.extensible;\n   *     expect(nonExtensibleObject).to.not.be.extensible;\n   *     expect(sealedObject).to.not.be.extensible;\n   *     expect(frozenObject).to.not.be.extensible;\n   *\n   * @name extensible\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('extensible', function() {\n    var obj = flag(this, 'object');\n\n    // In ES5, if the argument to this method is not an object (a primitive), then it will cause a TypeError.\n    // In ES6, a non-object argument will be treated as if it was a non-extensible ordinary object, simply return false.\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isExtensible\n    // The following provides ES6 behavior when a TypeError is thrown under ES5.\n\n    var isExtensible;\n\n    try {\n      isExtensible = Object.isExtensible(obj);\n    } catch (err) {\n      if (err instanceof TypeError) isExtensible = false;\n      else throw err;\n    }\n\n    this.assert(\n      isExtensible\n      , 'expected #{this} to be extensible'\n      , 'expected #{this} to not be extensible'\n    );\n  });\n\n  /**\n   * ### .sealed\n   *\n   * Asserts that the target is sealed (cannot have new properties added to it\n   * and its existing properties cannot be removed).\n   *\n   *     var sealedObject = Object.seal({});\n   *     var frozenObject = Object.freeze({});\n   *\n   *     expect(sealedObject).to.be.sealed;\n   *     expect(frozenObject).to.be.sealed;\n   *     expect({}).to.not.be.sealed;\n   *\n   * @name sealed\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('sealed', function() {\n    var obj = flag(this, 'object');\n\n    // In ES5, if the argument to this method is not an object (a primitive), then it will cause a TypeError.\n    // In ES6, a non-object argument will be treated as if it was a sealed ordinary object, simply return true.\n    // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isSealed\n    // The following provides ES6 behavior when a TypeError is thrown under ES5.\n\n    var isSealed;\n\n    try {\n      isSealed = Object.isSealed(obj);\n    } catch (err) {\n      if (err instanceof TypeError) isSealed = true;\n      else throw err;\n    }\n\n    this.assert(\n      isSealed\n      , 'expected #{this} to be sealed'\n      , 'expected #{this} to not be sealed'\n    );\n  });\n\n  /**\n   * ### .frozen\n   *\n   * Asserts that the target is frozen (cannot have new properties added to it\n   * and its existing properties cannot be modified).\n   *\n   *     var frozenObject = Object.freeze({});\n   *\n   *     expect(frozenObject).to.be.frozen;\n   *     expect({}).to.not.be.frozen;\n   *\n   * @name frozen\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('frozen', function() {\n    var obj = flag(this, 'object');\n\n    // In ES5, if the argument to this method is not an object (a primitive), then it will cause a TypeError.\n    // In ES6, a non-object argument will be treated as if it was a frozen ordinary object, simply return true.\n    // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isFrozen\n    // The following provides ES6 behavior when a TypeError is thrown under ES5.\n\n    var isFrozen;\n\n    try {\n      isFrozen = Object.isFrozen(obj);\n    } catch (err) {\n      if (err instanceof TypeError) isFrozen = true;\n      else throw err;\n    }\n\n    this.assert(\n      isFrozen\n      , 'expected #{this} to be frozen'\n      , 'expected #{this} to not be frozen'\n    );\n  });\n};\n\n\n/***/ },\n\n/***/ 352:\n/***/ function(module, exports) {\n\n/*!\n * chai\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n\nmodule.exports = function (chai, util) {\n\n  /*!\n   * Chai dependencies.\n   */\n\n  var Assertion = chai.Assertion\n    , flag = util.flag;\n\n  /*!\n   * Module export.\n   */\n\n  /**\n   * ### assert(expression, message)\n   *\n   * Write your own test expressions.\n   *\n   *     assert('foo' !== 'bar', 'foo is not bar');\n   *     assert(Array.isArray([]), 'empty arrays are arrays');\n   *\n   * @param {Mixed} expression to test for truthiness\n   * @param {String} message to display on error\n   * @name assert\n   * @namespace Assert\n   * @api public\n   */\n\n  var assert = chai.assert = function (express, errmsg) {\n    var test = new Assertion(null, null, chai.assert);\n    test.assert(\n        express\n      , errmsg\n      , '[ negation message unavailable ]'\n    );\n  };\n\n  /**\n   * ### .fail(actual, expected, [message], [operator])\n   *\n   * Throw a failure. Node.js `assert` module-compatible.\n   *\n   * @name fail\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @param {String} operator\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.fail = function (actual, expected, message, operator) {\n    message = message || 'assert.fail()';\n    throw new chai.AssertionError(message, {\n        actual: actual\n      , expected: expected\n      , operator: operator\n    }, assert.fail);\n  };\n\n  /**\n   * ### .isOk(object, [message])\n   *\n   * Asserts that `object` is truthy.\n   *\n   *     assert.isOk('everything', 'everything is ok');\n   *     assert.isOk(false, 'this will fail');\n   *\n   * @name isOk\n   * @alias ok\n   * @param {Mixed} object to test\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isOk = function (val, msg) {\n    new Assertion(val, msg).is.ok;\n  };\n\n  /**\n   * ### .isNotOk(object, [message])\n   *\n   * Asserts that `object` is falsy.\n   *\n   *     assert.isNotOk('everything', 'this will fail');\n   *     assert.isNotOk(false, 'this will pass');\n   *\n   * @name isNotOk\n   * @alias notOk\n   * @param {Mixed} object to test\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotOk = function (val, msg) {\n    new Assertion(val, msg).is.not.ok;\n  };\n\n  /**\n   * ### .equal(actual, expected, [message])\n   *\n   * Asserts non-strict equality (`==`) of `actual` and `expected`.\n   *\n   *     assert.equal(3, '3', '== coerces values to strings');\n   *\n   * @name equal\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.equal = function (act, exp, msg) {\n    var test = new Assertion(act, msg, assert.equal);\n\n    test.assert(\n        exp == flag(test, 'object')\n      , 'expected #{this} to equal #{exp}'\n      , 'expected #{this} to not equal #{act}'\n      , exp\n      , act\n    );\n  };\n\n  /**\n   * ### .notEqual(actual, expected, [message])\n   *\n   * Asserts non-strict inequality (`!=`) of `actual` and `expected`.\n   *\n   *     assert.notEqual(3, 4, 'these numbers are not equal');\n   *\n   * @name notEqual\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notEqual = function (act, exp, msg) {\n    var test = new Assertion(act, msg, assert.notEqual);\n\n    test.assert(\n        exp != flag(test, 'object')\n      , 'expected #{this} to not equal #{exp}'\n      , 'expected #{this} to equal #{act}'\n      , exp\n      , act\n    );\n  };\n\n  /**\n   * ### .strictEqual(actual, expected, [message])\n   *\n   * Asserts strict equality (`===`) of `actual` and `expected`.\n   *\n   *     assert.strictEqual(true, true, 'these booleans are strictly equal');\n   *\n   * @name strictEqual\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.strictEqual = function (act, exp, msg) {\n    new Assertion(act, msg).to.equal(exp);\n  };\n\n  /**\n   * ### .notStrictEqual(actual, expected, [message])\n   *\n   * Asserts strict inequality (`!==`) of `actual` and `expected`.\n   *\n   *     assert.notStrictEqual(3, '3', 'no coercion for strict equality');\n   *\n   * @name notStrictEqual\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notStrictEqual = function (act, exp, msg) {\n    new Assertion(act, msg).to.not.equal(exp);\n  };\n\n  /**\n   * ### .deepEqual(actual, expected, [message])\n   *\n   * Asserts that `actual` is deeply equal to `expected`.\n   *\n   *     assert.deepEqual({ tea: 'green' }, { tea: 'green' });\n   *\n   * @name deepEqual\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.deepEqual = function (act, exp, msg) {\n    new Assertion(act, msg).to.eql(exp);\n  };\n\n  /**\n   * ### .notDeepEqual(actual, expected, [message])\n   *\n   * Assert that `actual` is not deeply equal to `expected`.\n   *\n   *     assert.notDeepEqual({ tea: 'green' }, { tea: 'jasmine' });\n   *\n   * @name notDeepEqual\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notDeepEqual = function (act, exp, msg) {\n    new Assertion(act, msg).to.not.eql(exp);\n  };\n\n   /**\n   * ### .isAbove(valueToCheck, valueToBeAbove, [message])\n   *\n   * Asserts `valueToCheck` is strictly greater than (>) `valueToBeAbove`\n   *\n   *     assert.isAbove(5, 2, '5 is strictly greater than 2');\n   *\n   * @name isAbove\n   * @param {Mixed} valueToCheck\n   * @param {Mixed} valueToBeAbove\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isAbove = function (val, abv, msg) {\n    new Assertion(val, msg).to.be.above(abv);\n  };\n\n   /**\n   * ### .isAtLeast(valueToCheck, valueToBeAtLeast, [message])\n   *\n   * Asserts `valueToCheck` is greater than or equal to (>=) `valueToBeAtLeast`\n   *\n   *     assert.isAtLeast(5, 2, '5 is greater or equal to 2');\n   *     assert.isAtLeast(3, 3, '3 is greater or equal to 3');\n   *\n   * @name isAtLeast\n   * @param {Mixed} valueToCheck\n   * @param {Mixed} valueToBeAtLeast\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isAtLeast = function (val, atlst, msg) {\n    new Assertion(val, msg).to.be.least(atlst);\n  };\n\n   /**\n   * ### .isBelow(valueToCheck, valueToBeBelow, [message])\n   *\n   * Asserts `valueToCheck` is strictly less than (<) `valueToBeBelow`\n   *\n   *     assert.isBelow(3, 6, '3 is strictly less than 6');\n   *\n   * @name isBelow\n   * @param {Mixed} valueToCheck\n   * @param {Mixed} valueToBeBelow\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isBelow = function (val, blw, msg) {\n    new Assertion(val, msg).to.be.below(blw);\n  };\n\n   /**\n   * ### .isAtMost(valueToCheck, valueToBeAtMost, [message])\n   *\n   * Asserts `valueToCheck` is less than or equal to (<=) `valueToBeAtMost`\n   *\n   *     assert.isAtMost(3, 6, '3 is less than or equal to 6');\n   *     assert.isAtMost(4, 4, '4 is less than or equal to 4');\n   *\n   * @name isAtMost\n   * @param {Mixed} valueToCheck\n   * @param {Mixed} valueToBeAtMost\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isAtMost = function (val, atmst, msg) {\n    new Assertion(val, msg).to.be.most(atmst);\n  };\n\n  /**\n   * ### .isTrue(value, [message])\n   *\n   * Asserts that `value` is true.\n   *\n   *     var teaServed = true;\n   *     assert.isTrue(teaServed, 'the tea has been served');\n   *\n   * @name isTrue\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isTrue = function (val, msg) {\n    new Assertion(val, msg).is['true'];\n  };\n\n  /**\n   * ### .isNotTrue(value, [message])\n   *\n   * Asserts that `value` is not true.\n   *\n   *     var tea = 'tasty chai';\n   *     assert.isNotTrue(tea, 'great, time for tea!');\n   *\n   * @name isNotTrue\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotTrue = function (val, msg) {\n    new Assertion(val, msg).to.not.equal(true);\n  };\n\n  /**\n   * ### .isFalse(value, [message])\n   *\n   * Asserts that `value` is false.\n   *\n   *     var teaServed = false;\n   *     assert.isFalse(teaServed, 'no tea yet? hmm...');\n   *\n   * @name isFalse\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isFalse = function (val, msg) {\n    new Assertion(val, msg).is['false'];\n  };\n\n  /**\n   * ### .isNotFalse(value, [message])\n   *\n   * Asserts that `value` is not false.\n   *\n   *     var tea = 'tasty chai';\n   *     assert.isNotFalse(tea, 'great, time for tea!');\n   *\n   * @name isNotFalse\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotFalse = function (val, msg) {\n    new Assertion(val, msg).to.not.equal(false);\n  };\n\n  /**\n   * ### .isNull(value, [message])\n   *\n   * Asserts that `value` is null.\n   *\n   *     assert.isNull(err, 'there was no error');\n   *\n   * @name isNull\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNull = function (val, msg) {\n    new Assertion(val, msg).to.equal(null);\n  };\n\n  /**\n   * ### .isNotNull(value, [message])\n   *\n   * Asserts that `value` is not null.\n   *\n   *     var tea = 'tasty chai';\n   *     assert.isNotNull(tea, 'great, time for tea!');\n   *\n   * @name isNotNull\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotNull = function (val, msg) {\n    new Assertion(val, msg).to.not.equal(null);\n  };\n\n  /**\n   * ### .isNaN\n   * Asserts that value is NaN\n   *\n   *    assert.isNaN('foo', 'foo is NaN');\n   *\n   * @name isNaN\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNaN = function (val, msg) {\n    new Assertion(val, msg).to.be.NaN;\n  };\n\n  /**\n   * ### .isNotNaN\n   * Asserts that value is not NaN\n   *\n   *    assert.isNotNaN(4, '4 is not NaN');\n   *\n   * @name isNotNaN\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n  assert.isNotNaN = function (val, msg) {\n    new Assertion(val, msg).not.to.be.NaN;\n  };\n\n  /**\n   * ### .isUndefined(value, [message])\n   *\n   * Asserts that `value` is `undefined`.\n   *\n   *     var tea;\n   *     assert.isUndefined(tea, 'no tea defined');\n   *\n   * @name isUndefined\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isUndefined = function (val, msg) {\n    new Assertion(val, msg).to.equal(undefined);\n  };\n\n  /**\n   * ### .isDefined(value, [message])\n   *\n   * Asserts that `value` is not `undefined`.\n   *\n   *     var tea = 'cup of chai';\n   *     assert.isDefined(tea, 'tea has been defined');\n   *\n   * @name isDefined\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isDefined = function (val, msg) {\n    new Assertion(val, msg).to.not.equal(undefined);\n  };\n\n  /**\n   * ### .isFunction(value, [message])\n   *\n   * Asserts that `value` is a function.\n   *\n   *     function serveTea() { return 'cup of tea'; };\n   *     assert.isFunction(serveTea, 'great, we can have tea now');\n   *\n   * @name isFunction\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isFunction = function (val, msg) {\n    new Assertion(val, msg).to.be.a('function');\n  };\n\n  /**\n   * ### .isNotFunction(value, [message])\n   *\n   * Asserts that `value` is _not_ a function.\n   *\n   *     var serveTea = [ 'heat', 'pour', 'sip' ];\n   *     assert.isNotFunction(serveTea, 'great, we have listed the steps');\n   *\n   * @name isNotFunction\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotFunction = function (val, msg) {\n    new Assertion(val, msg).to.not.be.a('function');\n  };\n\n  /**\n   * ### .isObject(value, [message])\n   *\n   * Asserts that `value` is an object of type 'Object' (as revealed by `Object.prototype.toString`).\n   * _The assertion does not match subclassed objects._\n   *\n   *     var selection = { name: 'Chai', serve: 'with spices' };\n   *     assert.isObject(selection, 'tea selection is an object');\n   *\n   * @name isObject\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isObject = function (val, msg) {\n    new Assertion(val, msg).to.be.a('object');\n  };\n\n  /**\n   * ### .isNotObject(value, [message])\n   *\n   * Asserts that `value` is _not_ an object of type 'Object' (as revealed by `Object.prototype.toString`).\n   *\n   *     var selection = 'chai'\n   *     assert.isNotObject(selection, 'tea selection is not an object');\n   *     assert.isNotObject(null, 'null is not an object');\n   *\n   * @name isNotObject\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotObject = function (val, msg) {\n    new Assertion(val, msg).to.not.be.a('object');\n  };\n\n  /**\n   * ### .isArray(value, [message])\n   *\n   * Asserts that `value` is an array.\n   *\n   *     var menu = [ 'green', 'chai', 'oolong' ];\n   *     assert.isArray(menu, 'what kind of tea do we want?');\n   *\n   * @name isArray\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isArray = function (val, msg) {\n    new Assertion(val, msg).to.be.an('array');\n  };\n\n  /**\n   * ### .isNotArray(value, [message])\n   *\n   * Asserts that `value` is _not_ an array.\n   *\n   *     var menu = 'green|chai|oolong';\n   *     assert.isNotArray(menu, 'what kind of tea do we want?');\n   *\n   * @name isNotArray\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotArray = function (val, msg) {\n    new Assertion(val, msg).to.not.be.an('array');\n  };\n\n  /**\n   * ### .isString(value, [message])\n   *\n   * Asserts that `value` is a string.\n   *\n   *     var teaOrder = 'chai';\n   *     assert.isString(teaOrder, 'order placed');\n   *\n   * @name isString\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isString = function (val, msg) {\n    new Assertion(val, msg).to.be.a('string');\n  };\n\n  /**\n   * ### .isNotString(value, [message])\n   *\n   * Asserts that `value` is _not_ a string.\n   *\n   *     var teaOrder = 4;\n   *     assert.isNotString(teaOrder, 'order placed');\n   *\n   * @name isNotString\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotString = function (val, msg) {\n    new Assertion(val, msg).to.not.be.a('string');\n  };\n\n  /**\n   * ### .isNumber(value, [message])\n   *\n   * Asserts that `value` is a number.\n   *\n   *     var cups = 2;\n   *     assert.isNumber(cups, 'how many cups');\n   *\n   * @name isNumber\n   * @param {Number} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNumber = function (val, msg) {\n    new Assertion(val, msg).to.be.a('number');\n  };\n\n  /**\n   * ### .isNotNumber(value, [message])\n   *\n   * Asserts that `value` is _not_ a number.\n   *\n   *     var cups = '2 cups please';\n   *     assert.isNotNumber(cups, 'how many cups');\n   *\n   * @name isNotNumber\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotNumber = function (val, msg) {\n    new Assertion(val, msg).to.not.be.a('number');\n  };\n\n  /**\n   * ### .isBoolean(value, [message])\n   *\n   * Asserts that `value` is a boolean.\n   *\n   *     var teaReady = true\n   *       , teaServed = false;\n   *\n   *     assert.isBoolean(teaReady, 'is the tea ready');\n   *     assert.isBoolean(teaServed, 'has tea been served');\n   *\n   * @name isBoolean\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isBoolean = function (val, msg) {\n    new Assertion(val, msg).to.be.a('boolean');\n  };\n\n  /**\n   * ### .isNotBoolean(value, [message])\n   *\n   * Asserts that `value` is _not_ a boolean.\n   *\n   *     var teaReady = 'yep'\n   *       , teaServed = 'nope';\n   *\n   *     assert.isNotBoolean(teaReady, 'is the tea ready');\n   *     assert.isNotBoolean(teaServed, 'has tea been served');\n   *\n   * @name isNotBoolean\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotBoolean = function (val, msg) {\n    new Assertion(val, msg).to.not.be.a('boolean');\n  };\n\n  /**\n   * ### .typeOf(value, name, [message])\n   *\n   * Asserts that `value`'s type is `name`, as determined by\n   * `Object.prototype.toString`.\n   *\n   *     assert.typeOf({ tea: 'chai' }, 'object', 'we have an object');\n   *     assert.typeOf(['chai', 'jasmine'], 'array', 'we have an array');\n   *     assert.typeOf('tea', 'string', 'we have a string');\n   *     assert.typeOf(/tea/, 'regexp', 'we have a regular expression');\n   *     assert.typeOf(null, 'null', 'we have a null');\n   *     assert.typeOf(undefined, 'undefined', 'we have an undefined');\n   *\n   * @name typeOf\n   * @param {Mixed} value\n   * @param {String} name\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.typeOf = function (val, type, msg) {\n    new Assertion(val, msg).to.be.a(type);\n  };\n\n  /**\n   * ### .notTypeOf(value, name, [message])\n   *\n   * Asserts that `value`'s type is _not_ `name`, as determined by\n   * `Object.prototype.toString`.\n   *\n   *     assert.notTypeOf('tea', 'number', 'strings are not numbers');\n   *\n   * @name notTypeOf\n   * @param {Mixed} value\n   * @param {String} typeof name\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notTypeOf = function (val, type, msg) {\n    new Assertion(val, msg).to.not.be.a(type);\n  };\n\n  /**\n   * ### .instanceOf(object, constructor, [message])\n   *\n   * Asserts that `value` is an instance of `constructor`.\n   *\n   *     var Tea = function (name) { this.name = name; }\n   *       , chai = new Tea('chai');\n   *\n   *     assert.instanceOf(chai, Tea, 'chai is an instance of tea');\n   *\n   * @name instanceOf\n   * @param {Object} object\n   * @param {Constructor} constructor\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.instanceOf = function (val, type, msg) {\n    new Assertion(val, msg).to.be.instanceOf(type);\n  };\n\n  /**\n   * ### .notInstanceOf(object, constructor, [message])\n   *\n   * Asserts `value` is not an instance of `constructor`.\n   *\n   *     var Tea = function (name) { this.name = name; }\n   *       , chai = new String('chai');\n   *\n   *     assert.notInstanceOf(chai, Tea, 'chai is not an instance of tea');\n   *\n   * @name notInstanceOf\n   * @param {Object} object\n   * @param {Constructor} constructor\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notInstanceOf = function (val, type, msg) {\n    new Assertion(val, msg).to.not.be.instanceOf(type);\n  };\n\n  /**\n   * ### .include(haystack, needle, [message])\n   *\n   * Asserts that `haystack` includes `needle`. Works\n   * for strings and arrays.\n   *\n   *     assert.include('foobar', 'bar', 'foobar contains string \"bar\"');\n   *     assert.include([ 1, 2, 3 ], 3, 'array contains value');\n   *\n   * @name include\n   * @param {Array|String} haystack\n   * @param {Mixed} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.include = function (exp, inc, msg) {\n    new Assertion(exp, msg, assert.include).include(inc);\n  };\n\n  /**\n   * ### .notInclude(haystack, needle, [message])\n   *\n   * Asserts that `haystack` does not include `needle`. Works\n   * for strings and arrays.\n   *\n   *     assert.notInclude('foobar', 'baz', 'string not include substring');\n   *     assert.notInclude([ 1, 2, 3 ], 4, 'array not include contain value');\n   *\n   * @name notInclude\n   * @param {Array|String} haystack\n   * @param {Mixed} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notInclude = function (exp, inc, msg) {\n    new Assertion(exp, msg, assert.notInclude).not.include(inc);\n  };\n\n  /**\n   * ### .match(value, regexp, [message])\n   *\n   * Asserts that `value` matches the regular expression `regexp`.\n   *\n   *     assert.match('foobar', /^foo/, 'regexp matches');\n   *\n   * @name match\n   * @param {Mixed} value\n   * @param {RegExp} regexp\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.match = function (exp, re, msg) {\n    new Assertion(exp, msg).to.match(re);\n  };\n\n  /**\n   * ### .notMatch(value, regexp, [message])\n   *\n   * Asserts that `value` does not match the regular expression `regexp`.\n   *\n   *     assert.notMatch('foobar', /^foo/, 'regexp does not match');\n   *\n   * @name notMatch\n   * @param {Mixed} value\n   * @param {RegExp} regexp\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notMatch = function (exp, re, msg) {\n    new Assertion(exp, msg).to.not.match(re);\n  };\n\n  /**\n   * ### .property(object, property, [message])\n   *\n   * Asserts that `object` has a property named by `property`.\n   *\n   *     assert.property({ tea: { green: 'matcha' }}, 'tea');\n   *\n   * @name property\n   * @param {Object} object\n   * @param {String} property\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.property = function (obj, prop, msg) {\n    new Assertion(obj, msg).to.have.property(prop);\n  };\n\n  /**\n   * ### .notProperty(object, property, [message])\n   *\n   * Asserts that `object` does _not_ have a property named by `property`.\n   *\n   *     assert.notProperty({ tea: { green: 'matcha' }}, 'coffee');\n   *\n   * @name notProperty\n   * @param {Object} object\n   * @param {String} property\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notProperty = function (obj, prop, msg) {\n    new Assertion(obj, msg).to.not.have.property(prop);\n  };\n\n  /**\n   * ### .deepProperty(object, property, [message])\n   *\n   * Asserts that `object` has a property named by `property`, which can be a\n   * string using dot- and bracket-notation for deep reference.\n   *\n   *     assert.deepProperty({ tea: { green: 'matcha' }}, 'tea.green');\n   *\n   * @name deepProperty\n   * @param {Object} object\n   * @param {String} property\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.deepProperty = function (obj, prop, msg) {\n    new Assertion(obj, msg).to.have.deep.property(prop);\n  };\n\n  /**\n   * ### .notDeepProperty(object, property, [message])\n   *\n   * Asserts that `object` does _not_ have a property named by `property`, which\n   * can be a string using dot- and bracket-notation for deep reference.\n   *\n   *     assert.notDeepProperty({ tea: { green: 'matcha' }}, 'tea.oolong');\n   *\n   * @name notDeepProperty\n   * @param {Object} object\n   * @param {String} property\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notDeepProperty = function (obj, prop, msg) {\n    new Assertion(obj, msg).to.not.have.deep.property(prop);\n  };\n\n  /**\n   * ### .propertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` has a property named by `property` with value given\n   * by `value`.\n   *\n   *     assert.propertyVal({ tea: 'is good' }, 'tea', 'is good');\n   *\n   * @name propertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.propertyVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg).to.have.property(prop, val);\n  };\n\n  /**\n   * ### .propertyNotVal(object, property, value, [message])\n   *\n   * Asserts that `object` has a property named by `property`, but with a value\n   * different from that given by `value`.\n   *\n   *     assert.propertyNotVal({ tea: 'is good' }, 'tea', 'is bad');\n   *\n   * @name propertyNotVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.propertyNotVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg).to.not.have.property(prop, val);\n  };\n\n  /**\n   * ### .deepPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` has a property named by `property` with value given\n   * by `value`. `property` can use dot- and bracket-notation for deep\n   * reference.\n   *\n   *     assert.deepPropertyVal({ tea: { green: 'matcha' }}, 'tea.green', 'matcha');\n   *\n   * @name deepPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.deepPropertyVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg).to.have.deep.property(prop, val);\n  };\n\n  /**\n   * ### .deepPropertyNotVal(object, property, value, [message])\n   *\n   * Asserts that `object` has a property named by `property`, but with a value\n   * different from that given by `value`. `property` can use dot- and\n   * bracket-notation for deep reference.\n   *\n   *     assert.deepPropertyNotVal({ tea: { green: 'matcha' }}, 'tea.green', 'konacha');\n   *\n   * @name deepPropertyNotVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.deepPropertyNotVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg).to.not.have.deep.property(prop, val);\n  };\n\n  /**\n   * ### .lengthOf(object, length, [message])\n   *\n   * Asserts that `object` has a `length` property with the expected value.\n   *\n   *     assert.lengthOf([1,2,3], 3, 'array has length of 3');\n   *     assert.lengthOf('foobar', 6, 'string has length of 6');\n   *\n   * @name lengthOf\n   * @param {Mixed} object\n   * @param {Number} length\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.lengthOf = function (exp, len, msg) {\n    new Assertion(exp, msg).to.have.length(len);\n  };\n\n  /**\n   * ### .throws(function, [constructor/string/regexp], [string/regexp], [message])\n   *\n   * Asserts that `function` will throw an error that is an instance of\n   * `constructor`, or alternately that it will throw an error with message\n   * matching `regexp`.\n   *\n   *     assert.throws(fn, 'function throws a reference error');\n   *     assert.throws(fn, /function throws a reference error/);\n   *     assert.throws(fn, ReferenceError);\n   *     assert.throws(fn, ReferenceError, 'function throws a reference error');\n   *     assert.throws(fn, ReferenceError, /function throws a reference error/);\n   *\n   * @name throws\n   * @alias throw\n   * @alias Throw\n   * @param {Function} function\n   * @param {ErrorConstructor} constructor\n   * @param {RegExp} regexp\n   * @param {String} message\n   * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.throws = function (fn, errt, errs, msg) {\n    if ('string' === typeof errt || errt instanceof RegExp) {\n      errs = errt;\n      errt = null;\n    }\n\n    var assertErr = new Assertion(fn, msg).to.throw(errt, errs);\n    return flag(assertErr, 'object');\n  };\n\n  /**\n   * ### .doesNotThrow(function, [constructor/regexp], [message])\n   *\n   * Asserts that `function` will _not_ throw an error that is an instance of\n   * `constructor`, or alternately that it will not throw an error with message\n   * matching `regexp`.\n   *\n   *     assert.doesNotThrow(fn, Error, 'function does not throw');\n   *\n   * @name doesNotThrow\n   * @param {Function} function\n   * @param {ErrorConstructor} constructor\n   * @param {RegExp} regexp\n   * @param {String} message\n   * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotThrow = function (fn, type, msg) {\n    if ('string' === typeof type) {\n      msg = type;\n      type = null;\n    }\n\n    new Assertion(fn, msg).to.not.Throw(type);\n  };\n\n  /**\n   * ### .operator(val1, operator, val2, [message])\n   *\n   * Compares two values using `operator`.\n   *\n   *     assert.operator(1, '<', 2, 'everything is ok');\n   *     assert.operator(1, '>', 2, 'this will fail');\n   *\n   * @name operator\n   * @param {Mixed} val1\n   * @param {String} operator\n   * @param {Mixed} val2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.operator = function (val, operator, val2, msg) {\n    var ok;\n    switch(operator) {\n      case '==':\n        ok = val == val2;\n        break;\n      case '===':\n        ok = val === val2;\n        break;\n      case '>':\n        ok = val > val2;\n        break;\n      case '>=':\n        ok = val >= val2;\n        break;\n      case '<':\n        ok = val < val2;\n        break;\n      case '<=':\n        ok = val <= val2;\n        break;\n      case '!=':\n        ok = val != val2;\n        break;\n      case '!==':\n        ok = val !== val2;\n        break;\n      default:\n        throw new Error('Invalid operator \"' + operator + '\"');\n    }\n    var test = new Assertion(ok, msg);\n    test.assert(\n        true === flag(test, 'object')\n      , 'expected ' + util.inspect(val) + ' to be ' + operator + ' ' + util.inspect(val2)\n      , 'expected ' + util.inspect(val) + ' to not be ' + operator + ' ' + util.inspect(val2) );\n  };\n\n  /**\n   * ### .closeTo(actual, expected, delta, [message])\n   *\n   * Asserts that the target is equal `expected`, to within a +/- `delta` range.\n   *\n   *     assert.closeTo(1.5, 1, 0.5, 'numbers are close');\n   *\n   * @name closeTo\n   * @param {Number} actual\n   * @param {Number} expected\n   * @param {Number} delta\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.closeTo = function (act, exp, delta, msg) {\n    new Assertion(act, msg).to.be.closeTo(exp, delta);\n  };\n\n  /**\n   * ### .approximately(actual, expected, delta, [message])\n   *\n   * Asserts that the target is equal `expected`, to within a +/- `delta` range.\n   *\n   *     assert.approximately(1.5, 1, 0.5, 'numbers are close');\n   *\n   * @name approximately\n   * @param {Number} actual\n   * @param {Number} expected\n   * @param {Number} delta\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.approximately = function (act, exp, delta, msg) {\n    new Assertion(act, msg).to.be.approximately(exp, delta);\n  };\n\n  /**\n   * ### .sameMembers(set1, set2, [message])\n   *\n   * Asserts that `set1` and `set2` have the same members.\n   * Order is not taken into account.\n   *\n   *     assert.sameMembers([ 1, 2, 3 ], [ 2, 1, 3 ], 'same members');\n   *\n   * @name sameMembers\n   * @param {Array} set1\n   * @param {Array} set2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.sameMembers = function (set1, set2, msg) {\n    new Assertion(set1, msg).to.have.same.members(set2);\n  }\n\n  /**\n   * ### .sameDeepMembers(set1, set2, [message])\n   *\n   * Asserts that `set1` and `set2` have the same members - using a deep equality checking.\n   * Order is not taken into account.\n   *\n   *     assert.sameDeepMembers([ {b: 3}, {a: 2}, {c: 5} ], [ {c: 5}, {b: 3}, {a: 2} ], 'same deep members');\n   *\n   * @name sameDeepMembers\n   * @param {Array} set1\n   * @param {Array} set2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.sameDeepMembers = function (set1, set2, msg) {\n    new Assertion(set1, msg).to.have.same.deep.members(set2);\n  }\n\n  /**\n   * ### .includeMembers(superset, subset, [message])\n   *\n   * Asserts that `subset` is included in `superset`.\n   * Order is not taken into account.\n   *\n   *     assert.includeMembers([ 1, 2, 3 ], [ 2, 1 ], 'include members');\n   *\n   * @name includeMembers\n   * @param {Array} superset\n   * @param {Array} subset\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.includeMembers = function (superset, subset, msg) {\n    new Assertion(superset, msg).to.include.members(subset);\n  }\n\n  /**\n   * ### .includeDeepMembers(superset, subset, [message])\n   *\n   * Asserts that `subset` is included in `superset` - using deep equality checking.\n   * Order is not taken into account.\n   * Duplicates are ignored.\n   *\n   *     assert.includeDeepMembers([ {a: 1}, {b: 2}, {c: 3} ], [ {b: 2}, {a: 1}, {b: 2} ], 'include deep members');\n   *\n   * @name includeDeepMembers\n   * @param {Array} superset\n   * @param {Array} subset\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.includeDeepMembers = function (superset, subset, msg) {\n    new Assertion(superset, msg).to.include.deep.members(subset);\n  }\n\n  /**\n   * ### .oneOf(inList, list, [message])\n   *\n   * Asserts that non-object, non-array value `inList` appears in the flat array `list`.\n   *\n   *     assert.oneOf(1, [ 2, 1 ], 'Not found in list');\n   *\n   * @name oneOf\n   * @param {*} inList\n   * @param {Array<*>} list\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.oneOf = function (inList, list, msg) {\n    new Assertion(inList, msg).to.be.oneOf(list);\n  }\n\n   /**\n   * ### .changes(function, object, property)\n   *\n   * Asserts that a function changes the value of a property\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 22 };\n   *     assert.changes(fn, obj, 'val');\n   *\n   * @name changes\n   * @param {Function} modifier function\n   * @param {Object} object\n   * @param {String} property name\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.changes = function (fn, obj, prop) {\n    new Assertion(fn).to.change(obj, prop);\n  }\n\n   /**\n   * ### .doesNotChange(function, object, property)\n   *\n   * Asserts that a function does not changes the value of a property\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { console.log('foo'); };\n   *     assert.doesNotChange(fn, obj, 'val');\n   *\n   * @name doesNotChange\n   * @param {Function} modifier function\n   * @param {Object} object\n   * @param {String} property name\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotChange = function (fn, obj, prop) {\n    new Assertion(fn).to.not.change(obj, prop);\n  }\n\n   /**\n   * ### .increases(function, object, property)\n   *\n   * Asserts that a function increases an object property\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 13 };\n   *     assert.increases(fn, obj, 'val');\n   *\n   * @name increases\n   * @param {Function} modifier function\n   * @param {Object} object\n   * @param {String} property name\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.increases = function (fn, obj, prop) {\n    new Assertion(fn).to.increase(obj, prop);\n  }\n\n   /**\n   * ### .doesNotIncrease(function, object, property)\n   *\n   * Asserts that a function does not increase object property\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 8 };\n   *     assert.doesNotIncrease(fn, obj, 'val');\n   *\n   * @name doesNotIncrease\n   * @param {Function} modifier function\n   * @param {Object} object\n   * @param {String} property name\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotIncrease = function (fn, obj, prop) {\n    new Assertion(fn).to.not.increase(obj, prop);\n  }\n\n   /**\n   * ### .decreases(function, object, property)\n   *\n   * Asserts that a function decreases an object property\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 5 };\n   *     assert.decreases(fn, obj, 'val');\n   *\n   * @name decreases\n   * @param {Function} modifier function\n   * @param {Object} object\n   * @param {String} property name\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.decreases = function (fn, obj, prop) {\n    new Assertion(fn).to.decrease(obj, prop);\n  }\n\n   /**\n   * ### .doesNotDecrease(function, object, property)\n   *\n   * Asserts that a function does not decreases an object property\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 15 };\n   *     assert.doesNotDecrease(fn, obj, 'val');\n   *\n   * @name doesNotDecrease\n   * @param {Function} modifier function\n   * @param {Object} object\n   * @param {String} property name\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotDecrease = function (fn, obj, prop) {\n    new Assertion(fn).to.not.decrease(obj, prop);\n  }\n\n  /*!\n   * ### .ifError(object)\n   *\n   * Asserts if value is not a false value, and throws if it is a true value.\n   * This is added to allow for chai to be a drop-in replacement for Node's\n   * assert class.\n   *\n   *     var err = new Error('I am a custom error');\n   *     assert.ifError(err); // Rethrows err!\n   *\n   * @name ifError\n   * @param {Object} object\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.ifError = function (val) {\n    if (val) {\n      throw(val);\n    }\n  };\n\n  /**\n   * ### .isExtensible(object)\n   *\n   * Asserts that `object` is extensible (can have new properties added to it).\n   *\n   *     assert.isExtensible({});\n   *\n   * @name isExtensible\n   * @alias extensible\n   * @param {Object} object\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isExtensible = function (obj, msg) {\n    new Assertion(obj, msg).to.be.extensible;\n  };\n\n  /**\n   * ### .isNotExtensible(object)\n   *\n   * Asserts that `object` is _not_ extensible.\n   *\n   *     var nonExtensibleObject = Object.preventExtensions({});\n   *     var sealedObject = Object.seal({});\n   *     var frozenObject = Object.freese({});\n   *\n   *     assert.isNotExtensible(nonExtensibleObject);\n   *     assert.isNotExtensible(sealedObject);\n   *     assert.isNotExtensible(frozenObject);\n   *\n   * @name isNotExtensible\n   * @alias notExtensible\n   * @param {Object} object\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotExtensible = function (obj, msg) {\n    new Assertion(obj, msg).to.not.be.extensible;\n  };\n\n  /**\n   * ### .isSealed(object)\n   *\n   * Asserts that `object` is sealed (cannot have new properties added to it\n   * and its existing properties cannot be removed).\n   *\n   *     var sealedObject = Object.seal({});\n   *     var frozenObject = Object.seal({});\n   *\n   *     assert.isSealed(sealedObject);\n   *     assert.isSealed(frozenObject);\n   *\n   * @name isSealed\n   * @alias sealed\n   * @param {Object} object\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isSealed = function (obj, msg) {\n    new Assertion(obj, msg).to.be.sealed;\n  };\n\n  /**\n   * ### .isNotSealed(object)\n   *\n   * Asserts that `object` is _not_ sealed.\n   *\n   *     assert.isNotSealed({});\n   *\n   * @name isNotSealed\n   * @alias notSealed\n   * @param {Object} object\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotSealed = function (obj, msg) {\n    new Assertion(obj, msg).to.not.be.sealed;\n  };\n\n  /**\n   * ### .isFrozen(object)\n   *\n   * Asserts that `object` is frozen (cannot have new properties added to it\n   * and its existing properties cannot be modified).\n   *\n   *     var frozenObject = Object.freeze({});\n   *     assert.frozen(frozenObject);\n   *\n   * @name isFrozen\n   * @alias frozen\n   * @param {Object} object\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isFrozen = function (obj, msg) {\n    new Assertion(obj, msg).to.be.frozen;\n  };\n\n  /**\n   * ### .isNotFrozen(object)\n   *\n   * Asserts that `object` is _not_ frozen.\n   *\n   *     assert.isNotFrozen({});\n   *\n   * @name isNotFrozen\n   * @alias notFrozen\n   * @param {Object} object\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotFrozen = function (obj, msg) {\n    new Assertion(obj, msg).to.not.be.frozen;\n  };\n\n  /*!\n   * Aliases.\n   */\n\n  (function alias(name, as){\n    assert[as] = assert[name];\n    return alias;\n  })\n  ('isOk', 'ok')\n  ('isNotOk', 'notOk')\n  ('throws', 'throw')\n  ('throws', 'Throw')\n  ('isExtensible', 'extensible')\n  ('isNotExtensible', 'notExtensible')\n  ('isSealed', 'sealed')\n  ('isNotSealed', 'notSealed')\n  ('isFrozen', 'frozen')\n  ('isNotFrozen', 'notFrozen');\n};\n\n\n/***/ },\n\n/***/ 353:\n/***/ function(module, exports) {\n\n/*!\n * chai\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nmodule.exports = function (chai, util) {\n  chai.expect = function (val, message) {\n    return new chai.Assertion(val, message);\n  };\n\n  /**\n   * ### .fail(actual, expected, [message], [operator])\n   *\n   * Throw a failure.\n   *\n   * @name fail\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @param {String} operator\n   * @namespace Expect\n   * @api public\n   */\n\n  chai.expect.fail = function (actual, expected, message, operator) {\n    message = message || 'expect.fail()';\n    throw new chai.AssertionError(message, {\n        actual: actual\n      , expected: expected\n      , operator: operator\n    }, chai.expect.fail);\n  };\n};\n\n\n/***/ },\n\n/***/ 354:\n/***/ function(module, exports) {\n\n/*!\n * chai\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nmodule.exports = function (chai, util) {\n  var Assertion = chai.Assertion;\n\n  function loadShould () {\n    // explicitly define this method as function as to have it's name to include as `ssfi`\n    function shouldGetter() {\n      if (this instanceof String || this instanceof Number || this instanceof Boolean ) {\n        return new Assertion(this.valueOf(), null, shouldGetter);\n      }\n      return new Assertion(this, null, shouldGetter);\n    }\n    function shouldSetter(value) {\n      // See https://github.com/chaijs/chai/issues/86: this makes\n      // `whatever.should = someValue` actually set `someValue`, which is\n      // especially useful for `global.should = require('chai').should()`.\n      //\n      // Note that we have to use [[DefineProperty]] instead of [[Put]]\n      // since otherwise we would trigger this very setter!\n      Object.defineProperty(this, 'should', {\n        value: value,\n        enumerable: true,\n        configurable: true,\n        writable: true\n      });\n    }\n    // modify Object.prototype to have `should`\n    Object.defineProperty(Object.prototype, 'should', {\n      set: shouldSetter\n      , get: shouldGetter\n      , configurable: true\n    });\n\n    var should = {};\n\n    /**\n     * ### .fail(actual, expected, [message], [operator])\n     *\n     * Throw a failure.\n     *\n     * @name fail\n     * @param {Mixed} actual\n     * @param {Mixed} expected\n     * @param {String} message\n     * @param {String} operator\n     * @namespace Should\n     * @api public\n     */\n\n    should.fail = function (actual, expected, message, operator) {\n      message = message || 'should.fail()';\n      throw new chai.AssertionError(message, {\n          actual: actual\n        , expected: expected\n        , operator: operator\n      }, should.fail);\n    };\n\n    /**\n     * ### .equal(actual, expected, [message])\n     *\n     * Asserts non-strict equality (`==`) of `actual` and `expected`.\n     *\n     *     should.equal(3, '3', '== coerces values to strings');\n     *\n     * @name equal\n     * @param {Mixed} actual\n     * @param {Mixed} expected\n     * @param {String} message\n     * @namespace Should\n     * @api public\n     */\n\n    should.equal = function (val1, val2, msg) {\n      new Assertion(val1, msg).to.equal(val2);\n    };\n\n    /**\n     * ### .throw(function, [constructor/string/regexp], [string/regexp], [message])\n     *\n     * Asserts that `function` will throw an error that is an instance of\n     * `constructor`, or alternately that it will throw an error with message\n     * matching `regexp`.\n     *\n     *     should.throw(fn, 'function throws a reference error');\n     *     should.throw(fn, /function throws a reference error/);\n     *     should.throw(fn, ReferenceError);\n     *     should.throw(fn, ReferenceError, 'function throws a reference error');\n     *     should.throw(fn, ReferenceError, /function throws a reference error/);\n     *\n     * @name throw\n     * @alias Throw\n     * @param {Function} function\n     * @param {ErrorConstructor} constructor\n     * @param {RegExp} regexp\n     * @param {String} message\n     * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\n     * @namespace Should\n     * @api public\n     */\n\n    should.Throw = function (fn, errt, errs, msg) {\n      new Assertion(fn, msg).to.Throw(errt, errs);\n    };\n\n    /**\n     * ### .exist\n     *\n     * Asserts that the target is neither `null` nor `undefined`.\n     *\n     *     var foo = 'hi';\n     *\n     *     should.exist(foo, 'foo exists');\n     *\n     * @name exist\n     * @namespace Should\n     * @api public\n     */\n\n    should.exist = function (val, msg) {\n      new Assertion(val, msg).to.exist;\n    }\n\n    // negation\n    should.not = {}\n\n    /**\n     * ### .not.equal(actual, expected, [message])\n     *\n     * Asserts non-strict inequality (`!=`) of `actual` and `expected`.\n     *\n     *     should.not.equal(3, 4, 'these numbers are not equal');\n     *\n     * @name not.equal\n     * @param {Mixed} actual\n     * @param {Mixed} expected\n     * @param {String} message\n     * @namespace Should\n     * @api public\n     */\n\n    should.not.equal = function (val1, val2, msg) {\n      new Assertion(val1, msg).to.not.equal(val2);\n    };\n\n    /**\n     * ### .throw(function, [constructor/regexp], [message])\n     *\n     * Asserts that `function` will _not_ throw an error that is an instance of\n     * `constructor`, or alternately that it will not throw an error with message\n     * matching `regexp`.\n     *\n     *     should.not.throw(fn, Error, 'function does not throw');\n     *\n     * @name not.throw\n     * @alias not.Throw\n     * @param {Function} function\n     * @param {ErrorConstructor} constructor\n     * @param {RegExp} regexp\n     * @param {String} message\n     * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\n     * @namespace Should\n     * @api public\n     */\n\n    should.not.Throw = function (fn, errt, errs, msg) {\n      new Assertion(fn, msg).to.not.Throw(errt, errs);\n    };\n\n    /**\n     * ### .not.exist\n     *\n     * Asserts that the target is neither `null` nor `undefined`.\n     *\n     *     var bar = null;\n     *\n     *     should.not.exist(bar, 'bar does not exist');\n     *\n     * @name not.exist\n     * @namespace Should\n     * @api public\n     */\n\n    should.not.exist = function (val, msg) {\n      new Assertion(val, msg).to.not.exist;\n    }\n\n    should['throw'] = should['Throw'];\n    should.not['throw'] = should.not['Throw'];\n\n    return should;\n  };\n\n  chai.should = loadShould;\n  chai.Should = loadShould;\n};\n\n\n/***/ },\n\n/***/ 355:\n/***/ function(module, exports, __webpack_require__) {\n\n/*!\n * Chai - addChainingMethod utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Module dependencies\n */\n\nvar transferFlags = __webpack_require__(147);\nvar flag = __webpack_require__(48);\nvar config = __webpack_require__(59);\n\n/*!\n * Module variables\n */\n\n// Check whether `__proto__` is supported\nvar hasProtoSupport = '__proto__' in Object;\n\n// Without `__proto__` support, this module will need to add properties to a function.\n// However, some Function.prototype methods cannot be overwritten,\n// and there seems no easy cross-platform way to detect them (@see chaijs/chai/issues/69).\nvar excludeNames = /^(?:length|name|arguments|caller)$/;\n\n// Cache `Function` properties\nvar call  = Function.prototype.call,\n    apply = Function.prototype.apply;\n\n/**\n * ### addChainableMethod (ctx, name, method, chainingBehavior)\n *\n * Adds a method to an object, such that the method can also be chained.\n *\n *     utils.addChainableMethod(chai.Assertion.prototype, 'foo', function (str) {\n *       var obj = utils.flag(this, 'object');\n *       new chai.Assertion(obj).to.be.equal(str);\n *     });\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.addChainableMethod('foo', fn, chainingBehavior);\n *\n * The result can then be used as both a method assertion, executing both `method` and\n * `chainingBehavior`, or as a language chain, which only executes `chainingBehavior`.\n *\n *     expect(fooStr).to.be.foo('bar');\n *     expect(fooStr).to.be.foo.equal('foo');\n *\n * @param {Object} ctx object to which the method is added\n * @param {String} name of method to add\n * @param {Function} method function to be used for `name`, when called\n * @param {Function} chainingBehavior function to be called every time the property is accessed\n * @namespace Utils\n * @name addChainableMethod\n * @api public\n */\n\nmodule.exports = function (ctx, name, method, chainingBehavior) {\n  if (typeof chainingBehavior !== 'function') {\n    chainingBehavior = function () { };\n  }\n\n  var chainableBehavior = {\n      method: method\n    , chainingBehavior: chainingBehavior\n  };\n\n  // save the methods so we can overwrite them later, if we need to.\n  if (!ctx.__methods) {\n    ctx.__methods = {};\n  }\n  ctx.__methods[name] = chainableBehavior;\n\n  Object.defineProperty(ctx, name,\n    { get: function () {\n        chainableBehavior.chainingBehavior.call(this);\n\n        var assert = function assert() {\n          var old_ssfi = flag(this, 'ssfi');\n          if (old_ssfi && config.includeStack === false)\n            flag(this, 'ssfi', assert);\n          var result = chainableBehavior.method.apply(this, arguments);\n          return result === undefined ? this : result;\n        };\n\n        // Use `__proto__` if available\n        if (hasProtoSupport) {\n          // Inherit all properties from the object by replacing the `Function` prototype\n          var prototype = assert.__proto__ = Object.create(this);\n          // Restore the `call` and `apply` methods from `Function`\n          prototype.call = call;\n          prototype.apply = apply;\n        }\n        // Otherwise, redefine all properties (slow!)\n        else {\n          var asserterNames = Object.getOwnPropertyNames(ctx);\n          asserterNames.forEach(function (asserterName) {\n            if (!excludeNames.test(asserterName)) {\n              var pd = Object.getOwnPropertyDescriptor(ctx, asserterName);\n              Object.defineProperty(assert, asserterName, pd);\n            }\n          });\n        }\n\n        transferFlags(this, assert);\n        return assert;\n      }\n    , configurable: true\n  });\n};\n\n\n/***/ },\n\n/***/ 356:\n/***/ function(module, exports, __webpack_require__) {\n\n/*!\n * Chai - addMethod utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar config = __webpack_require__(59);\n\n/**\n * ### .addMethod (ctx, name, method)\n *\n * Adds a method to the prototype of an object.\n *\n *     utils.addMethod(chai.Assertion.prototype, 'foo', function (str) {\n *       var obj = utils.flag(this, 'object');\n *       new chai.Assertion(obj).to.be.equal(str);\n *     });\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.addMethod('foo', fn);\n *\n * Then can be used as any other assertion.\n *\n *     expect(fooStr).to.be.foo('bar');\n *\n * @param {Object} ctx object to which the method is added\n * @param {String} name of method to add\n * @param {Function} method function to be used for name\n * @namespace Utils\n * @name addMethod\n * @api public\n */\nvar flag = __webpack_require__(48);\n\nmodule.exports = function (ctx, name, method) {\n  ctx[name] = function () {\n    var old_ssfi = flag(this, 'ssfi');\n    if (old_ssfi && config.includeStack === false)\n      flag(this, 'ssfi', ctx[name]);\n    var result = method.apply(this, arguments);\n    return result === undefined ? this : result;\n  };\n};\n\n\n/***/ },\n\n/***/ 357:\n/***/ function(module, exports, __webpack_require__) {\n\n/*!\n * Chai - addProperty utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar config = __webpack_require__(59);\nvar flag = __webpack_require__(48);\n\n/**\n * ### addProperty (ctx, name, getter)\n *\n * Adds a property to the prototype of an object.\n *\n *     utils.addProperty(chai.Assertion.prototype, 'foo', function () {\n *       var obj = utils.flag(this, 'object');\n *       new chai.Assertion(obj).to.be.instanceof(Foo);\n *     });\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.addProperty('foo', fn);\n *\n * Then can be used as any other assertion.\n *\n *     expect(myFoo).to.be.foo;\n *\n * @param {Object} ctx object to which the property is added\n * @param {String} name of property to add\n * @param {Function} getter function to be used for name\n * @namespace Utils\n * @name addProperty\n * @api public\n */\n\nmodule.exports = function (ctx, name, getter) {\n  Object.defineProperty(ctx, name,\n    { get: function addProperty() {\n        var old_ssfi = flag(this, 'ssfi');\n        if (old_ssfi && config.includeStack === false)\n          flag(this, 'ssfi', addProperty);\n\n        var result = getter.call(this);\n        return result === undefined ? this : result;\n      }\n    , configurable: true\n  });\n};\n\n\n/***/ },\n\n/***/ 358:\n/***/ function(module, exports, __webpack_require__) {\n\n/*!\n * Chai - expectTypes utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### expectTypes(obj, types)\n *\n * Ensures that the object being tested against is of a valid type.\n *\n *     utils.expectTypes(this, ['array', 'object', 'string']);\n *\n * @param {Mixed} obj constructed Assertion\n * @param {Array} type A list of allowed types for this assertion\n * @namespace Utils\n * @name expectTypes\n * @api public\n */\n\nvar AssertionError = __webpack_require__(148);\nvar flag = __webpack_require__(48);\nvar type = __webpack_require__(110);\n\nmodule.exports = function (obj, types) {\n  var obj = flag(obj, 'object');\n  types = types.map(function (t) { return t.toLowerCase(); });\n  types.sort();\n\n  // Transforms ['lorem', 'ipsum'] into 'a lirum, or an ipsum'\n  var str = types.map(function (t, index) {\n    var art = ~[ 'a', 'e', 'i', 'o', 'u' ].indexOf(t.charAt(0)) ? 'an' : 'a';\n    var or = types.length > 1 && index === types.length - 1 ? 'or ' : '';\n    return or + art + ' ' + t;\n  }).join(', ');\n\n  if (!types.some(function (expected) { return type(obj) === expected; })) {\n    throw new AssertionError(\n      'object tested must be ' + str + ', but ' + type(obj) + ' given'\n    );\n  }\n};\n\n\n/***/ },\n\n/***/ 359:\n/***/ function(module, exports) {\n\n/*!\n * Chai - getEnumerableProperties utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .getEnumerableProperties(object)\n *\n * This allows the retrieval of enumerable property names of an object,\n * inherited or not.\n *\n * @param {Object} object\n * @returns {Array}\n * @namespace Utils\n * @name getEnumerableProperties\n * @api public\n */\n\nmodule.exports = function getEnumerableProperties(object) {\n  var result = [];\n  for (var name in object) {\n    result.push(name);\n  }\n  return result;\n};\n\n\n/***/ },\n\n/***/ 360:\n/***/ function(module, exports, __webpack_require__) {\n\n/*!\n * Chai - message composition utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Module dependancies\n */\n\nvar flag = __webpack_require__(48)\n  , getActual = __webpack_require__(142)\n  , inspect = __webpack_require__(109)\n  , objDisplay = __webpack_require__(146);\n\n/**\n * ### .getMessage(object, message, negateMessage)\n *\n * Construct the error message based on flags\n * and template tags. Template tags will return\n * a stringified inspection of the object referenced.\n *\n * Message template tags:\n * - `#{this}` current asserted object\n * - `#{act}` actual value\n * - `#{exp}` expected value\n *\n * @param {Object} object (constructed Assertion)\n * @param {Arguments} chai.Assertion.prototype.assert arguments\n * @namespace Utils\n * @name getMessage\n * @api public\n */\n\nmodule.exports = function (obj, args) {\n  var negate = flag(obj, 'negate')\n    , val = flag(obj, 'object')\n    , expected = args[3]\n    , actual = getActual(obj, args)\n    , msg = negate ? args[2] : args[1]\n    , flagMsg = flag(obj, 'message');\n\n  if(typeof msg === \"function\") msg = msg();\n  msg = msg || '';\n  msg = msg\n    .replace(/#\\{this\\}/g, function () { return objDisplay(val); })\n    .replace(/#\\{act\\}/g, function () { return objDisplay(actual); })\n    .replace(/#\\{exp\\}/g, function () { return objDisplay(expected); });\n\n  return flagMsg ? flagMsg + ': ' + msg : msg;\n};\n\n\n/***/ },\n\n/***/ 361:\n/***/ function(module, exports, __webpack_require__) {\n\n/*!\n * Chai - getPathValue utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * @see https://github.com/logicalparadox/filtr\n * MIT Licensed\n */\n\nvar getPathInfo = __webpack_require__(144);\n\n/**\n * ### .getPathValue(path, object)\n *\n * This allows the retrieval of values in an\n * object given a string path.\n *\n *     var obj = {\n *         prop1: {\n *             arr: ['a', 'b', 'c']\n *           , str: 'Hello'\n *         }\n *       , prop2: {\n *             arr: [ { nested: 'Universe' } ]\n *           , str: 'Hello again!'\n *         }\n *     }\n *\n * The following would be the results.\n *\n *     getPathValue('prop1.str', obj); // Hello\n *     getPathValue('prop1.att[2]', obj); // b\n *     getPathValue('prop2.arr[0].nested', obj); // Universe\n *\n * @param {String} path\n * @param {Object} object\n * @returns {Object} value or `undefined`\n * @namespace Utils\n * @name getPathValue\n * @api public\n */\nmodule.exports = function(path, obj) {\n  var info = getPathInfo(path, obj);\n  return info.value;\n};\n\n\n/***/ },\n\n/***/ 362:\n/***/ function(module, exports) {\n\n/*!\n * Chai - getProperties utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .getProperties(object)\n *\n * This allows the retrieval of property names of an object, enumerable or not,\n * inherited or not.\n *\n * @param {Object} object\n * @returns {Array}\n * @namespace Utils\n * @name getProperties\n * @api public\n */\n\nmodule.exports = function getProperties(object) {\n  var result = Object.getOwnPropertyNames(object);\n\n  function addProperty(property) {\n    if (result.indexOf(property) === -1) {\n      result.push(property);\n    }\n  }\n\n  var proto = Object.getPrototypeOf(object);\n  while (proto !== null) {\n    Object.getOwnPropertyNames(proto).forEach(addProperty);\n    proto = Object.getPrototypeOf(proto);\n  }\n\n  return result;\n};\n\n\n/***/ },\n\n/***/ 363:\n/***/ function(module, exports, __webpack_require__) {\n\n/*!\n * chai\n * Copyright(c) 2011 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Main exports\n */\n\nvar exports = module.exports = {};\n\n/*!\n * test utility\n */\n\nexports.test = __webpack_require__(367);\n\n/*!\n * type utility\n */\n\nexports.type = __webpack_require__(110);\n\n/*!\n * expectTypes utility\n */\nexports.expectTypes = __webpack_require__(358);\n\n/*!\n * message utility\n */\n\nexports.getMessage = __webpack_require__(360);\n\n/*!\n * actual utility\n */\n\nexports.getActual = __webpack_require__(142);\n\n/*!\n * Inspect util\n */\n\nexports.inspect = __webpack_require__(109);\n\n/*!\n * Object Display util\n */\n\nexports.objDisplay = __webpack_require__(146);\n\n/*!\n * Flag utility\n */\n\nexports.flag = __webpack_require__(48);\n\n/*!\n * Flag transferring utility\n */\n\nexports.transferFlags = __webpack_require__(147);\n\n/*!\n * Deep equal utility\n */\n\nexports.eql = __webpack_require__(368);\n\n/*!\n * Deep path value\n */\n\nexports.getPathValue = __webpack_require__(361);\n\n/*!\n * Deep path info\n */\n\nexports.getPathInfo = __webpack_require__(144);\n\n/*!\n * Check if a property exists\n */\n\nexports.hasProperty = __webpack_require__(145);\n\n/*!\n * Function name\n */\n\nexports.getName = __webpack_require__(143);\n\n/*!\n * add Property\n */\n\nexports.addProperty = __webpack_require__(357);\n\n/*!\n * add Method\n */\n\nexports.addMethod = __webpack_require__(356);\n\n/*!\n * overwrite Property\n */\n\nexports.overwriteProperty = __webpack_require__(366);\n\n/*!\n * overwrite Method\n */\n\nexports.overwriteMethod = __webpack_require__(365);\n\n/*!\n * Add a chainable method\n */\n\nexports.addChainableMethod = __webpack_require__(355);\n\n/*!\n * Overwrite chainable method\n */\n\nexports.overwriteChainableMethod = __webpack_require__(364);\n\n\n/***/ },\n\n/***/ 364:\n/***/ function(module, exports) {\n\n/*!\n * Chai - overwriteChainableMethod utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### overwriteChainableMethod (ctx, name, method, chainingBehavior)\n *\n * Overwites an already existing chainable method\n * and provides access to the previous function or\n * property.  Must return functions to be used for\n * name.\n *\n *     utils.overwriteChainableMethod(chai.Assertion.prototype, 'length',\n *       function (_super) {\n *       }\n *     , function (_super) {\n *       }\n *     );\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.overwriteChainableMethod('foo', fn, fn);\n *\n * Then can be used as any other assertion.\n *\n *     expect(myFoo).to.have.length(3);\n *     expect(myFoo).to.have.length.above(3);\n *\n * @param {Object} ctx object whose method / property is to be overwritten\n * @param {String} name of method / property to overwrite\n * @param {Function} method function that returns a function to be used for name\n * @param {Function} chainingBehavior function that returns a function to be used for property\n * @namespace Utils\n * @name overwriteChainableMethod\n * @api public\n */\n\nmodule.exports = function (ctx, name, method, chainingBehavior) {\n  var chainableBehavior = ctx.__methods[name];\n\n  var _chainingBehavior = chainableBehavior.chainingBehavior;\n  chainableBehavior.chainingBehavior = function () {\n    var result = chainingBehavior(_chainingBehavior).call(this);\n    return result === undefined ? this : result;\n  };\n\n  var _method = chainableBehavior.method;\n  chainableBehavior.method = function () {\n    var result = method(_method).apply(this, arguments);\n    return result === undefined ? this : result;\n  };\n};\n\n\n/***/ },\n\n/***/ 365:\n/***/ function(module, exports) {\n\n/*!\n * Chai - overwriteMethod utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### overwriteMethod (ctx, name, fn)\n *\n * Overwites an already existing method and provides\n * access to previous function. Must return function\n * to be used for name.\n *\n *     utils.overwriteMethod(chai.Assertion.prototype, 'equal', function (_super) {\n *       return function (str) {\n *         var obj = utils.flag(this, 'object');\n *         if (obj instanceof Foo) {\n *           new chai.Assertion(obj.value).to.equal(str);\n *         } else {\n *           _super.apply(this, arguments);\n *         }\n *       }\n *     });\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.overwriteMethod('foo', fn);\n *\n * Then can be used as any other assertion.\n *\n *     expect(myFoo).to.equal('bar');\n *\n * @param {Object} ctx object whose method is to be overwritten\n * @param {String} name of method to overwrite\n * @param {Function} method function that returns a function to be used for name\n * @namespace Utils\n * @name overwriteMethod\n * @api public\n */\n\nmodule.exports = function (ctx, name, method) {\n  var _method = ctx[name]\n    , _super = function () { return this; };\n\n  if (_method && 'function' === typeof _method)\n    _super = _method;\n\n  ctx[name] = function () {\n    var result = method(_super).apply(this, arguments);\n    return result === undefined ? this : result;\n  }\n};\n\n\n/***/ },\n\n/***/ 366:\n/***/ function(module, exports) {\n\n/*!\n * Chai - overwriteProperty utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### overwriteProperty (ctx, name, fn)\n *\n * Overwites an already existing property getter and provides\n * access to previous value. Must return function to use as getter.\n *\n *     utils.overwriteProperty(chai.Assertion.prototype, 'ok', function (_super) {\n *       return function () {\n *         var obj = utils.flag(this, 'object');\n *         if (obj instanceof Foo) {\n *           new chai.Assertion(obj.name).to.equal('bar');\n *         } else {\n *           _super.call(this);\n *         }\n *       }\n *     });\n *\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.overwriteProperty('foo', fn);\n *\n * Then can be used as any other assertion.\n *\n *     expect(myFoo).to.be.ok;\n *\n * @param {Object} ctx object whose property is to be overwritten\n * @param {String} name of property to overwrite\n * @param {Function} getter function that returns a getter function to be used for name\n * @namespace Utils\n * @name overwriteProperty\n * @api public\n */\n\nmodule.exports = function (ctx, name, getter) {\n  var _get = Object.getOwnPropertyDescriptor(ctx, name)\n    , _super = function () {};\n\n  if (_get && 'function' === typeof _get.get)\n    _super = _get.get\n\n  Object.defineProperty(ctx, name,\n    { get: function () {\n        var result = getter(_super).call(this);\n        return result === undefined ? this : result;\n      }\n    , configurable: true\n  });\n};\n\n\n/***/ },\n\n/***/ 367:\n/***/ function(module, exports, __webpack_require__) {\n\n/*!\n * Chai - test utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Module dependancies\n */\n\nvar flag = __webpack_require__(48);\n\n/**\n * # test(object, expression)\n *\n * Test and object for expression.\n *\n * @param {Object} object (constructed Assertion)\n * @param {Arguments} chai.Assertion.prototype.assert arguments\n * @namespace Utils\n * @name test\n */\n\nmodule.exports = function (obj, args) {\n  var negate = flag(obj, 'negate')\n    , expr = args[0];\n  return negate ? !expr : expr;\n};\n\n\n/***/ },\n\n/***/ 368:\n/***/ function(module, exports, __webpack_require__) {\n\nmodule.exports = __webpack_require__(369);\n\n\n/***/ },\n\n/***/ 369:\n/***/ function(module, exports, __webpack_require__) {\n\n/*!\n * deep-eql\n * Copyright(c) 2013 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Module dependencies\n */\n\nvar type = __webpack_require__(370);\n\n/*!\n * Buffer.isBuffer browser shim\n */\n\nvar Buffer;\ntry { Buffer = __webpack_require__(433).Buffer; }\ncatch(ex) {\n  Buffer = {};\n  Buffer.isBuffer = function() { return false; }\n}\n\n/*!\n * Primary Export\n */\n\nmodule.exports = deepEqual;\n\n/**\n * Assert super-strict (egal) equality between\n * two objects of any type.\n *\n * @param {Mixed} a\n * @param {Mixed} b\n * @param {Array} memoised (optional)\n * @return {Boolean} equal match\n */\n\nfunction deepEqual(a, b, m) {\n  if (sameValue(a, b)) {\n    return true;\n  } else if ('date' === type(a)) {\n    return dateEqual(a, b);\n  } else if ('regexp' === type(a)) {\n    return regexpEqual(a, b);\n  } else if (Buffer.isBuffer(a)) {\n    return bufferEqual(a, b);\n  } else if ('arguments' === type(a)) {\n    return argumentsEqual(a, b, m);\n  } else if (!typeEqual(a, b)) {\n    return false;\n  } else if (('object' !== type(a) && 'object' !== type(b))\n  && ('array' !== type(a) && 'array' !== type(b))) {\n    return sameValue(a, b);\n  } else {\n    return objectEqual(a, b, m);\n  }\n}\n\n/*!\n * Strict (egal) equality test. Ensures that NaN always\n * equals NaN and `-0` does not equal `+0`.\n *\n * @param {Mixed} a\n * @param {Mixed} b\n * @return {Boolean} equal match\n */\n\nfunction sameValue(a, b) {\n  if (a === b) return a !== 0 || 1 / a === 1 / b;\n  return a !== a && b !== b;\n}\n\n/*!\n * Compare the types of two given objects and\n * return if they are equal. Note that an Array\n * has a type of `array` (not `object`) and arguments\n * have a type of `arguments` (not `array`/`object`).\n *\n * @param {Mixed} a\n * @param {Mixed} b\n * @return {Boolean} result\n */\n\nfunction typeEqual(a, b) {\n  return type(a) === type(b);\n}\n\n/*!\n * Compare two Date objects by asserting that\n * the time values are equal using `saveValue`.\n *\n * @param {Date} a\n * @param {Date} b\n * @return {Boolean} result\n */\n\nfunction dateEqual(a, b) {\n  if ('date' !== type(b)) return false;\n  return sameValue(a.getTime(), b.getTime());\n}\n\n/*!\n * Compare two regular expressions by converting them\n * to string and checking for `sameValue`.\n *\n * @param {RegExp} a\n * @param {RegExp} b\n * @return {Boolean} result\n */\n\nfunction regexpEqual(a, b) {\n  if ('regexp' !== type(b)) return false;\n  return sameValue(a.toString(), b.toString());\n}\n\n/*!\n * Assert deep equality of two `arguments` objects.\n * Unfortunately, these must be sliced to arrays\n * prior to test to ensure no bad behavior.\n *\n * @param {Arguments} a\n * @param {Arguments} b\n * @param {Array} memoize (optional)\n * @return {Boolean} result\n */\n\nfunction argumentsEqual(a, b, m) {\n  if ('arguments' !== type(b)) return false;\n  a = [].slice.call(a);\n  b = [].slice.call(b);\n  return deepEqual(a, b, m);\n}\n\n/*!\n * Get enumerable properties of a given object.\n *\n * @param {Object} a\n * @return {Array} property names\n */\n\nfunction enumerable(a) {\n  var res = [];\n  for (var key in a) res.push(key);\n  return res;\n}\n\n/*!\n * Simple equality for flat iterable objects\n * such as Arrays or Node.js buffers.\n *\n * @param {Iterable} a\n * @param {Iterable} b\n * @return {Boolean} result\n */\n\nfunction iterableEqual(a, b) {\n  if (a.length !==  b.length) return false;\n\n  var i = 0;\n  var match = true;\n\n  for (; i < a.length; i++) {\n    if (a[i] !== b[i]) {\n      match = false;\n      break;\n    }\n  }\n\n  return match;\n}\n\n/*!\n * Extension to `iterableEqual` specifically\n * for Node.js Buffers.\n *\n * @param {Buffer} a\n * @param {Mixed} b\n * @return {Boolean} result\n */\n\nfunction bufferEqual(a, b) {\n  if (!Buffer.isBuffer(b)) return false;\n  return iterableEqual(a, b);\n}\n\n/*!\n * Block for `objectEqual` ensuring non-existing\n * values don't get in.\n *\n * @param {Mixed} object\n * @return {Boolean} result\n */\n\nfunction isValue(a) {\n  return a !== null && a !== undefined;\n}\n\n/*!\n * Recursively check the equality of two objects.\n * Once basic sameness has been established it will\n * defer to `deepEqual` for each enumerable key\n * in the object.\n *\n * @param {Mixed} a\n * @param {Mixed} b\n * @return {Boolean} result\n */\n\nfunction objectEqual(a, b, m) {\n  if (!isValue(a) || !isValue(b)) {\n    return false;\n  }\n\n  if (a.prototype !== b.prototype) {\n    return false;\n  }\n\n  var i;\n  if (m) {\n    for (i = 0; i < m.length; i++) {\n      if ((m[i][0] === a && m[i][1] === b)\n      ||  (m[i][0] === b && m[i][1] === a)) {\n        return true;\n      }\n    }\n  } else {\n    m = [];\n  }\n\n  try {\n    var ka = enumerable(a);\n    var kb = enumerable(b);\n  } catch (ex) {\n    return false;\n  }\n\n  ka.sort();\n  kb.sort();\n\n  if (!iterableEqual(ka, kb)) {\n    return false;\n  }\n\n  m.push([ a, b ]);\n\n  var key;\n  for (i = ka.length - 1; i >= 0; i--) {\n    key = ka[i];\n    if (!deepEqual(a[key], b[key], m)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n\n/***/ },\n\n/***/ 370:\n/***/ function(module, exports, __webpack_require__) {\n\nmodule.exports = __webpack_require__(371);\n\n\n/***/ },\n\n/***/ 371:\n/***/ function(module, exports) {\n\n/*!\n * type-detect\n * Copyright(c) 2013 jake luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Primary Exports\n */\n\nvar exports = module.exports = getType;\n\n/*!\n * Detectable javascript natives\n */\n\nvar natives = {\n    '[object Array]': 'array'\n  , '[object RegExp]': 'regexp'\n  , '[object Function]': 'function'\n  , '[object Arguments]': 'arguments'\n  , '[object Date]': 'date'\n};\n\n/**\n * ### typeOf (obj)\n *\n * Use several different techniques to determine\n * the type of object being tested.\n *\n *\n * @param {Mixed} object\n * @return {String} object type\n * @api public\n */\n\nfunction getType (obj) {\n  var str = Object.prototype.toString.call(obj);\n  if (natives[str]) return natives[str];\n  if (obj === null) return 'null';\n  if (obj === undefined) return 'undefined';\n  if (obj === Object(obj)) return 'object';\n  return typeof obj;\n}\n\nexports.Library = Library;\n\n/**\n * ### Library\n *\n * Create a repository for custom type detection.\n *\n * ```js\n * var lib = new type.Library;\n * ```\n *\n */\n\nfunction Library () {\n  this.tests = {};\n}\n\n/**\n * #### .of (obj)\n *\n * Expose replacement `typeof` detection to the library.\n *\n * ```js\n * if ('string' === lib.of('hello world')) {\n *   // ...\n * }\n * ```\n *\n * @param {Mixed} object to test\n * @return {String} type\n */\n\nLibrary.prototype.of = getType;\n\n/**\n * #### .define (type, test)\n *\n * Add a test to for the `.test()` assertion.\n *\n * Can be defined as a regular expression:\n *\n * ```js\n * lib.define('int', /^[0-9]+$/);\n * ```\n *\n * ... or as a function:\n *\n * ```js\n * lib.define('bln', function (obj) {\n *   if ('boolean' === lib.of(obj)) return true;\n *   var blns = [ 'yes', 'no', 'true', 'false', 1, 0 ];\n *   if ('string' === lib.of(obj)) obj = obj.toLowerCase();\n *   return !! ~blns.indexOf(obj);\n * });\n * ```\n *\n * @param {String} type\n * @param {RegExp|Function} test\n * @api public\n */\n\nLibrary.prototype.define = function (type, test) {\n  if (arguments.length === 1) return this.tests[type];\n  this.tests[type] = test;\n  return this;\n};\n\n/**\n * #### .test (obj, test)\n *\n * Assert that an object is of type. Will first\n * check natives, and if that does not pass it will\n * use the user defined custom tests.\n *\n * ```js\n * assert(lib.test('1', 'int'));\n * assert(lib.test('yes', 'bln'));\n * ```\n *\n * @param {Mixed} object\n * @param {String} type\n * @return {Boolean} result\n * @api public\n */\n\nLibrary.prototype.test = function (obj, type) {\n  if (type === getType(obj)) return true;\n  var test = this.tests[type];\n\n  if (test && 'regexp' === getType(test)) {\n    return test.test(obj);\n  } else if (test && 'function' === getType(test)) {\n    return test(obj);\n  } else {\n    throw new ReferenceError('Type test \"' + type + '\" not defined or invalid.');\n  }\n};\n\n\n/***/ },\n\n/***/ 372:\n/***/ function(module, exports) {\n\n/*!\n * type-detect\n * Copyright(c) 2013 jake luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Primary Exports\n */\n\nvar exports = module.exports = getType;\n\n/**\n * ### typeOf (obj)\n *\n * Use several different techniques to determine\n * the type of object being tested.\n *\n *\n * @param {Mixed} object\n * @return {String} object type\n * @api public\n */\nvar objectTypeRegexp = /^\\[object (.*)\\]$/;\n\nfunction getType(obj) {\n  var type = Object.prototype.toString.call(obj).match(objectTypeRegexp)[1].toLowerCase();\n  // Let \"new String('')\" return 'object'\n  if (typeof Promise === 'function' && obj instanceof Promise) return 'promise';\n  // PhantomJS has type \"DOMWindow\" for null\n  if (obj === null) return 'null';\n  // PhantomJS has type \"DOMWindow\" for undefined\n  if (obj === undefined) return 'undefined';\n  return type;\n}\n\nexports.Library = Library;\n\n/**\n * ### Library\n *\n * Create a repository for custom type detection.\n *\n * ```js\n * var lib = new type.Library;\n * ```\n *\n */\n\nfunction Library() {\n  if (!(this instanceof Library)) return new Library();\n  this.tests = {};\n}\n\n/**\n * #### .of (obj)\n *\n * Expose replacement `typeof` detection to the library.\n *\n * ```js\n * if ('string' === lib.of('hello world')) {\n *   // ...\n * }\n * ```\n *\n * @param {Mixed} object to test\n * @return {String} type\n */\n\nLibrary.prototype.of = getType;\n\n/**\n * #### .define (type, test)\n *\n * Add a test to for the `.test()` assertion.\n *\n * Can be defined as a regular expression:\n *\n * ```js\n * lib.define('int', /^[0-9]+$/);\n * ```\n *\n * ... or as a function:\n *\n * ```js\n * lib.define('bln', function (obj) {\n *   if ('boolean' === lib.of(obj)) return true;\n *   var blns = [ 'yes', 'no', 'true', 'false', 1, 0 ];\n *   if ('string' === lib.of(obj)) obj = obj.toLowerCase();\n *   return !! ~blns.indexOf(obj);\n * });\n * ```\n *\n * @param {String} type\n * @param {RegExp|Function} test\n * @api public\n */\n\nLibrary.prototype.define = function(type, test) {\n  if (arguments.length === 1) return this.tests[type];\n  this.tests[type] = test;\n  return this;\n};\n\n/**\n * #### .test (obj, test)\n *\n * Assert that an object is of type. Will first\n * check natives, and if that does not pass it will\n * use the user defined custom tests.\n *\n * ```js\n * assert(lib.test('1', 'int'));\n * assert(lib.test('yes', 'bln'));\n * ```\n *\n * @param {Mixed} object\n * @param {String} type\n * @return {Boolean} result\n * @api public\n */\n\nLibrary.prototype.test = function(obj, type) {\n  if (type === getType(obj)) return true;\n  var test = this.tests[type];\n\n  if (test && 'regexp' === getType(test)) {\n    return test.test(obj);\n  } else if (test && 'function' === getType(test)) {\n    return test(obj);\n  } else {\n    throw new ReferenceError('Type test \"' + type + '\" not defined or invalid.');\n  }\n};\n\n\n/***/ },\n\n/***/ 38:\n/***/ function(module, exports) {\n\nmodule.exports = require(\"os\");\n\n/***/ },\n\n/***/ 433:\n/***/ function(module, exports) {\n\nmodule.exports = require(\"buffer\");\n\n/***/ },\n\n/***/ 438:\n/***/ function(module, exports, __webpack_require__) {\n\n/* global describe:false, before:false, it:false */\n\n__webpack_require__(164);\n__webpack_require__(163);\n__webpack_require__(162);\n__webpack_require__(160);\n__webpack_require__(161);\n\n/***/ },\n\n/***/ 48:\n/***/ function(module, exports) {\n\n/*!\n * Chai - flag utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### flag(object, key, [value])\n *\n * Get or set a flag value on an object. If a\n * value is provided it will be set, else it will\n * return the currently set value or `undefined` if\n * the value is not set.\n *\n *     utils.flag(this, 'foo', 'bar'); // setter\n *     utils.flag(this, 'foo'); // getter, returns `bar`\n *\n * @param {Object} object constructed Assertion\n * @param {String} key\n * @param {Mixed} value (optional)\n * @namespace Utils\n * @name flag\n * @api private\n */\n\nmodule.exports = function (obj, key, value) {\n  var flags = obj.__flags || (obj.__flags = Object.create(null));\n  if (arguments.length === 3) {\n    flags[key] = value;\n  } else {\n    return flags[key];\n  }\n};\n\n\n/***/ },\n\n/***/ 49:\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__martian__ = __webpack_require__(33);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__helpers__ = __webpack_require__(27);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__config__ = __webpack_require__(11);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__store__ = __webpack_require__(53);\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n/** @module Martian Robot **/\n\n\n\n\n\n\nvar _processMotion = new WeakMap();\nvar _hasScent = new WeakMap();\n\n/*\n * defines a martian robot and its current state\n * a martian robot will \"fall off\" the boundaries of mars\n * or be inhibited from falling off where another robot has fallen off\n * @extends Martian\n */\n\nvar MartianRobot = function (_Martian) {\n  _inherits(MartianRobot, _Martian);\n\n  /**\n   *\n   /**\n   *\n   * @param {string}   name        robot name: defaults to time string\n   * @param {number} x           robot x coordinate: default to zero\n   * @param {number} y           robot y coordinate: default to zero\n   * @param {string}   orientation\n   * robot orientation, must be a valid CardinalPoint or will default to north\n   * @param {boolean} isAlive     robot status, defaults to true\n   */\n  function MartianRobot(name, x, y, orientation) {\n    _classCallCheck(this, MartianRobot);\n\n    var _this = _possibleConstructorReturn(this, (MartianRobot.__proto__ || Object.getPrototypeOf(MartianRobot)).call(this, name, x, y, orientation));\n\n    _this._isAlive = true;\n\n    /**\n     * Private methods via WeakMaps:\n     * http://exploringjs.com/es6/ch_classes.html#_private-data-via-weakmaps\n     *\n     * I wanted utility/helper functions. By definition I don't want these to show up\n     * as a robot method. At first I thought, utility module/class thingermabob i.e. robotHelpers.js.\n     * But that seemed to depart from \"encapsulation\" and the \"single responsibility principle\"; also the internets says thats a anti-pattern/code smell\n     * This method works well, but the internets also says its a bit of a memory hog.\n     * Its making each instantiation more expensive;\n     * in my head these helpers should only exist once and be called on-demand. *shrugs*\n     *\n     * @param {number} tempPos: position to move to if valid\n     * @param {string} axis: x or y axis to move along\n     */\n    _processMotion.set(_this, function (tempPos, axis) {\n      var hs = _hasScent.get(_this);\n\n      switch (hs(_this.point, tempPos, __WEBPACK_IMPORTED_MODULE_2__config__[\"a\" /* bounds */].point.get(axis))) {\n        case 0:\n          break;\n        case 1:\n          _this._isAlive = false;\n          __WEBPACK_IMPORTED_MODULE_3__store__[\"b\" /* lostList */].push(_this.point);\n          break;\n        case 2:\n          _this[axis] = tempPos;\n          break;\n        default:\n        // do nothing\n      }\n    });\n\n    /**\n     * Lost robots leave a robot “scent” which we store in `lostList[]`.\n     * The scent prohibits future robots from dropping off the world at the same grid point.\n     * The scent is left at the last grid position the robot occupied before disappearing over the edge.\n     * We ignore instructions to to move “off” the world from a grid point from which a robot has been lost.\n     *\n     * @param {string} pointStr: 'x,y' coords\n     * @param {number} tempPos: instructed position\n     * @param {number} axisBounds: intructed boundary axis\n     * @returns {boolean || null}:\n     * - 0: check if location has scent by looking in the lost list\n     * then if the next move is fatal, don't move robot\n     *\n     * - 1: if location does NOT have a scent and the next move is fatal let it happen,\n     * but add the location to the lost list and update the bot status to LOST\n     *\n     * - 2: if the next move is safe let it happen\n     */\n    _hasScent.set(_this, function (pointStr, tempPos, axisBounds) {\n      if (__WEBPACK_IMPORTED_MODULE_3__store__[\"b\" /* lostList */].find(function (point) {\n        return point === pointStr;\n      }) && !__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__helpers__[\"b\" /* isPosSafe */])(tempPos, axisBounds)) {\n        return 0;\n      } else if (!__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__helpers__[\"b\" /* isPosSafe */])(tempPos, axisBounds)) {\n        return 1;\n      }\n\n      return 2;\n    });\n    return _this;\n  }\n\n  _createClass(MartianRobot, [{\n    key: 'move',\n\n\n    /**\n     * orientation determines which axis to increment/decrement along\n     */\n    value: function move() {\n      var pm = _processMotion.get(this);\n\n      switch (this._orientation) {\n        case 'N':\n          pm(this._y + 1, 'y');\n          break;\n        case 'S':\n          pm(this._y - 1, 'y');\n          break;\n        case 'E':\n          pm(this._x + 1, 'x');\n          break;\n        case 'W':\n          pm(this._x - 1, 'x');\n          break;\n        default:\n        // do nothing\n      }\n    }\n  }, {\n    key: 'isAlive',\n    set: function set(value) {\n      if (typeof value === 'boolean') {\n        this._isAlive = value;\n      } else {\n        //          this._isAlive = true;\n        throw new Error('A robot can only be alive (true) or lost (false).');\n      }\n    },\n    get: function get() {\n      return this._isAlive;\n    }\n  }, {\n    key: 'type',\n    get: function get() {\n      return 'Robot';\n    }\n  }]);\n\n  return MartianRobot;\n}(__WEBPACK_IMPORTED_MODULE_0__martian__[\"a\" /* default */]);\n\n/* harmony default export */ exports[\"a\"] = MartianRobot;\n\n/***/ },\n\n/***/ 50:\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__config__ = __webpack_require__(11);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__helpers__ = __webpack_require__(27);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_os__ = __webpack_require__(38);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_os___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_os__);\n/* harmony export (immutable) */ exports[\"a\"] = instruct;\n/* harmony export (immutable) */ exports[\"b\"] = printMars;\n/* harmony export (immutable) */ exports[\"c\"] = searchMars;\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\n/** @module Controller */\n\n\n\n\n\n/**\n * Calls the approrpriate action\n *\n * @private\n * @param {string} char  Left/Right/Forward\n * @param {object} being: the object we're acting on\n * @return {boolean} is being lost?\n */\nfunction _processCommands(char, being) {\n  switch (char) {\n    case 'L':\n    case 'R':\n      being.turn(char);\n      break;\n    case 'F':\n      being.move();\n      break;\n    default:\n      console.log('Invalid command received while processing \\'' + being.name + '\\', moving to next character.');\n  }\n\n  return being.isAlive; // dealbreaking flag, halts looping on false (robot lost)\n}\n\n/**\n *\n * @param   {object} being: robot or martian\n * @param   {string} instructionsStr: intructions for moving a robot or martian\n * @returns {object} returns a updated martian or robot\n */\nfunction instruct(being, instructionsStr) {\n  var str = instructionsStr.trim().substring(0, __WEBPACK_IMPORTED_MODULE_0__config__[\"b\" /* MAX_INSTRUCTION */]);\n\n  for (var i = 0; i < str.length; i++) {\n    if (_processCommands(str.charAt(i).toUpperCase(), being) === false) {\n      break;\n    }\n  }\n  return being;\n}\n\n/**\n *\n * @param   {Map.values}    mars      collection of martians and robots to print\n * @returns {String}    formatted string\n */\nfunction printMars(mars) {\n  var arr = mars.map(function (value) {\n    return '' + (__WEBPACK_IMPORTED_MODULE_2_os___default.a.type() === 'Darwin' ? __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__helpers__[\"c\" /* beingAsEmoji */])(value.toString(true)) : value.toString(true));\n  });\n\n  var arrStr = arr.toString().replace(/,/g, '\\n');\n  return { array: arr, string: arrStr };\n}\n\n/**\n *\n * @param   {Map.values}    mars      collection of martians and robots to filter\n * @param   {string|binary} condition value to filter against\n * @param   {string} property  = 'type' martian or robot property to compare condition\n * @returns {Array & String} filtered array with formatted filtered results\n * returns string with emoji if OSX (Darwin)\n */\nfunction searchMars(mars, condition) {\n  var property = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'type';\n\n  var arr = printMars([].concat(_toConsumableArray(mars)).filter(function (value) {\n    return value[property] === condition;\n  }));\n\n  return { array: arr.array, string: arr.string };\n}\n\n/***/ },\n\n/***/ 53:\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(exports, \"b\", function() { return lostList; });\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/** @module Store */\n\nvar lostList = []; // manages grid points of lost robots\n\nvar _mars = new WeakMap();\n\n/**\n * Storage object and methods\n */\n\nvar Store = function () {\n  function Store() {\n    _classCallCheck(this, Store);\n\n    _mars.set(this, new Map());\n  }\n\n  /**\n   *\n   * @throws {Error} only add martians or robots\n   * @param   {Array} ...martian: add one... or add many\n   * @returns {number} size of mars Map\n   */\n\n\n  _createClass(Store, [{\n    key: 'add',\n    value: function add() {\n      var mars = _mars.get(this);\n\n      for (var _len = arguments.length, martian = Array(_len), _key = 0; _key < _len; _key++) {\n        martian[_key] = arguments[_key];\n      }\n\n      martian.forEach(function (m) {\n        try {\n          if (['Martian', 'Robot'].includes(m.type)) {\n            mars.set(m.name, m);\n          }\n        } catch (e) {\n          throw new Error('Can only store Martians and Robots.');\n        }\n      });\n\n      return mars.size;\n    }\n\n    /**\n     *\n     * @param   {object}   martian to act on\n     * @returns {boolean} reflect if boolean was successful\n     */\n\n  }, {\n    key: 'update',\n    value: function update(martian) {\n      var mars = _mars.get(this);\n\n      if (mars.has(martian.name)) {\n        mars.set(martian.name, martian);\n      }\n\n      return mars.has(martian.name);\n    }\n\n    /**\n     *\n     * @param   {string} martianName: use as key to delete from mars\n     * @returns {boolean} confirm deletion\n     */\n\n  }, {\n    key: 'remove',\n    value: function remove(martianName) {\n      var mars = _mars.get(this);\n      return mars.delete(martianName);\n    }\n\n    /**\n     *\n     * @param   {string} martianName: key to retrieve\n     * @returns {object} martian/robot or undefined\n     */\n\n  }, {\n    key: 'get',\n    value: function get(martianName) {\n      var mars = _mars.get(this);\n      return mars.get(martianName);\n    }\n\n    /**\n     *\n     * @returns {Map} return all mars contents\n     */\n\n  }, {\n    key: 'getAll',\n    value: function getAll() {\n      var mars = _mars.get(this);\n      return mars;\n    }\n  }]);\n\n  return Store;\n}();\n\n/* harmony default export */ exports[\"a\"] = Store;\n\n/***/ },\n\n/***/ 59:\n/***/ function(module, exports) {\n\nmodule.exports = {\n\n  /**\n   * ### config.includeStack\n   *\n   * User configurable property, influences whether stack trace\n   * is included in Assertion error message. Default of false\n   * suppresses stack trace in the error message.\n   *\n   *     chai.config.includeStack = true;  // enable stack on error\n   *\n   * @param {Boolean}\n   * @api public\n   */\n\n   includeStack: false,\n\n  /**\n   * ### config.showDiff\n   *\n   * User configurable property, influences whether or not\n   * the `showDiff` flag should be included in the thrown\n   * AssertionErrors. `false` will always be `false`; `true`\n   * will be true when the assertion has requested a diff\n   * be shown.\n   *\n   * @param {Boolean}\n   * @api public\n   */\n\n  showDiff: true,\n\n  /**\n   * ### config.truncateThreshold\n   *\n   * User configurable property, sets length threshold for actual and\n   * expected values in assertion errors. If this threshold is exceeded, for\n   * example for large data structures, the value is replaced with something\n   * like `[ Array(3) ]` or `{ Object (prop1, prop2) }`.\n   *\n   * Set it to zero if you want to disable truncating altogether.\n   *\n   * This is especially userful when doing assertions on arrays: having this\n   * set to a reasonable large value makes the failure messages readily\n   * inspectable.\n   *\n   *     chai.config.truncateThreshold = 0;  // disable truncating\n   *\n   * @param {Number}\n   * @api public\n   */\n\n  truncateThreshold: 40\n\n};\n\n\n/***/ },\n\n/***/ 63:\n/***/ function(module, exports, __webpack_require__) {\n\nmodule.exports = __webpack_require__(349);\n\n\n/***/ },\n\n/***/ 78:\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/** @module CardinalPoints */\n\n/**\n * Cardinal Points Object\n * Methods to access/verify point names and values:\n * [\"N\", 0], [\"E\", 90], [\"S\", 180], [\"W\", 270]\n */\nvar _points = new WeakMap();\n\nvar CardinalPoints = function () {\n  function CardinalPoints() {\n    _classCallCheck(this, CardinalPoints);\n\n    /*\n     * Private data via WeakMaps:\n     * http://exploringjs.com/es6/ch_classes.html#_private-data-via-weakmaps\n     */\n    _points.set(this, new Map([['N', 0], ['E', 90], ['S', 180], ['W', 270]]));\n  }\n\n  /**\n   *\n   * @param   {string} Cardinal Point\n   * @returns {number} Corresponding degree for cardinal point\n   */\n\n\n  _createClass(CardinalPoints, [{\n    key: 'getDegree',\n    value: function getDegree(point) {\n      var points = _points.get(this);\n      return points.get(point.toString().toUpperCase());\n    }\n\n    /**\n     *\n     * @param   {number} degree\n     * @returns {string} Corresponding cardinal point for degree\n     */\n\n  }, {\n    key: 'getPointName',\n    value: function getPointName(degree) {\n      var points = _points.get(this);\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = points[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var _step$value = _slicedToArray(_step.value, 2);\n\n          var key = _step$value[0];\n          var value = _step$value[1];\n\n          if (value === Number.parseInt(degree, 10)) {\n            return key;\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      return undefined;\n    }\n\n    /**\n     *\n     * @param   {string} Cardinal point\n     * @returns {boolean} True if point exists in Cardinal Points map\n     */\n\n  }, {\n    key: 'isValidPoint',\n    value: function isValidPoint(point) {\n      var points = _points.get(this);\n      return points.has(point.toString().toUpperCase());\n    }\n  }]);\n\n  return CardinalPoints;\n}();\n\n/* harmony default export */ exports[\"a\"] = CardinalPoints;\n\n/***/ }\n\n/******/ });\n\n\n// WEBPACK FOOTER //\n// tests/tests-bundle.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmory imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmory exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tObject.defineProperty(exports, name, {\n \t\t\tconfigurable: false,\n \t\t\tenumerable: true,\n \t\t\tget: getter\n \t\t});\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 438);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap a481328a1cd9ff10fa4b","// This is (almost) directly from Node.js utils\n// https://github.com/joyent/node/blob/f8c335d0caf47f16d31413f89aa28eda3878e3aa/lib/util.js\n\nvar getName = require('./getName');\nvar getProperties = require('./getProperties');\nvar getEnumerableProperties = require('./getEnumerableProperties');\n\nmodule.exports = inspect;\n\n/**\n * Echos the value of a value. Trys to print the value out\n * in the best way possible given the different types.\n *\n * @param {Object} obj The object to print out.\n * @param {Boolean} showHidden Flag that shows hidden (not enumerable)\n *    properties of objects.\n * @param {Number} depth Depth in which to descend in object. Default is 2.\n * @param {Boolean} colors Flag to turn on ANSI escape codes to color the\n *    output. Default is false (no coloring).\n * @namespace Utils\n * @name inspect\n */\nfunction inspect(obj, showHidden, depth, colors) {\n  var ctx = {\n    showHidden: showHidden,\n    seen: [],\n    stylize: function (str) { return str; }\n  };\n  return formatValue(ctx, obj, (typeof depth === 'undefined' ? 2 : depth));\n}\n\n// Returns true if object is a DOM element.\nvar isDOMElement = function (object) {\n  if (typeof HTMLElement === 'object') {\n    return object instanceof HTMLElement;\n  } else {\n    return object &&\n      typeof object === 'object' &&\n      object.nodeType === 1 &&\n      typeof object.nodeName === 'string';\n  }\n};\n\nfunction formatValue(ctx, value, recurseTimes) {\n  // Provide a hook for user-specified inspect functions.\n  // Check that value is an object with an inspect function on it\n  if (value && typeof value.inspect === 'function' &&\n      // Filter out the util module, it's inspect function is special\n      value.inspect !== exports.inspect &&\n      // Also filter out any prototype objects using the circular check.\n      !(value.constructor && value.constructor.prototype === value)) {\n    var ret = value.inspect(recurseTimes);\n    if (typeof ret !== 'string') {\n      ret = formatValue(ctx, ret, recurseTimes);\n    }\n    return ret;\n  }\n\n  // Primitive types cannot have properties\n  var primitive = formatPrimitive(ctx, value);\n  if (primitive) {\n    return primitive;\n  }\n\n  // If this is a DOM element, try to get the outer HTML.\n  if (isDOMElement(value)) {\n    if ('outerHTML' in value) {\n      return value.outerHTML;\n      // This value does not have an outerHTML attribute,\n      //   it could still be an XML element\n    } else {\n      // Attempt to serialize it\n      try {\n        if (document.xmlVersion) {\n          var xmlSerializer = new XMLSerializer();\n          return xmlSerializer.serializeToString(value);\n        } else {\n          // Firefox 11- do not support outerHTML\n          //   It does, however, support innerHTML\n          //   Use the following to render the element\n          var ns = \"http://www.w3.org/1999/xhtml\";\n          var container = document.createElementNS(ns, '_');\n\n          container.appendChild(value.cloneNode(false));\n          html = container.innerHTML\n            .replace('><', '>' + value.innerHTML + '<');\n          container.innerHTML = '';\n          return html;\n        }\n      } catch (err) {\n        // This could be a non-native DOM implementation,\n        //   continue with the normal flow:\n        //   printing the element as if it is an object.\n      }\n    }\n  }\n\n  // Look up the keys of the object.\n  var visibleKeys = getEnumerableProperties(value);\n  var keys = ctx.showHidden ? getProperties(value) : visibleKeys;\n\n  // Some type of object without properties can be shortcutted.\n  // In IE, errors have a single `stack` property, or if they are vanilla `Error`,\n  // a `stack` plus `description` property; ignore those for consistency.\n  if (keys.length === 0 || (isError(value) && (\n      (keys.length === 1 && keys[0] === 'stack') ||\n      (keys.length === 2 && keys[0] === 'description' && keys[1] === 'stack')\n     ))) {\n    if (typeof value === 'function') {\n      var name = getName(value);\n      var nameSuffix = name ? ': ' + name : '';\n      return ctx.stylize('[Function' + nameSuffix + ']', 'special');\n    }\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    }\n    if (isDate(value)) {\n      return ctx.stylize(Date.prototype.toUTCString.call(value), 'date');\n    }\n    if (isError(value)) {\n      return formatError(value);\n    }\n  }\n\n  var base = '', array = false, braces = ['{', '}'];\n\n  // Make Array say that they are Array\n  if (isArray(value)) {\n    array = true;\n    braces = ['[', ']'];\n  }\n\n  // Make functions say that they are functions\n  if (typeof value === 'function') {\n    var name = getName(value);\n    var nameSuffix = name ? ': ' + name : '';\n    base = ' [Function' + nameSuffix + ']';\n  }\n\n  // Make RegExps say that they are RegExps\n  if (isRegExp(value)) {\n    base = ' ' + RegExp.prototype.toString.call(value);\n  }\n\n  // Make dates with properties first say the date\n  if (isDate(value)) {\n    base = ' ' + Date.prototype.toUTCString.call(value);\n  }\n\n  // Make error with message first say the error\n  if (isError(value)) {\n    return formatError(value);\n  }\n\n  if (keys.length === 0 && (!array || value.length == 0)) {\n    return braces[0] + base + braces[1];\n  }\n\n  if (recurseTimes < 0) {\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    } else {\n      return ctx.stylize('[Object]', 'special');\n    }\n  }\n\n  ctx.seen.push(value);\n\n  var output;\n  if (array) {\n    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);\n  } else {\n    output = keys.map(function(key) {\n      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);\n    });\n  }\n\n  ctx.seen.pop();\n\n  return reduceToSingleString(output, base, braces);\n}\n\n\nfunction formatPrimitive(ctx, value) {\n  switch (typeof value) {\n    case 'undefined':\n      return ctx.stylize('undefined', 'undefined');\n\n    case 'string':\n      var simple = '\\'' + JSON.stringify(value).replace(/^\"|\"$/g, '')\n                                               .replace(/'/g, \"\\\\'\")\n                                               .replace(/\\\\\"/g, '\"') + '\\'';\n      return ctx.stylize(simple, 'string');\n\n    case 'number':\n      if (value === 0 && (1/value) === -Infinity) {\n        return ctx.stylize('-0', 'number');\n      }\n      return ctx.stylize('' + value, 'number');\n\n    case 'boolean':\n      return ctx.stylize('' + value, 'boolean');\n  }\n  // For some reason typeof null is \"object\", so special case here.\n  if (value === null) {\n    return ctx.stylize('null', 'null');\n  }\n}\n\n\nfunction formatError(value) {\n  return '[' + Error.prototype.toString.call(value) + ']';\n}\n\n\nfunction formatArray(ctx, value, recurseTimes, visibleKeys, keys) {\n  var output = [];\n  for (var i = 0, l = value.length; i < l; ++i) {\n    if (Object.prototype.hasOwnProperty.call(value, String(i))) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          String(i), true));\n    } else {\n      output.push('');\n    }\n  }\n  keys.forEach(function(key) {\n    if (!key.match(/^\\d+$/)) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          key, true));\n    }\n  });\n  return output;\n}\n\n\nfunction formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {\n  var name, str;\n  if (value.__lookupGetter__) {\n    if (value.__lookupGetter__(key)) {\n      if (value.__lookupSetter__(key)) {\n        str = ctx.stylize('[Getter/Setter]', 'special');\n      } else {\n        str = ctx.stylize('[Getter]', 'special');\n      }\n    } else {\n      if (value.__lookupSetter__(key)) {\n        str = ctx.stylize('[Setter]', 'special');\n      }\n    }\n  }\n  if (visibleKeys.indexOf(key) < 0) {\n    name = '[' + key + ']';\n  }\n  if (!str) {\n    if (ctx.seen.indexOf(value[key]) < 0) {\n      if (recurseTimes === null) {\n        str = formatValue(ctx, value[key], null);\n      } else {\n        str = formatValue(ctx, value[key], recurseTimes - 1);\n      }\n      if (str.indexOf('\\n') > -1) {\n        if (array) {\n          str = str.split('\\n').map(function(line) {\n            return '  ' + line;\n          }).join('\\n').substr(2);\n        } else {\n          str = '\\n' + str.split('\\n').map(function(line) {\n            return '   ' + line;\n          }).join('\\n');\n        }\n      }\n    } else {\n      str = ctx.stylize('[Circular]', 'special');\n    }\n  }\n  if (typeof name === 'undefined') {\n    if (array && key.match(/^\\d+$/)) {\n      return str;\n    }\n    name = JSON.stringify('' + key);\n    if (name.match(/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)) {\n      name = name.substr(1, name.length - 2);\n      name = ctx.stylize(name, 'name');\n    } else {\n      name = name.replace(/'/g, \"\\\\'\")\n                 .replace(/\\\\\"/g, '\"')\n                 .replace(/(^\"|\"$)/g, \"'\");\n      name = ctx.stylize(name, 'string');\n    }\n  }\n\n  return name + ': ' + str;\n}\n\n\nfunction reduceToSingleString(output, base, braces) {\n  var numLinesEst = 0;\n  var length = output.reduce(function(prev, cur) {\n    numLinesEst++;\n    if (cur.indexOf('\\n') >= 0) numLinesEst++;\n    return prev + cur.length + 1;\n  }, 0);\n\n  if (length > 60) {\n    return braces[0] +\n           (base === '' ? '' : base + '\\n ') +\n           ' ' +\n           output.join(',\\n  ') +\n           ' ' +\n           braces[1];\n  }\n\n  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];\n}\n\nfunction isArray(ar) {\n  return Array.isArray(ar) ||\n         (typeof ar === 'object' && objectToString(ar) === '[object Array]');\n}\n\nfunction isRegExp(re) {\n  return typeof re === 'object' && objectToString(re) === '[object RegExp]';\n}\n\nfunction isDate(d) {\n  return typeof d === 'object' && objectToString(d) === '[object Date]';\n}\n\nfunction isError(e) {\n  return typeof e === 'object' && objectToString(e) === '[object Error]';\n}\n\nfunction objectToString(o) {\n  return Object.prototype.toString.call(o);\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chai/lib/chai/utils/inspect.js\n// module id = 109\n// module chunks = 1","/** module config */\n\nimport { isPositiveNumber } from './helpers';\n\n/*\n * Default values\n */\nexport var MAX_COORD = 50;\nexport var MAX_INSTRUCTION = 100;\nexport var X_BOUNDS = 5;\nexport var Y_BOUNDS = 3;\n\n/**\n * set boundaries for mars as object literal\n * and return a boundaries a map with our points\n */\nvar x = void 0,\n    y = void 0;\nexport var bounds = {\n  set x(value) {\n    x = isPositiveNumber(value) && value <= MAX_COORD ? value : X_BOUNDS;\n  },\n  get x() {\n    return x;\n  },\n  set y(value) {\n    y = isPositiveNumber(value) && value <= MAX_COORD ? value : Y_BOUNDS;\n  },\n  get y() {\n    return y;\n  },\n  get point() {\n    return new Map([['x', x], ['y', y]]);\n  },\n  get isSet() {\n    return x > 0 && y > 0;\n  }\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/config.js\n// module id = 11\n// module chunks = 0 1","module.exports = require('./lib/type');\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chai/~/type-detect/index.js\n// module id = 110\n// module chunks = 1","/*!\n * Chai - getActual utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * # getActual(object, [actual])\n *\n * Returns the `actual` value for an Assertion\n *\n * @param {Object} object (constructed Assertion)\n * @param {Arguments} chai.Assertion.prototype.assert arguments\n * @namespace Utils\n * @name getActual\n */\n\nmodule.exports = function (obj, args) {\n  return args.length > 4 ? args[4] : obj._obj;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chai/lib/chai/utils/getActual.js\n// module id = 142\n// module chunks = 1","/*!\n * Chai - getName utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * # getName(func)\n *\n * Gets the name of a function, in a cross-browser way.\n *\n * @param {Function} a function (usually a constructor)\n * @namespace Utils\n * @name getName\n */\n\nmodule.exports = function (func) {\n  if (func.name) return func.name;\n\n  var match = /^\\s?function ([^(]*)\\(/.exec(func);\n  return match && match[1] ? match[1] : \"\";\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chai/lib/chai/utils/getName.js\n// module id = 143\n// module chunks = 1","/*!\n * Chai - getPathInfo utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar hasProperty = require('./hasProperty');\n\n/**\n * ### .getPathInfo(path, object)\n *\n * This allows the retrieval of property info in an\n * object given a string path.\n *\n * The path info consists of an object with the\n * following properties:\n *\n * * parent - The parent object of the property referenced by `path`\n * * name - The name of the final property, a number if it was an array indexer\n * * value - The value of the property, if it exists, otherwise `undefined`\n * * exists - Whether the property exists or not\n *\n * @param {String} path\n * @param {Object} object\n * @returns {Object} info\n * @namespace Utils\n * @name getPathInfo\n * @api public\n */\n\nmodule.exports = function getPathInfo(path, obj) {\n  var parsed = parsePath(path),\n      last = parsed[parsed.length - 1];\n\n  var info = {\n    parent: parsed.length > 1 ? _getPathValue(parsed, obj, parsed.length - 1) : obj,\n    name: last.p || last.i,\n    value: _getPathValue(parsed, obj)\n  };\n  info.exists = hasProperty(info.name, info.parent);\n\n  return info;\n};\n\n\n/*!\n * ## parsePath(path)\n *\n * Helper function used to parse string object\n * paths. Use in conjunction with `_getPathValue`.\n *\n *      var parsed = parsePath('myobject.property.subprop');\n *\n * ### Paths:\n *\n * * Can be as near infinitely deep and nested\n * * Arrays are also valid using the formal `myobject.document[3].property`.\n * * Literal dots and brackets (not delimiter) must be backslash-escaped.\n *\n * @param {String} path\n * @returns {Object} parsed\n * @api private\n */\n\nfunction parsePath (path) {\n  var str = path.replace(/([^\\\\])\\[/g, '$1.[')\n    , parts = str.match(/(\\\\\\.|[^.]+?)+/g);\n  return parts.map(function (value) {\n    var re = /^\\[(\\d+)\\]$/\n      , mArr = re.exec(value);\n    if (mArr) return { i: parseFloat(mArr[1]) };\n    else return { p: value.replace(/\\\\([.\\[\\]])/g, '$1') };\n  });\n}\n\n\n/*!\n * ## _getPathValue(parsed, obj)\n *\n * Helper companion function for `.parsePath` that returns\n * the value located at the parsed address.\n *\n *      var value = getPathValue(parsed, obj);\n *\n * @param {Object} parsed definition from `parsePath`.\n * @param {Object} object to search against\n * @param {Number} object to search against\n * @returns {Object|Undefined} value\n * @api private\n */\n\nfunction _getPathValue (parsed, obj, index) {\n  var tmp = obj\n    , res;\n\n  index = (index === undefined ? parsed.length : index);\n\n  for (var i = 0, l = index; i < l; i++) {\n    var part = parsed[i];\n    if (tmp) {\n      if ('undefined' !== typeof part.p)\n        tmp = tmp[part.p];\n      else if ('undefined' !== typeof part.i)\n        tmp = tmp[part.i];\n      if (i == (l - 1)) res = tmp;\n    } else {\n      res = undefined;\n    }\n  }\n  return res;\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chai/lib/chai/utils/getPathInfo.js\n// module id = 144\n// module chunks = 1","/*!\n * Chai - hasProperty utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar type = require('type-detect');\n\n/**\n * ### .hasProperty(object, name)\n *\n * This allows checking whether an object has\n * named property or numeric array index.\n *\n * Basically does the same thing as the `in`\n * operator but works properly with natives\n * and null/undefined values.\n *\n *     var obj = {\n *         arr: ['a', 'b', 'c']\n *       , str: 'Hello'\n *     }\n *\n * The following would be the results.\n *\n *     hasProperty('str', obj);  // true\n *     hasProperty('constructor', obj);  // true\n *     hasProperty('bar', obj);  // false\n *\n *     hasProperty('length', obj.str); // true\n *     hasProperty(1, obj.str);  // true\n *     hasProperty(5, obj.str);  // false\n *\n *     hasProperty('length', obj.arr);  // true\n *     hasProperty(2, obj.arr);  // true\n *     hasProperty(3, obj.arr);  // false\n *\n * @param {Objuect} object\n * @param {String|Number} name\n * @returns {Boolean} whether it exists\n * @namespace Utils\n * @name getPathInfo\n * @api public\n */\n\nvar literals = {\n    'number': Number\n  , 'string': String\n};\n\nmodule.exports = function hasProperty(name, obj) {\n  var ot = type(obj);\n\n  // Bad Object, obviously no props at all\n  if(ot === 'null' || ot === 'undefined')\n    return false;\n\n  // The `in` operator does not work with certain literals\n  // box these before the check\n  if(literals[ot] && typeof obj !== 'object')\n    obj = new literals[ot](obj);\n\n  return name in obj;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chai/lib/chai/utils/hasProperty.js\n// module id = 145\n// module chunks = 1","/*!\n * Chai - flag utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Module dependancies\n */\n\nvar inspect = require('./inspect');\nvar config = require('../config');\n\n/**\n * ### .objDisplay (object)\n *\n * Determines if an object or an array matches\n * criteria to be inspected in-line for error\n * messages or should be truncated.\n *\n * @param {Mixed} javascript object to inspect\n * @name objDisplay\n * @namespace Utils\n * @api public\n */\n\nmodule.exports = function (obj) {\n  var str = inspect(obj)\n    , type = Object.prototype.toString.call(obj);\n\n  if (config.truncateThreshold && str.length >= config.truncateThreshold) {\n    if (type === '[object Function]') {\n      return !obj.name || obj.name === ''\n        ? '[Function]'\n        : '[Function: ' + obj.name + ']';\n    } else if (type === '[object Array]') {\n      return '[ Array(' + obj.length + ') ]';\n    } else if (type === '[object Object]') {\n      var keys = Object.keys(obj)\n        , kstr = keys.length > 2\n          ? keys.splice(0, 2).join(', ') + ', ...'\n          : keys.join(', ');\n      return '{ Object (' + kstr + ') }';\n    } else {\n      return str;\n    }\n  } else {\n    return str;\n  }\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chai/lib/chai/utils/objDisplay.js\n// module id = 146\n// module chunks = 1","/*!\n * Chai - transferFlags utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### transferFlags(assertion, object, includeAll = true)\n *\n * Transfer all the flags for `assertion` to `object`. If\n * `includeAll` is set to `false`, then the base Chai\n * assertion flags (namely `object`, `ssfi`, and `message`)\n * will not be transferred.\n *\n *\n *     var newAssertion = new Assertion();\n *     utils.transferFlags(assertion, newAssertion);\n *\n *     var anotherAsseriton = new Assertion(myObj);\n *     utils.transferFlags(assertion, anotherAssertion, false);\n *\n * @param {Assertion} assertion the assertion to transfer the flags from\n * @param {Object} object the object to transfer the flags to; usually a new assertion\n * @param {Boolean} includeAll\n * @namespace Utils\n * @name transferFlags\n * @api private\n */\n\nmodule.exports = function (assertion, object, includeAll) {\n  var flags = assertion.__flags || (assertion.__flags = Object.create(null));\n\n  if (!object.__flags) {\n    object.__flags = Object.create(null);\n  }\n\n  includeAll = arguments.length === 3 ? includeAll : true;\n\n  for (var flag in flags) {\n    if (includeAll ||\n        (flag !== 'object' && flag !== 'ssfi' && flag != 'message')) {\n      object.__flags[flag] = flags[flag];\n    }\n  }\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chai/lib/chai/utils/transferFlags.js\n// module id = 147\n// module chunks = 1","/*!\n * assertion-error\n * Copyright(c) 2013 Jake Luer <jake@qualiancy.com>\n * MIT Licensed\n */\n\n/*!\n * Return a function that will copy properties from\n * one object to another excluding any originally\n * listed. Returned function will create a new `{}`.\n *\n * @param {String} excluded properties ...\n * @return {Function}\n */\n\nfunction exclude () {\n  var excludes = [].slice.call(arguments);\n\n  function excludeProps (res, obj) {\n    Object.keys(obj).forEach(function (key) {\n      if (!~excludes.indexOf(key)) res[key] = obj[key];\n    });\n  }\n\n  return function extendExclude () {\n    var args = [].slice.call(arguments)\n      , i = 0\n      , res = {};\n\n    for (; i < args.length; i++) {\n      excludeProps(res, args[i]);\n    }\n\n    return res;\n  };\n};\n\n/*!\n * Primary Exports\n */\n\nmodule.exports = AssertionError;\n\n/**\n * ### AssertionError\n *\n * An extension of the JavaScript `Error` constructor for\n * assertion and validation scenarios.\n *\n * @param {String} message\n * @param {Object} properties to include (optional)\n * @param {callee} start stack function (optional)\n */\n\nfunction AssertionError (message, _props, ssf) {\n  var extend = exclude('name', 'message', 'stack', 'constructor', 'toJSON')\n    , props = extend(_props || {});\n\n  // default values\n  this.message = message || 'Unspecified AssertionError';\n  this.showDiff = false;\n\n  // copy from properties\n  for (var key in props) {\n    this[key] = props[key];\n  }\n\n  // capture stack trace\n  ssf = ssf || arguments.callee;\n  if (ssf && Error.captureStackTrace) {\n    Error.captureStackTrace(this, ssf);\n  } else {\n    try {\n      throw new Error();\n    } catch(e) {\n      this.stack = e.stack;\n    }\n  }\n}\n\n/*!\n * Inherit from Error.prototype\n */\n\nAssertionError.prototype = Object.create(Error.prototype);\n\n/*!\n * Statically set name\n */\n\nAssertionError.prototype.name = 'AssertionError';\n\n/*!\n * Ensure correct constructor\n */\n\nAssertionError.prototype.constructor = AssertionError;\n\n/**\n * Allow errors to be converted to JSON for static transfer.\n *\n * @param {Boolean} include stack (default: `true`)\n * @return {Object} object that can be `JSON.stringify`\n */\n\nAssertionError.prototype.toJSON = function (stack) {\n  var extend = exclude('constructor', 'toJSON', 'stack')\n    , props = extend({ name: this.name }, this);\n\n  // include stack if exists and not turned off\n  if (false !== stack && this.stack) {\n    props.stack = this.stack;\n  }\n\n  return props;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chai/~/assertion-error/index.js\n// module id = 148\n// module chunks = 1","/* global describe:false, before:false, it:false */\n\nimport CardinalPoints from '../src/js/classes/cardinalPoints';\n\nvar assert = require('chai').assert;\n\ndescribe('cardinalPoints.js', function () {\n  it('CardinalPoints{}', function () {\n    var cp = new CardinalPoints();\n    assert.strictEqual(cp.getDegree('N'), 0, 'N is a point');\n    assert.strictEqual(cp.getDegree('SE'), undefined, 'SE is not a point');\n    assert.strictEqual(cp.getPointName(270), 'W', 'W = 270°');\n    assert.strictEqual(cp.getPointName(271), undefined, '271 doesnt correspond a point');\n    assert.strictEqual(cp.isValidPoint('SE'), false, 'SE is not a point');\n  });\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./tests/cardinalPoints.js\n// module id = 160\n// module chunks = 1","/* global describe:false, before:false, it:false */\n\nimport { bounds } from '../src/js/config';\nimport { isNumber } from '../src/js/helpers';\n\nvar assert = require('chai').assert;\n\ndescribe('Config & Helpers', function () {\n  before(function () {\n    bounds.x = -1;\n    bounds.y = 15;\n  });\n\n  it('bounds{}', function () {\n    assert.strictEqual(bounds.point.get('x') === 5, true, 'assigning a negative number to bounds will return the default of 5');\n    assert.strictEqual(bounds.point.get('y') === 15, true, 'assigning a positive number to bounds will return the number');\n  });\n\n  it('isNumber()', function () {\n    assert.strictEqual(isNumber(null), false, 'Null test');\n    assert.strictEqual(isNumber(undefined), false, 'undefined test');\n    assert.strictEqual(isNumber('undefined'), false, 'string test');\n    assert.strictEqual(isNumber(16), true, 'actual number');\n    assert.strictEqual(isNumber(-1), true, 'a negative number is still a number');\n  });\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./tests/config+helpers.js\n// module id = 161\n// module chunks = 1","/* global describe:false, before:false, it:false */\n\nimport os from 'os';\nimport { bounds } from '../src/js/config';\nimport Martian from '../src/js/classes/martian';\nimport Robot from '../src/js/classes/martianRobot';\nimport { instruct, searchMars } from '../src/js/controller';\nimport { default as Store, lostList } from '../src/js/store';\n\nvar assert = require('chai').assert;\n\ndescribe('controller.js', function () {\n  before(function () {\n    bounds.x = 5;bounds.y = 3;\n  });\n\n  it('instruct()', function () {\n    var bot1 = new Robot('bot 1', 1, 1, 'E'); // instruct 1 1 E RFRFRFRF\n    var bot2 = new Robot('bot 2', 3, 2, 'N'); // instruct 3 2 N FRRFLLFFRRFLL\n    var bot3 = new Robot('bot 3', 0, 3, 'W'); // instruct 0 3 W LLFFFLFLFL\n    var aMartian = new Martian('aMartian', 3, 2, 'N'); // instruct -m 3 2 N FRRFLLFFRRFLLFFF\n\n    assert.strictEqual(instruct(bot1, 'RFRFRFRF').toString(), '1 1 E', 'Test: 1 1 E');\n    assert.strictEqual(instruct(bot2, 'FRRFLLFFRRFLL').toString(), '3 3 N LOST', 'Test: 3 2 N');\n    assert.strictEqual(lostList.find(function (point) {\n      return point === '3,3';\n    }), '3,3', 'confirm that the position of the lost robot is added to the list');\n    assert.isAtLeast(instruct(aMartian, 'FRRFLLFFRRFLLFFF').y, 3, \"Y coords should be greater than 3 which is where bot 2 was lost '3,3'\");\n    assert.strictEqual(lostList.find(function (point) {\n      return point === '3,3';\n    }), '3,3', 'confirm that the position of the lost robot is added to the list');\n    assert.strictEqual(instruct(bot3, 'LLFFFLFLFL').toString(), '2 3 S', 'Test: 0 3 W');\n  });\n\n  it('searchMars()', function () {\n    var a = instruct(new Robot('bot 1', 1, 1, 'E'), 'RFRFRFRFFFFFF');\n    var b = instruct(new Robot('bot 2', 3, 2, 'N'), 'FRRFLLFFRRFLL');\n    var c = instruct(new Robot('bot 3', 0, 3, 'W'), 'LLFFFLFLFL');\n    var m = instruct(new Martian('aMartian', 3, 2, 'N'), 'FRRFLLFFRRFLLFFF');\n    var mars = new Store();\n\n    mars.add(a, b, c, m);\n    // const marsArr = mars.getAll().values();\n\n    if (os.type() === 'Darwin') {\n      assert.deepEqual(searchMars(mars.getAll().values(), false, 'isAlive').array, ['🤖 5 1 ➡️ 🆘'], 'Show lost Robots.');\n      assert.deepEqual(searchMars(mars.getAll().values(), 'Robot').array, ['🤖 5 1 ➡️ 🆘', '🤖 3 2 ⬆️', '🤖 2 3 ⬇️'], 'Show all Robots.');\n      assert.deepEqual(searchMars(mars.getAll().values(), 'Martian').array, ['👾 3 6 ⬆️'], 'Show all Martians');\n    } else {\n      assert.deepEqual(searchMars(mars.getAll().values(), false, 'isAlive').array, ['Robot 5 1 E LOST'], 'Show lost Robots.');\n      assert.deepEqual(searchMars(mars.getAll().values(), 'Robot').array, ['Robot 5 1 E LOST', 'Robot 3 2 N', 'Robot 2 3 S'], 'Show all Robots.');\n      assert.deepEqual(searchMars(mars.getAll().values(), 'Martian').array, ['Martian 3 6 N'], 'Show all Martians');\n    }\n  });\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./tests/controller.js\n// module id = 162\n// module chunks = 1","/* global describe:false, before:false, it:false */\n\nimport { bounds } from '../src/js/config';\nimport Martian from '../src/js/classes/martian';\nimport Robot from '../src/js/classes/martianRobot';\n\nvar assert = require('chai').assert;\n\ndescribe('Martians & Robots', function () {\n  before(function () {\n    bounds.x = 5;bounds.y = 3;\n  });\n\n  it('Martians', function () {\n    var m = new Martian('', -1, 4, 'sw');\n    assert.isAbove(m.name.length, 0, \"Name can't be blank, should have been defaulted to Date.now().\");\n    try {\n      m.name = 'Byron';\n    } catch (e) {\n      console.log(e);\n    }\n    assert.notEqual(m.name, 'Byron', \"Can't set the name after initialization.\");\n\n    assert.strictEqual(m.x, 0, 'Negative values are invalid for initialization, defaults to zero.');\n    assert.strictEqual(m.y, 0, 'Values above the boundary are invalid for initialization, defaults to zero.');\n    assert.strictEqual(m.point, '0,0', 'Invalid x,y values defaults to zero.');\n\n    assert.strictEqual(m.orientation, 'N', 'Invalid orientations will be set to north on initialization.');\n    try {\n      m.orientation = 'se';\n    } catch (e) {\n      console.log(e);\n    }\n    assert.strictEqual(m.orientation, 'N', 'Invalid orientations will fail on assignment, thus leaving the previous value.');\n\n    assert.strictEqual(m.isAlive, true, 'Invalid live status will be set to true on initialization.');\n    try {\n      m.isAlive = 'fL';\n    } catch (e) {\n      console.log(e);\n    }\n    assert.strictEqual(m.isAlive, true, 'Invalid live status will fail on assignment, thus leaving the previous value.');\n  });\n\n  it('Robots', function () {\n    var r = new Robot(' ', 4, 2, 'E');\n    assert.isAbove(r.name.length, 0, \"Name can't be blank, should have been defaulted to Date.now().\");\n  });\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./tests/martians+robots.js\n// module id = 163\n// module chunks = 1","/* global describe:false, before:false, it:false */\n\nimport { bounds } from '../src/js/config';\nimport Martian from '../src/js/classes/martian';\nimport Robot from '../src/js/classes/martianRobot';\nimport { default as Store } from '../src/js/store';\n\nvar assert = require('chai').assert;\n\ndescribe('store.js', function () {\n  before(function () {\n    bounds.x = 5;bounds.y = 3;\n  });\n\n  it('Storage Methods', function () {\n    var a = new Robot('a', 1, 1, 'E');\n    var b = new Robot('b', 3, 2, 'N');\n    var c = new Robot('c', 0, 3, 'W');\n    var aM = new Martian('aM', 3, 2, 'N');\n\n    var mars = new Store();\n    assert.strictEqual(mars.getAll().size, 0, 'Should be zero since its just been made.');\n\n    assert.strictEqual(mars.add(a), 1, 'Should be 1 since we just added a robot.');\n    try {\n      assert.strictEqual(mars.add('a', 1, [2]), 1, 'Try to add something other than a robot or martian, should fail and return last size of 1.');\n    } catch (e) {\n      console.log(e);\n    }\n\n    assert.strictEqual(mars.add(b, c, aM), 4, 'Try to add multiple robots or martians, should succeed and return size 4.');\n    assert.strictEqual(mars.update(a), true, 'Return true if successfully updated.');\n    assert.strictEqual(mars.update('a'), false, \"Return false because it doesn't exist.\");\n    assert.strictEqual(mars.remove(b.name), true, 'Successfully removed');\n    assert.strictEqual(mars.get(b.name), undefined, 'We just deleted this so this should be undefined.');\n    assert.strictEqual(mars.getAll().size, 3, 'Should be 3 since we just tossed one.');\n  });\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./tests/store.js\n// module id = 164\n// module chunks = 1","/** @module helpers **/\n\n/**\n *\n * @param   {number} value\n * @returns {boolean} confirm this is a integer\n */\nexport function isNumber(value) {\n  if (/^(\\-|\\+)?([0-9]+|Infinity)$/.test(value)) {\n    return true;\n  }\n  return false;\n}\n\n/**\n *\n * @param   {number} value [[Description]]\n * @returns {boolean} confirm this is a positve number\n */\nexport function isPositiveNumber(value) {\n  if (isNumber(value) && value > 0) {\n    return true;\n  }\n  return false;\n}\n\n/**\n *\n * @param   {number} position to validate\n * @param   {[[Type]]} boundaries to validate position against\n * @returns {boolean}\n */\nexport function isPosSafe(pos, posBounds) {\n  if (pos < 0 || pos > Number.parseInt(posBounds, 10)) {\n    return false;\n  }\n  return true;\n}\n\nvar emoji = new Map();\nemoji.set('LOST', ['🆘', ':sos:']);\nemoji.set('N', ['⬆️', ':arrow_up:']);\nemoji.set('S', ['⬇️', ':arrow_down:']);\nemoji.set('E', ['➡️', ':arrow_right:']);\nemoji.set('W', ['⬅️', ':arrow_left:']);\nemoji.set('Martian', ['👾', ':space_invader:']);\nemoji.set('Robot', ['🤖', ':robot_face:']);\n\n/*\n * matcher for str.replace\n */\nexport function strToEmoji(match) {\n  return emoji.get(match)[0];\n}\n\n/**\n * Get emoji representation of being status\n * @param   {string} being status\n * @returns {string} transformed string\n */\nexport function beingAsEmoji(str) {\n  var regex = /N|S|E|W|(\\bLOST\\b)|(\\bMartian\\b)|(\\bRobot\\b)/g;\n  return '' + str.replace(regex, strToEmoji);\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/helpers.js\n// module id = 27\n// module chunks = 0 1","var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/** @module Martian */\n\nimport { isPositiveNumber } from '../helpers';\nimport { bounds } from '../config';\nimport CardinalPoints from './cardinalPoints';\n\nvar cp = new CardinalPoints();\n\n/**\n * defines a martian and its current state\n * a martian can move anywhere AFTER initialization\n */\n\nvar Martian = function () {\n  /**\n   *\n   * @param {string}   name        martian name: defaults to time string\n   * @param {number} x           martian x coordinate: default to zero\n   * @param {number} y           martian y coordinate: default to zero\n   * @param {string}   orientation\n   * martian orientation, must be a valid CardinalPoint or will default to north\n   * @param {boolean} isAlive     martian status, defaults to true\n   */\n  function Martian(name, x, y, orientation) {\n    _classCallCheck(this, Martian);\n\n    this._name = name.trim().length === 0 ? Date.now().toString() : name + '-' + Date.now();\n    this._x = isPositiveNumber(x) && x <= bounds.point.get('x') ? x : 0;\n    this._y = isPositiveNumber(y) && y <= bounds.point.get('y') ? y : 0;\n    this._orientation = cp.isValidPoint(orientation) ? orientation.toUpperCase() : 'N';\n  }\n\n  _createClass(Martian, [{\n    key: 'toString',\n\n\n    /**\n     *\n     * @param   {boolean} withType = false; include object type or nah?\n     * @returns {string} being string description\n     */\n    value: function toString() {\n      var withType = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n      var str = this._x + ' ' + this._y + ' ' + this._orientation + (this.isAlive ? '' : ' LOST');\n\n      if (withType) {\n        return this.type + ' ' + str;\n      }\n      return str;\n    }\n\n    /**\n     *\n     * @param {string} direction: sets new orientation based on L/R direction\n     */\n\n  }, {\n    key: 'turn',\n    value: function turn(direction) {\n      var degree = cp.getDegree(this._orientation);\n\n      if (direction.toUpperCase() === 'R') {\n        // when turning right make sure degree never becomes 360 since that value is not mapped\n        degree = degree === 270 ? 0 : degree + 90;\n      } else if (direction.toUpperCase() === 'L') {\n        // when turning left make sure degree never becomes 360 since that value is not mapped\n        degree = degree === 0 ? 270 : degree - 90;\n      }\n\n      // orientation is defined in cardinal points so lets go back to that instead of degrees\n      this.orientation = cp.getPointName(degree);\n    }\n\n    /**\n     * orientation determines which axis to increment/decrement along\n     */\n\n  }, {\n    key: 'move',\n    value: function move() {\n      switch (this._orientation) {\n        case 'N':\n          this._y += 1;\n          break;\n        case 'S':\n          this._y -= 1;\n          break;\n        case 'E':\n          this._x += 1;\n          break;\n        case 'W':\n          this._x -= 1;\n          break;\n        default:\n        // do nothing\n      }\n    }\n  }, {\n    key: 'name',\n    get: function get() {\n      return this._name;\n    }\n  }, {\n    key: 'x',\n    set: function set(value) {\n      this._x = value;\n    },\n    get: function get() {\n      return this._x;\n    }\n  }, {\n    key: 'y',\n    set: function set(value) {\n      this._y = value;\n    },\n    get: function get() {\n      return this._y;\n    }\n  }, {\n    key: 'orientation',\n    set: function set(value) {\n      if (cp.isValidPoint(value)) {\n        this._orientation = value.toUpperCase();\n      } else {\n        throw new Error('This orientation ' + value + ' is not supported.');\n      }\n    },\n    get: function get() {\n      return this._orientation;\n    }\n  }, {\n    key: 'isAlive',\n    get: function get() {\n      return true;\n    }\n  }, {\n    key: 'point',\n    get: function get() {\n      return this._x + ',' + this._y;\n    }\n  }, {\n    key: 'type',\n    get: function get() {\n      return 'Martian';\n    }\n  }]);\n\n  return Martian;\n}();\n\nexport default Martian;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/classes/martian.js\n// module id = 33\n// module chunks = 0 1","/*!\n * chai\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar used = []\n  , exports = module.exports = {};\n\n/*!\n * Chai version\n */\n\nexports.version = '3.5.0';\n\n/*!\n * Assertion Error\n */\n\nexports.AssertionError = require('assertion-error');\n\n/*!\n * Utils for plugins (not exported)\n */\n\nvar util = require('./chai/utils');\n\n/**\n * # .use(function)\n *\n * Provides a way to extend the internals of Chai\n *\n * @param {Function}\n * @returns {this} for chaining\n * @api public\n */\n\nexports.use = function (fn) {\n  if (!~used.indexOf(fn)) {\n    fn(this, util);\n    used.push(fn);\n  }\n\n  return this;\n};\n\n/*!\n * Utility Functions\n */\n\nexports.util = util;\n\n/*!\n * Configuration\n */\n\nvar config = require('./chai/config');\nexports.config = config;\n\n/*!\n * Primary `Assertion` prototype\n */\n\nvar assertion = require('./chai/assertion');\nexports.use(assertion);\n\n/*!\n * Core Assertions\n */\n\nvar core = require('./chai/core/assertions');\nexports.use(core);\n\n/*!\n * Expect interface\n */\n\nvar expect = require('./chai/interface/expect');\nexports.use(expect);\n\n/*!\n * Should interface\n */\n\nvar should = require('./chai/interface/should');\nexports.use(should);\n\n/*!\n * Assert interface\n */\n\nvar assert = require('./chai/interface/assert');\nexports.use(assert);\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chai/lib/chai.js\n// module id = 349\n// module chunks = 1","/*!\n * chai\n * http://chaijs.com\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar config = require('./config');\n\nmodule.exports = function (_chai, util) {\n  /*!\n   * Module dependencies.\n   */\n\n  var AssertionError = _chai.AssertionError\n    , flag = util.flag;\n\n  /*!\n   * Module export.\n   */\n\n  _chai.Assertion = Assertion;\n\n  /*!\n   * Assertion Constructor\n   *\n   * Creates object for chaining.\n   *\n   * @api private\n   */\n\n  function Assertion (obj, msg, stack) {\n    flag(this, 'ssfi', stack || arguments.callee);\n    flag(this, 'object', obj);\n    flag(this, 'message', msg);\n  }\n\n  Object.defineProperty(Assertion, 'includeStack', {\n    get: function() {\n      console.warn('Assertion.includeStack is deprecated, use chai.config.includeStack instead.');\n      return config.includeStack;\n    },\n    set: function(value) {\n      console.warn('Assertion.includeStack is deprecated, use chai.config.includeStack instead.');\n      config.includeStack = value;\n    }\n  });\n\n  Object.defineProperty(Assertion, 'showDiff', {\n    get: function() {\n      console.warn('Assertion.showDiff is deprecated, use chai.config.showDiff instead.');\n      return config.showDiff;\n    },\n    set: function(value) {\n      console.warn('Assertion.showDiff is deprecated, use chai.config.showDiff instead.');\n      config.showDiff = value;\n    }\n  });\n\n  Assertion.addProperty = function (name, fn) {\n    util.addProperty(this.prototype, name, fn);\n  };\n\n  Assertion.addMethod = function (name, fn) {\n    util.addMethod(this.prototype, name, fn);\n  };\n\n  Assertion.addChainableMethod = function (name, fn, chainingBehavior) {\n    util.addChainableMethod(this.prototype, name, fn, chainingBehavior);\n  };\n\n  Assertion.overwriteProperty = function (name, fn) {\n    util.overwriteProperty(this.prototype, name, fn);\n  };\n\n  Assertion.overwriteMethod = function (name, fn) {\n    util.overwriteMethod(this.prototype, name, fn);\n  };\n\n  Assertion.overwriteChainableMethod = function (name, fn, chainingBehavior) {\n    util.overwriteChainableMethod(this.prototype, name, fn, chainingBehavior);\n  };\n\n  /**\n   * ### .assert(expression, message, negateMessage, expected, actual, showDiff)\n   *\n   * Executes an expression and check expectations. Throws AssertionError for reporting if test doesn't pass.\n   *\n   * @name assert\n   * @param {Philosophical} expression to be tested\n   * @param {String|Function} message or function that returns message to display if expression fails\n   * @param {String|Function} negatedMessage or function that returns negatedMessage to display if negated expression fails\n   * @param {Mixed} expected value (remember to check for negation)\n   * @param {Mixed} actual (optional) will default to `this.obj`\n   * @param {Boolean} showDiff (optional) when set to `true`, assert will display a diff in addition to the message if expression fails\n   * @api private\n   */\n\n  Assertion.prototype.assert = function (expr, msg, negateMsg, expected, _actual, showDiff) {\n    var ok = util.test(this, arguments);\n    if (true !== showDiff) showDiff = false;\n    if (true !== config.showDiff) showDiff = false;\n\n    if (!ok) {\n      var msg = util.getMessage(this, arguments)\n        , actual = util.getActual(this, arguments);\n      throw new AssertionError(msg, {\n          actual: actual\n        , expected: expected\n        , showDiff: showDiff\n      }, (config.includeStack) ? this.assert : flag(this, 'ssfi'));\n    }\n  };\n\n  /*!\n   * ### ._obj\n   *\n   * Quick reference to stored `actual` value for plugin developers.\n   *\n   * @api private\n   */\n\n  Object.defineProperty(Assertion.prototype, '_obj',\n    { get: function () {\n        return flag(this, 'object');\n      }\n    , set: function (val) {\n        flag(this, 'object', val);\n      }\n  });\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chai/lib/chai/assertion.js\n// module id = 350\n// module chunks = 1","/*!\n * chai\n * http://chaijs.com\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nmodule.exports = function (chai, _) {\n  var Assertion = chai.Assertion\n    , toString = Object.prototype.toString\n    , flag = _.flag;\n\n  /**\n   * ### Language Chains\n   *\n   * The following are provided as chainable getters to\n   * improve the readability of your assertions. They\n   * do not provide testing capabilities unless they\n   * have been overwritten by a plugin.\n   *\n   * **Chains**\n   *\n   * - to\n   * - be\n   * - been\n   * - is\n   * - that\n   * - which\n   * - and\n   * - has\n   * - have\n   * - with\n   * - at\n   * - of\n   * - same\n   *\n   * @name language chains\n   * @namespace BDD\n   * @api public\n   */\n\n  [ 'to', 'be', 'been'\n  , 'is', 'and', 'has', 'have'\n  , 'with', 'that', 'which', 'at'\n  , 'of', 'same' ].forEach(function (chain) {\n    Assertion.addProperty(chain, function () {\n      return this;\n    });\n  });\n\n  /**\n   * ### .not\n   *\n   * Negates any of assertions following in the chain.\n   *\n   *     expect(foo).to.not.equal('bar');\n   *     expect(goodFn).to.not.throw(Error);\n   *     expect({ foo: 'baz' }).to.have.property('foo')\n   *       .and.not.equal('bar');\n   *\n   * @name not\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('not', function () {\n    flag(this, 'negate', true);\n  });\n\n  /**\n   * ### .deep\n   *\n   * Sets the `deep` flag, later used by the `equal` and\n   * `property` assertions.\n   *\n   *     expect(foo).to.deep.equal({ bar: 'baz' });\n   *     expect({ foo: { bar: { baz: 'quux' } } })\n   *       .to.have.deep.property('foo.bar.baz', 'quux');\n   *\n   * `.deep.property` special characters can be escaped\n   * by adding two slashes before the `.` or `[]`.\n   *\n   *     var deepCss = { '.link': { '[target]': 42 }};\n   *     expect(deepCss).to.have.deep.property('\\\\.link.\\\\[target\\\\]', 42);\n   *\n   * @name deep\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('deep', function () {\n    flag(this, 'deep', true);\n  });\n\n  /**\n   * ### .any\n   *\n   * Sets the `any` flag, (opposite of the `all` flag)\n   * later used in the `keys` assertion.\n   *\n   *     expect(foo).to.have.any.keys('bar', 'baz');\n   *\n   * @name any\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('any', function () {\n    flag(this, 'any', true);\n    flag(this, 'all', false)\n  });\n\n\n  /**\n   * ### .all\n   *\n   * Sets the `all` flag (opposite of the `any` flag)\n   * later used by the `keys` assertion.\n   *\n   *     expect(foo).to.have.all.keys('bar', 'baz');\n   *\n   * @name all\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('all', function () {\n    flag(this, 'all', true);\n    flag(this, 'any', false);\n  });\n\n  /**\n   * ### .a(type)\n   *\n   * The `a` and `an` assertions are aliases that can be\n   * used either as language chains or to assert a value's\n   * type.\n   *\n   *     // typeof\n   *     expect('test').to.be.a('string');\n   *     expect({ foo: 'bar' }).to.be.an('object');\n   *     expect(null).to.be.a('null');\n   *     expect(undefined).to.be.an('undefined');\n   *     expect(new Error).to.be.an('error');\n   *     expect(new Promise).to.be.a('promise');\n   *     expect(new Float32Array()).to.be.a('float32array');\n   *     expect(Symbol()).to.be.a('symbol');\n   *\n   *     // es6 overrides\n   *     expect({[Symbol.toStringTag]:()=>'foo'}).to.be.a('foo');\n   *\n   *     // language chain\n   *     expect(foo).to.be.an.instanceof(Foo);\n   *\n   * @name a\n   * @alias an\n   * @param {String} type\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function an (type, msg) {\n    if (msg) flag(this, 'message', msg);\n    type = type.toLowerCase();\n    var obj = flag(this, 'object')\n      , article = ~[ 'a', 'e', 'i', 'o', 'u' ].indexOf(type.charAt(0)) ? 'an ' : 'a ';\n\n    this.assert(\n        type === _.type(obj)\n      , 'expected #{this} to be ' + article + type\n      , 'expected #{this} not to be ' + article + type\n    );\n  }\n\n  Assertion.addChainableMethod('an', an);\n  Assertion.addChainableMethod('a', an);\n\n  /**\n   * ### .include(value)\n   *\n   * The `include` and `contain` assertions can be used as either property\n   * based language chains or as methods to assert the inclusion of an object\n   * in an array or a substring in a string. When used as language chains,\n   * they toggle the `contains` flag for the `keys` assertion.\n   *\n   *     expect([1,2,3]).to.include(2);\n   *     expect('foobar').to.contain('foo');\n   *     expect({ foo: 'bar', hello: 'universe' }).to.include.keys('foo');\n   *\n   * @name include\n   * @alias contain\n   * @alias includes\n   * @alias contains\n   * @param {Object|String|Number} obj\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function includeChainingBehavior () {\n    flag(this, 'contains', true);\n  }\n\n  function include (val, msg) {\n    _.expectTypes(this, ['array', 'object', 'string']);\n\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    var expected = false;\n\n    if (_.type(obj) === 'array' && _.type(val) === 'object') {\n      for (var i in obj) {\n        if (_.eql(obj[i], val)) {\n          expected = true;\n          break;\n        }\n      }\n    } else if (_.type(val) === 'object') {\n      if (!flag(this, 'negate')) {\n        for (var k in val) new Assertion(obj).property(k, val[k]);\n        return;\n      }\n      var subset = {};\n      for (var k in val) subset[k] = obj[k];\n      expected = _.eql(subset, val);\n    } else {\n      expected = (obj != undefined) && ~obj.indexOf(val);\n    }\n    this.assert(\n        expected\n      , 'expected #{this} to include ' + _.inspect(val)\n      , 'expected #{this} to not include ' + _.inspect(val));\n  }\n\n  Assertion.addChainableMethod('include', include, includeChainingBehavior);\n  Assertion.addChainableMethod('contain', include, includeChainingBehavior);\n  Assertion.addChainableMethod('contains', include, includeChainingBehavior);\n  Assertion.addChainableMethod('includes', include, includeChainingBehavior);\n\n  /**\n   * ### .ok\n   *\n   * Asserts that the target is truthy.\n   *\n   *     expect('everything').to.be.ok;\n   *     expect(1).to.be.ok;\n   *     expect(false).to.not.be.ok;\n   *     expect(undefined).to.not.be.ok;\n   *     expect(null).to.not.be.ok;\n   *\n   * @name ok\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('ok', function () {\n    this.assert(\n        flag(this, 'object')\n      , 'expected #{this} to be truthy'\n      , 'expected #{this} to be falsy');\n  });\n\n  /**\n   * ### .true\n   *\n   * Asserts that the target is `true`.\n   *\n   *     expect(true).to.be.true;\n   *     expect(1).to.not.be.true;\n   *\n   * @name true\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('true', function () {\n    this.assert(\n        true === flag(this, 'object')\n      , 'expected #{this} to be true'\n      , 'expected #{this} to be false'\n      , this.negate ? false : true\n    );\n  });\n\n  /**\n   * ### .false\n   *\n   * Asserts that the target is `false`.\n   *\n   *     expect(false).to.be.false;\n   *     expect(0).to.not.be.false;\n   *\n   * @name false\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('false', function () {\n    this.assert(\n        false === flag(this, 'object')\n      , 'expected #{this} to be false'\n      , 'expected #{this} to be true'\n      , this.negate ? true : false\n    );\n  });\n\n  /**\n   * ### .null\n   *\n   * Asserts that the target is `null`.\n   *\n   *     expect(null).to.be.null;\n   *     expect(undefined).to.not.be.null;\n   *\n   * @name null\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('null', function () {\n    this.assert(\n        null === flag(this, 'object')\n      , 'expected #{this} to be null'\n      , 'expected #{this} not to be null'\n    );\n  });\n\n  /**\n   * ### .undefined\n   *\n   * Asserts that the target is `undefined`.\n   *\n   *     expect(undefined).to.be.undefined;\n   *     expect(null).to.not.be.undefined;\n   *\n   * @name undefined\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('undefined', function () {\n    this.assert(\n        undefined === flag(this, 'object')\n      , 'expected #{this} to be undefined'\n      , 'expected #{this} not to be undefined'\n    );\n  });\n\n  /**\n   * ### .NaN\n   * Asserts that the target is `NaN`.\n   *\n   *     expect('foo').to.be.NaN;\n   *     expect(4).not.to.be.NaN;\n   *\n   * @name NaN\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('NaN', function () {\n    this.assert(\n        isNaN(flag(this, 'object'))\n        , 'expected #{this} to be NaN'\n        , 'expected #{this} not to be NaN'\n    );\n  });\n\n  /**\n   * ### .exist\n   *\n   * Asserts that the target is neither `null` nor `undefined`.\n   *\n   *     var foo = 'hi'\n   *       , bar = null\n   *       , baz;\n   *\n   *     expect(foo).to.exist;\n   *     expect(bar).to.not.exist;\n   *     expect(baz).to.not.exist;\n   *\n   * @name exist\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('exist', function () {\n    this.assert(\n        null != flag(this, 'object')\n      , 'expected #{this} to exist'\n      , 'expected #{this} to not exist'\n    );\n  });\n\n\n  /**\n   * ### .empty\n   *\n   * Asserts that the target's length is `0`. For arrays and strings, it checks\n   * the `length` property. For objects, it gets the count of\n   * enumerable keys.\n   *\n   *     expect([]).to.be.empty;\n   *     expect('').to.be.empty;\n   *     expect({}).to.be.empty;\n   *\n   * @name empty\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('empty', function () {\n    var obj = flag(this, 'object')\n      , expected = obj;\n\n    if (Array.isArray(obj) || 'string' === typeof object) {\n      expected = obj.length;\n    } else if (typeof obj === 'object') {\n      expected = Object.keys(obj).length;\n    }\n\n    this.assert(\n        !expected\n      , 'expected #{this} to be empty'\n      , 'expected #{this} not to be empty'\n    );\n  });\n\n  /**\n   * ### .arguments\n   *\n   * Asserts that the target is an arguments object.\n   *\n   *     function test () {\n   *       expect(arguments).to.be.arguments;\n   *     }\n   *\n   * @name arguments\n   * @alias Arguments\n   * @namespace BDD\n   * @api public\n   */\n\n  function checkArguments () {\n    var obj = flag(this, 'object')\n      , type = Object.prototype.toString.call(obj);\n    this.assert(\n        '[object Arguments]' === type\n      , 'expected #{this} to be arguments but got ' + type\n      , 'expected #{this} to not be arguments'\n    );\n  }\n\n  Assertion.addProperty('arguments', checkArguments);\n  Assertion.addProperty('Arguments', checkArguments);\n\n  /**\n   * ### .equal(value)\n   *\n   * Asserts that the target is strictly equal (`===`) to `value`.\n   * Alternately, if the `deep` flag is set, asserts that\n   * the target is deeply equal to `value`.\n   *\n   *     expect('hello').to.equal('hello');\n   *     expect(42).to.equal(42);\n   *     expect(1).to.not.equal(true);\n   *     expect({ foo: 'bar' }).to.not.equal({ foo: 'bar' });\n   *     expect({ foo: 'bar' }).to.deep.equal({ foo: 'bar' });\n   *\n   * @name equal\n   * @alias equals\n   * @alias eq\n   * @alias deep.equal\n   * @param {Mixed} value\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertEqual (val, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    if (flag(this, 'deep')) {\n      return this.eql(val);\n    } else {\n      this.assert(\n          val === obj\n        , 'expected #{this} to equal #{exp}'\n        , 'expected #{this} to not equal #{exp}'\n        , val\n        , this._obj\n        , true\n      );\n    }\n  }\n\n  Assertion.addMethod('equal', assertEqual);\n  Assertion.addMethod('equals', assertEqual);\n  Assertion.addMethod('eq', assertEqual);\n\n  /**\n   * ### .eql(value)\n   *\n   * Asserts that the target is deeply equal to `value`.\n   *\n   *     expect({ foo: 'bar' }).to.eql({ foo: 'bar' });\n   *     expect([ 1, 2, 3 ]).to.eql([ 1, 2, 3 ]);\n   *\n   * @name eql\n   * @alias eqls\n   * @param {Mixed} value\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertEql(obj, msg) {\n    if (msg) flag(this, 'message', msg);\n    this.assert(\n        _.eql(obj, flag(this, 'object'))\n      , 'expected #{this} to deeply equal #{exp}'\n      , 'expected #{this} to not deeply equal #{exp}'\n      , obj\n      , this._obj\n      , true\n    );\n  }\n\n  Assertion.addMethod('eql', assertEql);\n  Assertion.addMethod('eqls', assertEql);\n\n  /**\n   * ### .above(value)\n   *\n   * Asserts that the target is greater than `value`.\n   *\n   *     expect(10).to.be.above(5);\n   *\n   * Can also be used in conjunction with `length` to\n   * assert a minimum length. The benefit being a\n   * more informative error message than if the length\n   * was supplied directly.\n   *\n   *     expect('foo').to.have.length.above(2);\n   *     expect([ 1, 2, 3 ]).to.have.length.above(2);\n   *\n   * @name above\n   * @alias gt\n   * @alias greaterThan\n   * @param {Number} value\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertAbove (n, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    if (flag(this, 'doLength')) {\n      new Assertion(obj, msg).to.have.property('length');\n      var len = obj.length;\n      this.assert(\n          len > n\n        , 'expected #{this} to have a length above #{exp} but got #{act}'\n        , 'expected #{this} to not have a length above #{exp}'\n        , n\n        , len\n      );\n    } else {\n      this.assert(\n          obj > n\n        , 'expected #{this} to be above ' + n\n        , 'expected #{this} to be at most ' + n\n      );\n    }\n  }\n\n  Assertion.addMethod('above', assertAbove);\n  Assertion.addMethod('gt', assertAbove);\n  Assertion.addMethod('greaterThan', assertAbove);\n\n  /**\n   * ### .least(value)\n   *\n   * Asserts that the target is greater than or equal to `value`.\n   *\n   *     expect(10).to.be.at.least(10);\n   *\n   * Can also be used in conjunction with `length` to\n   * assert a minimum length. The benefit being a\n   * more informative error message than if the length\n   * was supplied directly.\n   *\n   *     expect('foo').to.have.length.of.at.least(2);\n   *     expect([ 1, 2, 3 ]).to.have.length.of.at.least(3);\n   *\n   * @name least\n   * @alias gte\n   * @param {Number} value\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertLeast (n, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    if (flag(this, 'doLength')) {\n      new Assertion(obj, msg).to.have.property('length');\n      var len = obj.length;\n      this.assert(\n          len >= n\n        , 'expected #{this} to have a length at least #{exp} but got #{act}'\n        , 'expected #{this} to have a length below #{exp}'\n        , n\n        , len\n      );\n    } else {\n      this.assert(\n          obj >= n\n        , 'expected #{this} to be at least ' + n\n        , 'expected #{this} to be below ' + n\n      );\n    }\n  }\n\n  Assertion.addMethod('least', assertLeast);\n  Assertion.addMethod('gte', assertLeast);\n\n  /**\n   * ### .below(value)\n   *\n   * Asserts that the target is less than `value`.\n   *\n   *     expect(5).to.be.below(10);\n   *\n   * Can also be used in conjunction with `length` to\n   * assert a maximum length. The benefit being a\n   * more informative error message than if the length\n   * was supplied directly.\n   *\n   *     expect('foo').to.have.length.below(4);\n   *     expect([ 1, 2, 3 ]).to.have.length.below(4);\n   *\n   * @name below\n   * @alias lt\n   * @alias lessThan\n   * @param {Number} value\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertBelow (n, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    if (flag(this, 'doLength')) {\n      new Assertion(obj, msg).to.have.property('length');\n      var len = obj.length;\n      this.assert(\n          len < n\n        , 'expected #{this} to have a length below #{exp} but got #{act}'\n        , 'expected #{this} to not have a length below #{exp}'\n        , n\n        , len\n      );\n    } else {\n      this.assert(\n          obj < n\n        , 'expected #{this} to be below ' + n\n        , 'expected #{this} to be at least ' + n\n      );\n    }\n  }\n\n  Assertion.addMethod('below', assertBelow);\n  Assertion.addMethod('lt', assertBelow);\n  Assertion.addMethod('lessThan', assertBelow);\n\n  /**\n   * ### .most(value)\n   *\n   * Asserts that the target is less than or equal to `value`.\n   *\n   *     expect(5).to.be.at.most(5);\n   *\n   * Can also be used in conjunction with `length` to\n   * assert a maximum length. The benefit being a\n   * more informative error message than if the length\n   * was supplied directly.\n   *\n   *     expect('foo').to.have.length.of.at.most(4);\n   *     expect([ 1, 2, 3 ]).to.have.length.of.at.most(3);\n   *\n   * @name most\n   * @alias lte\n   * @param {Number} value\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertMost (n, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    if (flag(this, 'doLength')) {\n      new Assertion(obj, msg).to.have.property('length');\n      var len = obj.length;\n      this.assert(\n          len <= n\n        , 'expected #{this} to have a length at most #{exp} but got #{act}'\n        , 'expected #{this} to have a length above #{exp}'\n        , n\n        , len\n      );\n    } else {\n      this.assert(\n          obj <= n\n        , 'expected #{this} to be at most ' + n\n        , 'expected #{this} to be above ' + n\n      );\n    }\n  }\n\n  Assertion.addMethod('most', assertMost);\n  Assertion.addMethod('lte', assertMost);\n\n  /**\n   * ### .within(start, finish)\n   *\n   * Asserts that the target is within a range.\n   *\n   *     expect(7).to.be.within(5,10);\n   *\n   * Can also be used in conjunction with `length` to\n   * assert a length range. The benefit being a\n   * more informative error message than if the length\n   * was supplied directly.\n   *\n   *     expect('foo').to.have.length.within(2,4);\n   *     expect([ 1, 2, 3 ]).to.have.length.within(2,4);\n   *\n   * @name within\n   * @param {Number} start lowerbound inclusive\n   * @param {Number} finish upperbound inclusive\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addMethod('within', function (start, finish, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , range = start + '..' + finish;\n    if (flag(this, 'doLength')) {\n      new Assertion(obj, msg).to.have.property('length');\n      var len = obj.length;\n      this.assert(\n          len >= start && len <= finish\n        , 'expected #{this} to have a length within ' + range\n        , 'expected #{this} to not have a length within ' + range\n      );\n    } else {\n      this.assert(\n          obj >= start && obj <= finish\n        , 'expected #{this} to be within ' + range\n        , 'expected #{this} to not be within ' + range\n      );\n    }\n  });\n\n  /**\n   * ### .instanceof(constructor)\n   *\n   * Asserts that the target is an instance of `constructor`.\n   *\n   *     var Tea = function (name) { this.name = name; }\n   *       , Chai = new Tea('chai');\n   *\n   *     expect(Chai).to.be.an.instanceof(Tea);\n   *     expect([ 1, 2, 3 ]).to.be.instanceof(Array);\n   *\n   * @name instanceof\n   * @param {Constructor} constructor\n   * @param {String} message _optional_\n   * @alias instanceOf\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertInstanceOf (constructor, msg) {\n    if (msg) flag(this, 'message', msg);\n    var name = _.getName(constructor);\n    this.assert(\n        flag(this, 'object') instanceof constructor\n      , 'expected #{this} to be an instance of ' + name\n      , 'expected #{this} to not be an instance of ' + name\n    );\n  };\n\n  Assertion.addMethod('instanceof', assertInstanceOf);\n  Assertion.addMethod('instanceOf', assertInstanceOf);\n\n  /**\n   * ### .property(name, [value])\n   *\n   * Asserts that the target has a property `name`, optionally asserting that\n   * the value of that property is strictly equal to  `value`.\n   * If the `deep` flag is set, you can use dot- and bracket-notation for deep\n   * references into objects and arrays.\n   *\n   *     // simple referencing\n   *     var obj = { foo: 'bar' };\n   *     expect(obj).to.have.property('foo');\n   *     expect(obj).to.have.property('foo', 'bar');\n   *\n   *     // deep referencing\n   *     var deepObj = {\n   *         green: { tea: 'matcha' }\n   *       , teas: [ 'chai', 'matcha', { tea: 'konacha' } ]\n   *     };\n   *\n   *     expect(deepObj).to.have.deep.property('green.tea', 'matcha');\n   *     expect(deepObj).to.have.deep.property('teas[1]', 'matcha');\n   *     expect(deepObj).to.have.deep.property('teas[2].tea', 'konacha');\n   *\n   * You can also use an array as the starting point of a `deep.property`\n   * assertion, or traverse nested arrays.\n   *\n   *     var arr = [\n   *         [ 'chai', 'matcha', 'konacha' ]\n   *       , [ { tea: 'chai' }\n   *         , { tea: 'matcha' }\n   *         , { tea: 'konacha' } ]\n   *     ];\n   *\n   *     expect(arr).to.have.deep.property('[0][1]', 'matcha');\n   *     expect(arr).to.have.deep.property('[1][2].tea', 'konacha');\n   *\n   * Furthermore, `property` changes the subject of the assertion\n   * to be the value of that property from the original object. This\n   * permits for further chainable assertions on that property.\n   *\n   *     expect(obj).to.have.property('foo')\n   *       .that.is.a('string');\n   *     expect(deepObj).to.have.property('green')\n   *       .that.is.an('object')\n   *       .that.deep.equals({ tea: 'matcha' });\n   *     expect(deepObj).to.have.property('teas')\n   *       .that.is.an('array')\n   *       .with.deep.property('[2]')\n   *         .that.deep.equals({ tea: 'konacha' });\n   *\n   * Note that dots and bracket in `name` must be backslash-escaped when\n   * the `deep` flag is set, while they must NOT be escaped when the `deep`\n   * flag is not set.\n   *\n   *     // simple referencing\n   *     var css = { '.link[target]': 42 };\n   *     expect(css).to.have.property('.link[target]', 42);\n   *\n   *     // deep referencing\n   *     var deepCss = { '.link': { '[target]': 42 }};\n   *     expect(deepCss).to.have.deep.property('\\\\.link.\\\\[target\\\\]', 42);\n   *\n   * @name property\n   * @alias deep.property\n   * @param {String} name\n   * @param {Mixed} value (optional)\n   * @param {String} message _optional_\n   * @returns value of property for chaining\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addMethod('property', function (name, val, msg) {\n    if (msg) flag(this, 'message', msg);\n\n    var isDeep = !!flag(this, 'deep')\n      , descriptor = isDeep ? 'deep property ' : 'property '\n      , negate = flag(this, 'negate')\n      , obj = flag(this, 'object')\n      , pathInfo = isDeep ? _.getPathInfo(name, obj) : null\n      , hasProperty = isDeep\n        ? pathInfo.exists\n        : _.hasProperty(name, obj)\n      , value = isDeep\n        ? pathInfo.value\n        : obj[name];\n\n    if (negate && arguments.length > 1) {\n      if (undefined === value) {\n        msg = (msg != null) ? msg + ': ' : '';\n        throw new Error(msg + _.inspect(obj) + ' has no ' + descriptor + _.inspect(name));\n      }\n    } else {\n      this.assert(\n          hasProperty\n        , 'expected #{this} to have a ' + descriptor + _.inspect(name)\n        , 'expected #{this} to not have ' + descriptor + _.inspect(name));\n    }\n\n    if (arguments.length > 1) {\n      this.assert(\n          val === value\n        , 'expected #{this} to have a ' + descriptor + _.inspect(name) + ' of #{exp}, but got #{act}'\n        , 'expected #{this} to not have a ' + descriptor + _.inspect(name) + ' of #{act}'\n        , val\n        , value\n      );\n    }\n\n    flag(this, 'object', value);\n  });\n\n\n  /**\n   * ### .ownProperty(name)\n   *\n   * Asserts that the target has an own property `name`.\n   *\n   *     expect('test').to.have.ownProperty('length');\n   *\n   * @name ownProperty\n   * @alias haveOwnProperty\n   * @param {String} name\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertOwnProperty (name, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    this.assert(\n        obj.hasOwnProperty(name)\n      , 'expected #{this} to have own property ' + _.inspect(name)\n      , 'expected #{this} to not have own property ' + _.inspect(name)\n    );\n  }\n\n  Assertion.addMethod('ownProperty', assertOwnProperty);\n  Assertion.addMethod('haveOwnProperty', assertOwnProperty);\n\n  /**\n   * ### .ownPropertyDescriptor(name[, descriptor[, message]])\n   *\n   * Asserts that the target has an own property descriptor `name`, that optionally matches `descriptor`.\n   *\n   *     expect('test').to.have.ownPropertyDescriptor('length');\n   *     expect('test').to.have.ownPropertyDescriptor('length', { enumerable: false, configurable: false, writable: false, value: 4 });\n   *     expect('test').not.to.have.ownPropertyDescriptor('length', { enumerable: false, configurable: false, writable: false, value: 3 });\n   *     expect('test').ownPropertyDescriptor('length').to.have.property('enumerable', false);\n   *     expect('test').ownPropertyDescriptor('length').to.have.keys('value');\n   *\n   * @name ownPropertyDescriptor\n   * @alias haveOwnPropertyDescriptor\n   * @param {String} name\n   * @param {Object} descriptor _optional_\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertOwnPropertyDescriptor (name, descriptor, msg) {\n    if (typeof descriptor === 'string') {\n      msg = descriptor;\n      descriptor = null;\n    }\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    var actualDescriptor = Object.getOwnPropertyDescriptor(Object(obj), name);\n    if (actualDescriptor && descriptor) {\n      this.assert(\n          _.eql(descriptor, actualDescriptor)\n        , 'expected the own property descriptor for ' + _.inspect(name) + ' on #{this} to match ' + _.inspect(descriptor) + ', got ' + _.inspect(actualDescriptor)\n        , 'expected the own property descriptor for ' + _.inspect(name) + ' on #{this} to not match ' + _.inspect(descriptor)\n        , descriptor\n        , actualDescriptor\n        , true\n      );\n    } else {\n      this.assert(\n          actualDescriptor\n        , 'expected #{this} to have an own property descriptor for ' + _.inspect(name)\n        , 'expected #{this} to not have an own property descriptor for ' + _.inspect(name)\n      );\n    }\n    flag(this, 'object', actualDescriptor);\n  }\n\n  Assertion.addMethod('ownPropertyDescriptor', assertOwnPropertyDescriptor);\n  Assertion.addMethod('haveOwnPropertyDescriptor', assertOwnPropertyDescriptor);\n\n  /**\n   * ### .length\n   *\n   * Sets the `doLength` flag later used as a chain precursor to a value\n   * comparison for the `length` property.\n   *\n   *     expect('foo').to.have.length.above(2);\n   *     expect([ 1, 2, 3 ]).to.have.length.above(2);\n   *     expect('foo').to.have.length.below(4);\n   *     expect([ 1, 2, 3 ]).to.have.length.below(4);\n   *     expect('foo').to.have.length.within(2,4);\n   *     expect([ 1, 2, 3 ]).to.have.length.within(2,4);\n   *\n   * *Deprecation notice:* Using `length` as an assertion will be deprecated\n   * in version 2.4.0 and removed in 3.0.0. Code using the old style of\n   * asserting for `length` property value using `length(value)` should be\n   * switched to use `lengthOf(value)` instead.\n   *\n   * @name length\n   * @namespace BDD\n   * @api public\n   */\n\n  /**\n   * ### .lengthOf(value[, message])\n   *\n   * Asserts that the target's `length` property has\n   * the expected value.\n   *\n   *     expect([ 1, 2, 3]).to.have.lengthOf(3);\n   *     expect('foobar').to.have.lengthOf(6);\n   *\n   * @name lengthOf\n   * @param {Number} length\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertLengthChain () {\n    flag(this, 'doLength', true);\n  }\n\n  function assertLength (n, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    new Assertion(obj, msg).to.have.property('length');\n    var len = obj.length;\n\n    this.assert(\n        len == n\n      , 'expected #{this} to have a length of #{exp} but got #{act}'\n      , 'expected #{this} to not have a length of #{act}'\n      , n\n      , len\n    );\n  }\n\n  Assertion.addChainableMethod('length', assertLength, assertLengthChain);\n  Assertion.addMethod('lengthOf', assertLength);\n\n  /**\n   * ### .match(regexp)\n   *\n   * Asserts that the target matches a regular expression.\n   *\n   *     expect('foobar').to.match(/^foo/);\n   *\n   * @name match\n   * @alias matches\n   * @param {RegExp} RegularExpression\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n  function assertMatch(re, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    this.assert(\n        re.exec(obj)\n      , 'expected #{this} to match ' + re\n      , 'expected #{this} not to match ' + re\n    );\n  }\n\n  Assertion.addMethod('match', assertMatch);\n  Assertion.addMethod('matches', assertMatch);\n\n  /**\n   * ### .string(string)\n   *\n   * Asserts that the string target contains another string.\n   *\n   *     expect('foobar').to.have.string('bar');\n   *\n   * @name string\n   * @param {String} string\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addMethod('string', function (str, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    new Assertion(obj, msg).is.a('string');\n\n    this.assert(\n        ~obj.indexOf(str)\n      , 'expected #{this} to contain ' + _.inspect(str)\n      , 'expected #{this} to not contain ' + _.inspect(str)\n    );\n  });\n\n\n  /**\n   * ### .keys(key1, [key2], [...])\n   *\n   * Asserts that the target contains any or all of the passed-in keys.\n   * Use in combination with `any`, `all`, `contains`, or `have` will affect\n   * what will pass.\n   *\n   * When used in conjunction with `any`, at least one key that is passed\n   * in must exist in the target object. This is regardless whether or not\n   * the `have` or `contain` qualifiers are used. Note, either `any` or `all`\n   * should be used in the assertion. If neither are used, the assertion is\n   * defaulted to `all`.\n   *\n   * When both `all` and `contain` are used, the target object must have at\n   * least all of the passed-in keys but may have more keys not listed.\n   *\n   * When both `all` and `have` are used, the target object must both contain\n   * all of the passed-in keys AND the number of keys in the target object must\n   * match the number of keys passed in (in other words, a target object must\n   * have all and only all of the passed-in keys).\n   *\n   *     expect({ foo: 1, bar: 2 }).to.have.any.keys('foo', 'baz');\n   *     expect({ foo: 1, bar: 2 }).to.have.any.keys('foo');\n   *     expect({ foo: 1, bar: 2 }).to.contain.any.keys('bar', 'baz');\n   *     expect({ foo: 1, bar: 2 }).to.contain.any.keys(['foo']);\n   *     expect({ foo: 1, bar: 2 }).to.contain.any.keys({'foo': 6});\n   *     expect({ foo: 1, bar: 2 }).to.have.all.keys(['bar', 'foo']);\n   *     expect({ foo: 1, bar: 2 }).to.have.all.keys({'bar': 6, 'foo': 7});\n   *     expect({ foo: 1, bar: 2, baz: 3 }).to.contain.all.keys(['bar', 'foo']);\n   *     expect({ foo: 1, bar: 2, baz: 3 }).to.contain.all.keys({'bar': 6});\n   *\n   *\n   * @name keys\n   * @alias key\n   * @param {...String|Array|Object} keys\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertKeys (keys) {\n    var obj = flag(this, 'object')\n      , str\n      , ok = true\n      , mixedArgsMsg = 'keys must be given single argument of Array|Object|String, or multiple String arguments';\n\n    switch (_.type(keys)) {\n      case \"array\":\n        if (arguments.length > 1) throw (new Error(mixedArgsMsg));\n        break;\n      case \"object\":\n        if (arguments.length > 1) throw (new Error(mixedArgsMsg));\n        keys = Object.keys(keys);\n        break;\n      default:\n        keys = Array.prototype.slice.call(arguments);\n    }\n\n    if (!keys.length) throw new Error('keys required');\n\n    var actual = Object.keys(obj)\n      , expected = keys\n      , len = keys.length\n      , any = flag(this, 'any')\n      , all = flag(this, 'all');\n\n    if (!any && !all) {\n      all = true;\n    }\n\n    // Has any\n    if (any) {\n      var intersection = expected.filter(function(key) {\n        return ~actual.indexOf(key);\n      });\n      ok = intersection.length > 0;\n    }\n\n    // Has all\n    if (all) {\n      ok = keys.every(function(key){\n        return ~actual.indexOf(key);\n      });\n      if (!flag(this, 'negate') && !flag(this, 'contains')) {\n        ok = ok && keys.length == actual.length;\n      }\n    }\n\n    // Key string\n    if (len > 1) {\n      keys = keys.map(function(key){\n        return _.inspect(key);\n      });\n      var last = keys.pop();\n      if (all) {\n        str = keys.join(', ') + ', and ' + last;\n      }\n      if (any) {\n        str = keys.join(', ') + ', or ' + last;\n      }\n    } else {\n      str = _.inspect(keys[0]);\n    }\n\n    // Form\n    str = (len > 1 ? 'keys ' : 'key ') + str;\n\n    // Have / include\n    str = (flag(this, 'contains') ? 'contain ' : 'have ') + str;\n\n    // Assertion\n    this.assert(\n        ok\n      , 'expected #{this} to ' + str\n      , 'expected #{this} to not ' + str\n      , expected.slice(0).sort()\n      , actual.sort()\n      , true\n    );\n  }\n\n  Assertion.addMethod('keys', assertKeys);\n  Assertion.addMethod('key', assertKeys);\n\n  /**\n   * ### .throw(constructor)\n   *\n   * Asserts that the function target will throw a specific error, or specific type of error\n   * (as determined using `instanceof`), optionally with a RegExp or string inclusion test\n   * for the error's message.\n   *\n   *     var err = new ReferenceError('This is a bad function.');\n   *     var fn = function () { throw err; }\n   *     expect(fn).to.throw(ReferenceError);\n   *     expect(fn).to.throw(Error);\n   *     expect(fn).to.throw(/bad function/);\n   *     expect(fn).to.not.throw('good function');\n   *     expect(fn).to.throw(ReferenceError, /bad function/);\n   *     expect(fn).to.throw(err);\n   *\n   * Please note that when a throw expectation is negated, it will check each\n   * parameter independently, starting with error constructor type. The appropriate way\n   * to check for the existence of a type of error but for a message that does not match\n   * is to use `and`.\n   *\n   *     expect(fn).to.throw(ReferenceError)\n   *        .and.not.throw(/good function/);\n   *\n   * @name throw\n   * @alias throws\n   * @alias Throw\n   * @param {ErrorConstructor} constructor\n   * @param {String|RegExp} expected error message\n   * @param {String} message _optional_\n   * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\n   * @returns error for chaining (null if no error)\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertThrows (constructor, errMsg, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    new Assertion(obj, msg).is.a('function');\n\n    var thrown = false\n      , desiredError = null\n      , name = null\n      , thrownError = null;\n\n    if (arguments.length === 0) {\n      errMsg = null;\n      constructor = null;\n    } else if (constructor && (constructor instanceof RegExp || 'string' === typeof constructor)) {\n      errMsg = constructor;\n      constructor = null;\n    } else if (constructor && constructor instanceof Error) {\n      desiredError = constructor;\n      constructor = null;\n      errMsg = null;\n    } else if (typeof constructor === 'function') {\n      name = constructor.prototype.name;\n      if (!name || (name === 'Error' && constructor !== Error)) {\n        name = constructor.name || (new constructor()).name;\n      }\n    } else {\n      constructor = null;\n    }\n\n    try {\n      obj();\n    } catch (err) {\n      // first, check desired error\n      if (desiredError) {\n        this.assert(\n            err === desiredError\n          , 'expected #{this} to throw #{exp} but #{act} was thrown'\n          , 'expected #{this} to not throw #{exp}'\n          , (desiredError instanceof Error ? desiredError.toString() : desiredError)\n          , (err instanceof Error ? err.toString() : err)\n        );\n\n        flag(this, 'object', err);\n        return this;\n      }\n\n      // next, check constructor\n      if (constructor) {\n        this.assert(\n            err instanceof constructor\n          , 'expected #{this} to throw #{exp} but #{act} was thrown'\n          , 'expected #{this} to not throw #{exp} but #{act} was thrown'\n          , name\n          , (err instanceof Error ? err.toString() : err)\n        );\n\n        if (!errMsg) {\n          flag(this, 'object', err);\n          return this;\n        }\n      }\n\n      // next, check message\n      var message = 'error' === _.type(err) && \"message\" in err\n        ? err.message\n        : '' + err;\n\n      if ((message != null) && errMsg && errMsg instanceof RegExp) {\n        this.assert(\n            errMsg.exec(message)\n          , 'expected #{this} to throw error matching #{exp} but got #{act}'\n          , 'expected #{this} to throw error not matching #{exp}'\n          , errMsg\n          , message\n        );\n\n        flag(this, 'object', err);\n        return this;\n      } else if ((message != null) && errMsg && 'string' === typeof errMsg) {\n        this.assert(\n            ~message.indexOf(errMsg)\n          , 'expected #{this} to throw error including #{exp} but got #{act}'\n          , 'expected #{this} to throw error not including #{act}'\n          , errMsg\n          , message\n        );\n\n        flag(this, 'object', err);\n        return this;\n      } else {\n        thrown = true;\n        thrownError = err;\n      }\n    }\n\n    var actuallyGot = ''\n      , expectedThrown = name !== null\n        ? name\n        : desiredError\n          ? '#{exp}' //_.inspect(desiredError)\n          : 'an error';\n\n    if (thrown) {\n      actuallyGot = ' but #{act} was thrown'\n    }\n\n    this.assert(\n        thrown === true\n      , 'expected #{this} to throw ' + expectedThrown + actuallyGot\n      , 'expected #{this} to not throw ' + expectedThrown + actuallyGot\n      , (desiredError instanceof Error ? desiredError.toString() : desiredError)\n      , (thrownError instanceof Error ? thrownError.toString() : thrownError)\n    );\n\n    flag(this, 'object', thrownError);\n  };\n\n  Assertion.addMethod('throw', assertThrows);\n  Assertion.addMethod('throws', assertThrows);\n  Assertion.addMethod('Throw', assertThrows);\n\n  /**\n   * ### .respondTo(method)\n   *\n   * Asserts that the object or class target will respond to a method.\n   *\n   *     Klass.prototype.bar = function(){};\n   *     expect(Klass).to.respondTo('bar');\n   *     expect(obj).to.respondTo('bar');\n   *\n   * To check if a constructor will respond to a static function,\n   * set the `itself` flag.\n   *\n   *     Klass.baz = function(){};\n   *     expect(Klass).itself.to.respondTo('baz');\n   *\n   * @name respondTo\n   * @alias respondsTo\n   * @param {String} method\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function respondTo (method, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , itself = flag(this, 'itself')\n      , context = ('function' === _.type(obj) && !itself)\n        ? obj.prototype[method]\n        : obj[method];\n\n    this.assert(\n        'function' === typeof context\n      , 'expected #{this} to respond to ' + _.inspect(method)\n      , 'expected #{this} to not respond to ' + _.inspect(method)\n    );\n  }\n\n  Assertion.addMethod('respondTo', respondTo);\n  Assertion.addMethod('respondsTo', respondTo);\n\n  /**\n   * ### .itself\n   *\n   * Sets the `itself` flag, later used by the `respondTo` assertion.\n   *\n   *     function Foo() {}\n   *     Foo.bar = function() {}\n   *     Foo.prototype.baz = function() {}\n   *\n   *     expect(Foo).itself.to.respondTo('bar');\n   *     expect(Foo).itself.not.to.respondTo('baz');\n   *\n   * @name itself\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('itself', function () {\n    flag(this, 'itself', true);\n  });\n\n  /**\n   * ### .satisfy(method)\n   *\n   * Asserts that the target passes a given truth test.\n   *\n   *     expect(1).to.satisfy(function(num) { return num > 0; });\n   *\n   * @name satisfy\n   * @alias satisfies\n   * @param {Function} matcher\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function satisfy (matcher, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    var result = matcher(obj);\n    this.assert(\n        result\n      , 'expected #{this} to satisfy ' + _.objDisplay(matcher)\n      , 'expected #{this} to not satisfy' + _.objDisplay(matcher)\n      , this.negate ? false : true\n      , result\n    );\n  }\n\n  Assertion.addMethod('satisfy', satisfy);\n  Assertion.addMethod('satisfies', satisfy);\n\n  /**\n   * ### .closeTo(expected, delta)\n   *\n   * Asserts that the target is equal `expected`, to within a +/- `delta` range.\n   *\n   *     expect(1.5).to.be.closeTo(1, 0.5);\n   *\n   * @name closeTo\n   * @alias approximately\n   * @param {Number} expected\n   * @param {Number} delta\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function closeTo(expected, delta, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n\n    new Assertion(obj, msg).is.a('number');\n    if (_.type(expected) !== 'number' || _.type(delta) !== 'number') {\n      throw new Error('the arguments to closeTo or approximately must be numbers');\n    }\n\n    this.assert(\n        Math.abs(obj - expected) <= delta\n      , 'expected #{this} to be close to ' + expected + ' +/- ' + delta\n      , 'expected #{this} not to be close to ' + expected + ' +/- ' + delta\n    );\n  }\n\n  Assertion.addMethod('closeTo', closeTo);\n  Assertion.addMethod('approximately', closeTo);\n\n  function isSubsetOf(subset, superset, cmp) {\n    return subset.every(function(elem) {\n      if (!cmp) return superset.indexOf(elem) !== -1;\n\n      return superset.some(function(elem2) {\n        return cmp(elem, elem2);\n      });\n    })\n  }\n\n  /**\n   * ### .members(set)\n   *\n   * Asserts that the target is a superset of `set`,\n   * or that the target and `set` have the same strictly-equal (===) members.\n   * Alternately, if the `deep` flag is set, set members are compared for deep\n   * equality.\n   *\n   *     expect([1, 2, 3]).to.include.members([3, 2]);\n   *     expect([1, 2, 3]).to.not.include.members([3, 2, 8]);\n   *\n   *     expect([4, 2]).to.have.members([2, 4]);\n   *     expect([5, 2]).to.not.have.members([5, 2, 1]);\n   *\n   *     expect([{ id: 1 }]).to.deep.include.members([{ id: 1 }]);\n   *\n   * @name members\n   * @param {Array} set\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addMethod('members', function (subset, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n\n    new Assertion(obj).to.be.an('array');\n    new Assertion(subset).to.be.an('array');\n\n    var cmp = flag(this, 'deep') ? _.eql : undefined;\n\n    if (flag(this, 'contains')) {\n      return this.assert(\n          isSubsetOf(subset, obj, cmp)\n        , 'expected #{this} to be a superset of #{act}'\n        , 'expected #{this} to not be a superset of #{act}'\n        , obj\n        , subset\n      );\n    }\n\n    this.assert(\n        isSubsetOf(obj, subset, cmp) && isSubsetOf(subset, obj, cmp)\n        , 'expected #{this} to have the same members as #{act}'\n        , 'expected #{this} to not have the same members as #{act}'\n        , obj\n        , subset\n    );\n  });\n\n  /**\n   * ### .oneOf(list)\n   *\n   * Assert that a value appears somewhere in the top level of array `list`.\n   *\n   *     expect('a').to.be.oneOf(['a', 'b', 'c']);\n   *     expect(9).to.not.be.oneOf(['z']);\n   *     expect([3]).to.not.be.oneOf([1, 2, [3]]);\n   *\n   *     var three = [3];\n   *     // for object-types, contents are not compared\n   *     expect(three).to.not.be.oneOf([1, 2, [3]]);\n   *     // comparing references works\n   *     expect(three).to.be.oneOf([1, 2, three]);\n   *\n   * @name oneOf\n   * @param {Array<*>} list\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function oneOf (list, msg) {\n    if (msg) flag(this, 'message', msg);\n    var expected = flag(this, 'object');\n    new Assertion(list).to.be.an('array');\n\n    this.assert(\n        list.indexOf(expected) > -1\n      , 'expected #{this} to be one of #{exp}'\n      , 'expected #{this} to not be one of #{exp}'\n      , list\n      , expected\n    );\n  }\n\n  Assertion.addMethod('oneOf', oneOf);\n\n\n  /**\n   * ### .change(function)\n   *\n   * Asserts that a function changes an object property\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val += 3 };\n   *     var noChangeFn = function() { return 'foo' + 'bar'; }\n   *     expect(fn).to.change(obj, 'val');\n   *     expect(noChangeFn).to.not.change(obj, 'val')\n   *\n   * @name change\n   * @alias changes\n   * @alias Change\n   * @param {String} object\n   * @param {String} property name\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertChanges (object, prop, msg) {\n    if (msg) flag(this, 'message', msg);\n    var fn = flag(this, 'object');\n    new Assertion(object, msg).to.have.property(prop);\n    new Assertion(fn).is.a('function');\n\n    var initial = object[prop];\n    fn();\n\n    this.assert(\n      initial !== object[prop]\n      , 'expected .' + prop + ' to change'\n      , 'expected .' + prop + ' to not change'\n    );\n  }\n\n  Assertion.addChainableMethod('change', assertChanges);\n  Assertion.addChainableMethod('changes', assertChanges);\n\n  /**\n   * ### .increase(function)\n   *\n   * Asserts that a function increases an object property\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 15 };\n   *     expect(fn).to.increase(obj, 'val');\n   *\n   * @name increase\n   * @alias increases\n   * @alias Increase\n   * @param {String} object\n   * @param {String} property name\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertIncreases (object, prop, msg) {\n    if (msg) flag(this, 'message', msg);\n    var fn = flag(this, 'object');\n    new Assertion(object, msg).to.have.property(prop);\n    new Assertion(fn).is.a('function');\n\n    var initial = object[prop];\n    fn();\n\n    this.assert(\n      object[prop] - initial > 0\n      , 'expected .' + prop + ' to increase'\n      , 'expected .' + prop + ' to not increase'\n    );\n  }\n\n  Assertion.addChainableMethod('increase', assertIncreases);\n  Assertion.addChainableMethod('increases', assertIncreases);\n\n  /**\n   * ### .decrease(function)\n   *\n   * Asserts that a function decreases an object property\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 5 };\n   *     expect(fn).to.decrease(obj, 'val');\n   *\n   * @name decrease\n   * @alias decreases\n   * @alias Decrease\n   * @param {String} object\n   * @param {String} property name\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertDecreases (object, prop, msg) {\n    if (msg) flag(this, 'message', msg);\n    var fn = flag(this, 'object');\n    new Assertion(object, msg).to.have.property(prop);\n    new Assertion(fn).is.a('function');\n\n    var initial = object[prop];\n    fn();\n\n    this.assert(\n      object[prop] - initial < 0\n      , 'expected .' + prop + ' to decrease'\n      , 'expected .' + prop + ' to not decrease'\n    );\n  }\n\n  Assertion.addChainableMethod('decrease', assertDecreases);\n  Assertion.addChainableMethod('decreases', assertDecreases);\n\n  /**\n   * ### .extensible\n   *\n   * Asserts that the target is extensible (can have new properties added to\n   * it).\n   *\n   *     var nonExtensibleObject = Object.preventExtensions({});\n   *     var sealedObject = Object.seal({});\n   *     var frozenObject = Object.freeze({});\n   *\n   *     expect({}).to.be.extensible;\n   *     expect(nonExtensibleObject).to.not.be.extensible;\n   *     expect(sealedObject).to.not.be.extensible;\n   *     expect(frozenObject).to.not.be.extensible;\n   *\n   * @name extensible\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('extensible', function() {\n    var obj = flag(this, 'object');\n\n    // In ES5, if the argument to this method is not an object (a primitive), then it will cause a TypeError.\n    // In ES6, a non-object argument will be treated as if it was a non-extensible ordinary object, simply return false.\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isExtensible\n    // The following provides ES6 behavior when a TypeError is thrown under ES5.\n\n    var isExtensible;\n\n    try {\n      isExtensible = Object.isExtensible(obj);\n    } catch (err) {\n      if (err instanceof TypeError) isExtensible = false;\n      else throw err;\n    }\n\n    this.assert(\n      isExtensible\n      , 'expected #{this} to be extensible'\n      , 'expected #{this} to not be extensible'\n    );\n  });\n\n  /**\n   * ### .sealed\n   *\n   * Asserts that the target is sealed (cannot have new properties added to it\n   * and its existing properties cannot be removed).\n   *\n   *     var sealedObject = Object.seal({});\n   *     var frozenObject = Object.freeze({});\n   *\n   *     expect(sealedObject).to.be.sealed;\n   *     expect(frozenObject).to.be.sealed;\n   *     expect({}).to.not.be.sealed;\n   *\n   * @name sealed\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('sealed', function() {\n    var obj = flag(this, 'object');\n\n    // In ES5, if the argument to this method is not an object (a primitive), then it will cause a TypeError.\n    // In ES6, a non-object argument will be treated as if it was a sealed ordinary object, simply return true.\n    // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isSealed\n    // The following provides ES6 behavior when a TypeError is thrown under ES5.\n\n    var isSealed;\n\n    try {\n      isSealed = Object.isSealed(obj);\n    } catch (err) {\n      if (err instanceof TypeError) isSealed = true;\n      else throw err;\n    }\n\n    this.assert(\n      isSealed\n      , 'expected #{this} to be sealed'\n      , 'expected #{this} to not be sealed'\n    );\n  });\n\n  /**\n   * ### .frozen\n   *\n   * Asserts that the target is frozen (cannot have new properties added to it\n   * and its existing properties cannot be modified).\n   *\n   *     var frozenObject = Object.freeze({});\n   *\n   *     expect(frozenObject).to.be.frozen;\n   *     expect({}).to.not.be.frozen;\n   *\n   * @name frozen\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('frozen', function() {\n    var obj = flag(this, 'object');\n\n    // In ES5, if the argument to this method is not an object (a primitive), then it will cause a TypeError.\n    // In ES6, a non-object argument will be treated as if it was a frozen ordinary object, simply return true.\n    // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isFrozen\n    // The following provides ES6 behavior when a TypeError is thrown under ES5.\n\n    var isFrozen;\n\n    try {\n      isFrozen = Object.isFrozen(obj);\n    } catch (err) {\n      if (err instanceof TypeError) isFrozen = true;\n      else throw err;\n    }\n\n    this.assert(\n      isFrozen\n      , 'expected #{this} to be frozen'\n      , 'expected #{this} to not be frozen'\n    );\n  });\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chai/lib/chai/core/assertions.js\n// module id = 351\n// module chunks = 1","/*!\n * chai\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n\nmodule.exports = function (chai, util) {\n\n  /*!\n   * Chai dependencies.\n   */\n\n  var Assertion = chai.Assertion\n    , flag = util.flag;\n\n  /*!\n   * Module export.\n   */\n\n  /**\n   * ### assert(expression, message)\n   *\n   * Write your own test expressions.\n   *\n   *     assert('foo' !== 'bar', 'foo is not bar');\n   *     assert(Array.isArray([]), 'empty arrays are arrays');\n   *\n   * @param {Mixed} expression to test for truthiness\n   * @param {String} message to display on error\n   * @name assert\n   * @namespace Assert\n   * @api public\n   */\n\n  var assert = chai.assert = function (express, errmsg) {\n    var test = new Assertion(null, null, chai.assert);\n    test.assert(\n        express\n      , errmsg\n      , '[ negation message unavailable ]'\n    );\n  };\n\n  /**\n   * ### .fail(actual, expected, [message], [operator])\n   *\n   * Throw a failure. Node.js `assert` module-compatible.\n   *\n   * @name fail\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @param {String} operator\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.fail = function (actual, expected, message, operator) {\n    message = message || 'assert.fail()';\n    throw new chai.AssertionError(message, {\n        actual: actual\n      , expected: expected\n      , operator: operator\n    }, assert.fail);\n  };\n\n  /**\n   * ### .isOk(object, [message])\n   *\n   * Asserts that `object` is truthy.\n   *\n   *     assert.isOk('everything', 'everything is ok');\n   *     assert.isOk(false, 'this will fail');\n   *\n   * @name isOk\n   * @alias ok\n   * @param {Mixed} object to test\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isOk = function (val, msg) {\n    new Assertion(val, msg).is.ok;\n  };\n\n  /**\n   * ### .isNotOk(object, [message])\n   *\n   * Asserts that `object` is falsy.\n   *\n   *     assert.isNotOk('everything', 'this will fail');\n   *     assert.isNotOk(false, 'this will pass');\n   *\n   * @name isNotOk\n   * @alias notOk\n   * @param {Mixed} object to test\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotOk = function (val, msg) {\n    new Assertion(val, msg).is.not.ok;\n  };\n\n  /**\n   * ### .equal(actual, expected, [message])\n   *\n   * Asserts non-strict equality (`==`) of `actual` and `expected`.\n   *\n   *     assert.equal(3, '3', '== coerces values to strings');\n   *\n   * @name equal\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.equal = function (act, exp, msg) {\n    var test = new Assertion(act, msg, assert.equal);\n\n    test.assert(\n        exp == flag(test, 'object')\n      , 'expected #{this} to equal #{exp}'\n      , 'expected #{this} to not equal #{act}'\n      , exp\n      , act\n    );\n  };\n\n  /**\n   * ### .notEqual(actual, expected, [message])\n   *\n   * Asserts non-strict inequality (`!=`) of `actual` and `expected`.\n   *\n   *     assert.notEqual(3, 4, 'these numbers are not equal');\n   *\n   * @name notEqual\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notEqual = function (act, exp, msg) {\n    var test = new Assertion(act, msg, assert.notEqual);\n\n    test.assert(\n        exp != flag(test, 'object')\n      , 'expected #{this} to not equal #{exp}'\n      , 'expected #{this} to equal #{act}'\n      , exp\n      , act\n    );\n  };\n\n  /**\n   * ### .strictEqual(actual, expected, [message])\n   *\n   * Asserts strict equality (`===`) of `actual` and `expected`.\n   *\n   *     assert.strictEqual(true, true, 'these booleans are strictly equal');\n   *\n   * @name strictEqual\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.strictEqual = function (act, exp, msg) {\n    new Assertion(act, msg).to.equal(exp);\n  };\n\n  /**\n   * ### .notStrictEqual(actual, expected, [message])\n   *\n   * Asserts strict inequality (`!==`) of `actual` and `expected`.\n   *\n   *     assert.notStrictEqual(3, '3', 'no coercion for strict equality');\n   *\n   * @name notStrictEqual\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notStrictEqual = function (act, exp, msg) {\n    new Assertion(act, msg).to.not.equal(exp);\n  };\n\n  /**\n   * ### .deepEqual(actual, expected, [message])\n   *\n   * Asserts that `actual` is deeply equal to `expected`.\n   *\n   *     assert.deepEqual({ tea: 'green' }, { tea: 'green' });\n   *\n   * @name deepEqual\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.deepEqual = function (act, exp, msg) {\n    new Assertion(act, msg).to.eql(exp);\n  };\n\n  /**\n   * ### .notDeepEqual(actual, expected, [message])\n   *\n   * Assert that `actual` is not deeply equal to `expected`.\n   *\n   *     assert.notDeepEqual({ tea: 'green' }, { tea: 'jasmine' });\n   *\n   * @name notDeepEqual\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notDeepEqual = function (act, exp, msg) {\n    new Assertion(act, msg).to.not.eql(exp);\n  };\n\n   /**\n   * ### .isAbove(valueToCheck, valueToBeAbove, [message])\n   *\n   * Asserts `valueToCheck` is strictly greater than (>) `valueToBeAbove`\n   *\n   *     assert.isAbove(5, 2, '5 is strictly greater than 2');\n   *\n   * @name isAbove\n   * @param {Mixed} valueToCheck\n   * @param {Mixed} valueToBeAbove\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isAbove = function (val, abv, msg) {\n    new Assertion(val, msg).to.be.above(abv);\n  };\n\n   /**\n   * ### .isAtLeast(valueToCheck, valueToBeAtLeast, [message])\n   *\n   * Asserts `valueToCheck` is greater than or equal to (>=) `valueToBeAtLeast`\n   *\n   *     assert.isAtLeast(5, 2, '5 is greater or equal to 2');\n   *     assert.isAtLeast(3, 3, '3 is greater or equal to 3');\n   *\n   * @name isAtLeast\n   * @param {Mixed} valueToCheck\n   * @param {Mixed} valueToBeAtLeast\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isAtLeast = function (val, atlst, msg) {\n    new Assertion(val, msg).to.be.least(atlst);\n  };\n\n   /**\n   * ### .isBelow(valueToCheck, valueToBeBelow, [message])\n   *\n   * Asserts `valueToCheck` is strictly less than (<) `valueToBeBelow`\n   *\n   *     assert.isBelow(3, 6, '3 is strictly less than 6');\n   *\n   * @name isBelow\n   * @param {Mixed} valueToCheck\n   * @param {Mixed} valueToBeBelow\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isBelow = function (val, blw, msg) {\n    new Assertion(val, msg).to.be.below(blw);\n  };\n\n   /**\n   * ### .isAtMost(valueToCheck, valueToBeAtMost, [message])\n   *\n   * Asserts `valueToCheck` is less than or equal to (<=) `valueToBeAtMost`\n   *\n   *     assert.isAtMost(3, 6, '3 is less than or equal to 6');\n   *     assert.isAtMost(4, 4, '4 is less than or equal to 4');\n   *\n   * @name isAtMost\n   * @param {Mixed} valueToCheck\n   * @param {Mixed} valueToBeAtMost\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isAtMost = function (val, atmst, msg) {\n    new Assertion(val, msg).to.be.most(atmst);\n  };\n\n  /**\n   * ### .isTrue(value, [message])\n   *\n   * Asserts that `value` is true.\n   *\n   *     var teaServed = true;\n   *     assert.isTrue(teaServed, 'the tea has been served');\n   *\n   * @name isTrue\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isTrue = function (val, msg) {\n    new Assertion(val, msg).is['true'];\n  };\n\n  /**\n   * ### .isNotTrue(value, [message])\n   *\n   * Asserts that `value` is not true.\n   *\n   *     var tea = 'tasty chai';\n   *     assert.isNotTrue(tea, 'great, time for tea!');\n   *\n   * @name isNotTrue\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotTrue = function (val, msg) {\n    new Assertion(val, msg).to.not.equal(true);\n  };\n\n  /**\n   * ### .isFalse(value, [message])\n   *\n   * Asserts that `value` is false.\n   *\n   *     var teaServed = false;\n   *     assert.isFalse(teaServed, 'no tea yet? hmm...');\n   *\n   * @name isFalse\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isFalse = function (val, msg) {\n    new Assertion(val, msg).is['false'];\n  };\n\n  /**\n   * ### .isNotFalse(value, [message])\n   *\n   * Asserts that `value` is not false.\n   *\n   *     var tea = 'tasty chai';\n   *     assert.isNotFalse(tea, 'great, time for tea!');\n   *\n   * @name isNotFalse\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotFalse = function (val, msg) {\n    new Assertion(val, msg).to.not.equal(false);\n  };\n\n  /**\n   * ### .isNull(value, [message])\n   *\n   * Asserts that `value` is null.\n   *\n   *     assert.isNull(err, 'there was no error');\n   *\n   * @name isNull\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNull = function (val, msg) {\n    new Assertion(val, msg).to.equal(null);\n  };\n\n  /**\n   * ### .isNotNull(value, [message])\n   *\n   * Asserts that `value` is not null.\n   *\n   *     var tea = 'tasty chai';\n   *     assert.isNotNull(tea, 'great, time for tea!');\n   *\n   * @name isNotNull\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotNull = function (val, msg) {\n    new Assertion(val, msg).to.not.equal(null);\n  };\n\n  /**\n   * ### .isNaN\n   * Asserts that value is NaN\n   *\n   *    assert.isNaN('foo', 'foo is NaN');\n   *\n   * @name isNaN\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNaN = function (val, msg) {\n    new Assertion(val, msg).to.be.NaN;\n  };\n\n  /**\n   * ### .isNotNaN\n   * Asserts that value is not NaN\n   *\n   *    assert.isNotNaN(4, '4 is not NaN');\n   *\n   * @name isNotNaN\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n  assert.isNotNaN = function (val, msg) {\n    new Assertion(val, msg).not.to.be.NaN;\n  };\n\n  /**\n   * ### .isUndefined(value, [message])\n   *\n   * Asserts that `value` is `undefined`.\n   *\n   *     var tea;\n   *     assert.isUndefined(tea, 'no tea defined');\n   *\n   * @name isUndefined\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isUndefined = function (val, msg) {\n    new Assertion(val, msg).to.equal(undefined);\n  };\n\n  /**\n   * ### .isDefined(value, [message])\n   *\n   * Asserts that `value` is not `undefined`.\n   *\n   *     var tea = 'cup of chai';\n   *     assert.isDefined(tea, 'tea has been defined');\n   *\n   * @name isDefined\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isDefined = function (val, msg) {\n    new Assertion(val, msg).to.not.equal(undefined);\n  };\n\n  /**\n   * ### .isFunction(value, [message])\n   *\n   * Asserts that `value` is a function.\n   *\n   *     function serveTea() { return 'cup of tea'; };\n   *     assert.isFunction(serveTea, 'great, we can have tea now');\n   *\n   * @name isFunction\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isFunction = function (val, msg) {\n    new Assertion(val, msg).to.be.a('function');\n  };\n\n  /**\n   * ### .isNotFunction(value, [message])\n   *\n   * Asserts that `value` is _not_ a function.\n   *\n   *     var serveTea = [ 'heat', 'pour', 'sip' ];\n   *     assert.isNotFunction(serveTea, 'great, we have listed the steps');\n   *\n   * @name isNotFunction\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotFunction = function (val, msg) {\n    new Assertion(val, msg).to.not.be.a('function');\n  };\n\n  /**\n   * ### .isObject(value, [message])\n   *\n   * Asserts that `value` is an object of type 'Object' (as revealed by `Object.prototype.toString`).\n   * _The assertion does not match subclassed objects._\n   *\n   *     var selection = { name: 'Chai', serve: 'with spices' };\n   *     assert.isObject(selection, 'tea selection is an object');\n   *\n   * @name isObject\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isObject = function (val, msg) {\n    new Assertion(val, msg).to.be.a('object');\n  };\n\n  /**\n   * ### .isNotObject(value, [message])\n   *\n   * Asserts that `value` is _not_ an object of type 'Object' (as revealed by `Object.prototype.toString`).\n   *\n   *     var selection = 'chai'\n   *     assert.isNotObject(selection, 'tea selection is not an object');\n   *     assert.isNotObject(null, 'null is not an object');\n   *\n   * @name isNotObject\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotObject = function (val, msg) {\n    new Assertion(val, msg).to.not.be.a('object');\n  };\n\n  /**\n   * ### .isArray(value, [message])\n   *\n   * Asserts that `value` is an array.\n   *\n   *     var menu = [ 'green', 'chai', 'oolong' ];\n   *     assert.isArray(menu, 'what kind of tea do we want?');\n   *\n   * @name isArray\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isArray = function (val, msg) {\n    new Assertion(val, msg).to.be.an('array');\n  };\n\n  /**\n   * ### .isNotArray(value, [message])\n   *\n   * Asserts that `value` is _not_ an array.\n   *\n   *     var menu = 'green|chai|oolong';\n   *     assert.isNotArray(menu, 'what kind of tea do we want?');\n   *\n   * @name isNotArray\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotArray = function (val, msg) {\n    new Assertion(val, msg).to.not.be.an('array');\n  };\n\n  /**\n   * ### .isString(value, [message])\n   *\n   * Asserts that `value` is a string.\n   *\n   *     var teaOrder = 'chai';\n   *     assert.isString(teaOrder, 'order placed');\n   *\n   * @name isString\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isString = function (val, msg) {\n    new Assertion(val, msg).to.be.a('string');\n  };\n\n  /**\n   * ### .isNotString(value, [message])\n   *\n   * Asserts that `value` is _not_ a string.\n   *\n   *     var teaOrder = 4;\n   *     assert.isNotString(teaOrder, 'order placed');\n   *\n   * @name isNotString\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotString = function (val, msg) {\n    new Assertion(val, msg).to.not.be.a('string');\n  };\n\n  /**\n   * ### .isNumber(value, [message])\n   *\n   * Asserts that `value` is a number.\n   *\n   *     var cups = 2;\n   *     assert.isNumber(cups, 'how many cups');\n   *\n   * @name isNumber\n   * @param {Number} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNumber = function (val, msg) {\n    new Assertion(val, msg).to.be.a('number');\n  };\n\n  /**\n   * ### .isNotNumber(value, [message])\n   *\n   * Asserts that `value` is _not_ a number.\n   *\n   *     var cups = '2 cups please';\n   *     assert.isNotNumber(cups, 'how many cups');\n   *\n   * @name isNotNumber\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotNumber = function (val, msg) {\n    new Assertion(val, msg).to.not.be.a('number');\n  };\n\n  /**\n   * ### .isBoolean(value, [message])\n   *\n   * Asserts that `value` is a boolean.\n   *\n   *     var teaReady = true\n   *       , teaServed = false;\n   *\n   *     assert.isBoolean(teaReady, 'is the tea ready');\n   *     assert.isBoolean(teaServed, 'has tea been served');\n   *\n   * @name isBoolean\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isBoolean = function (val, msg) {\n    new Assertion(val, msg).to.be.a('boolean');\n  };\n\n  /**\n   * ### .isNotBoolean(value, [message])\n   *\n   * Asserts that `value` is _not_ a boolean.\n   *\n   *     var teaReady = 'yep'\n   *       , teaServed = 'nope';\n   *\n   *     assert.isNotBoolean(teaReady, 'is the tea ready');\n   *     assert.isNotBoolean(teaServed, 'has tea been served');\n   *\n   * @name isNotBoolean\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotBoolean = function (val, msg) {\n    new Assertion(val, msg).to.not.be.a('boolean');\n  };\n\n  /**\n   * ### .typeOf(value, name, [message])\n   *\n   * Asserts that `value`'s type is `name`, as determined by\n   * `Object.prototype.toString`.\n   *\n   *     assert.typeOf({ tea: 'chai' }, 'object', 'we have an object');\n   *     assert.typeOf(['chai', 'jasmine'], 'array', 'we have an array');\n   *     assert.typeOf('tea', 'string', 'we have a string');\n   *     assert.typeOf(/tea/, 'regexp', 'we have a regular expression');\n   *     assert.typeOf(null, 'null', 'we have a null');\n   *     assert.typeOf(undefined, 'undefined', 'we have an undefined');\n   *\n   * @name typeOf\n   * @param {Mixed} value\n   * @param {String} name\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.typeOf = function (val, type, msg) {\n    new Assertion(val, msg).to.be.a(type);\n  };\n\n  /**\n   * ### .notTypeOf(value, name, [message])\n   *\n   * Asserts that `value`'s type is _not_ `name`, as determined by\n   * `Object.prototype.toString`.\n   *\n   *     assert.notTypeOf('tea', 'number', 'strings are not numbers');\n   *\n   * @name notTypeOf\n   * @param {Mixed} value\n   * @param {String} typeof name\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notTypeOf = function (val, type, msg) {\n    new Assertion(val, msg).to.not.be.a(type);\n  };\n\n  /**\n   * ### .instanceOf(object, constructor, [message])\n   *\n   * Asserts that `value` is an instance of `constructor`.\n   *\n   *     var Tea = function (name) { this.name = name; }\n   *       , chai = new Tea('chai');\n   *\n   *     assert.instanceOf(chai, Tea, 'chai is an instance of tea');\n   *\n   * @name instanceOf\n   * @param {Object} object\n   * @param {Constructor} constructor\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.instanceOf = function (val, type, msg) {\n    new Assertion(val, msg).to.be.instanceOf(type);\n  };\n\n  /**\n   * ### .notInstanceOf(object, constructor, [message])\n   *\n   * Asserts `value` is not an instance of `constructor`.\n   *\n   *     var Tea = function (name) { this.name = name; }\n   *       , chai = new String('chai');\n   *\n   *     assert.notInstanceOf(chai, Tea, 'chai is not an instance of tea');\n   *\n   * @name notInstanceOf\n   * @param {Object} object\n   * @param {Constructor} constructor\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notInstanceOf = function (val, type, msg) {\n    new Assertion(val, msg).to.not.be.instanceOf(type);\n  };\n\n  /**\n   * ### .include(haystack, needle, [message])\n   *\n   * Asserts that `haystack` includes `needle`. Works\n   * for strings and arrays.\n   *\n   *     assert.include('foobar', 'bar', 'foobar contains string \"bar\"');\n   *     assert.include([ 1, 2, 3 ], 3, 'array contains value');\n   *\n   * @name include\n   * @param {Array|String} haystack\n   * @param {Mixed} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.include = function (exp, inc, msg) {\n    new Assertion(exp, msg, assert.include).include(inc);\n  };\n\n  /**\n   * ### .notInclude(haystack, needle, [message])\n   *\n   * Asserts that `haystack` does not include `needle`. Works\n   * for strings and arrays.\n   *\n   *     assert.notInclude('foobar', 'baz', 'string not include substring');\n   *     assert.notInclude([ 1, 2, 3 ], 4, 'array not include contain value');\n   *\n   * @name notInclude\n   * @param {Array|String} haystack\n   * @param {Mixed} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notInclude = function (exp, inc, msg) {\n    new Assertion(exp, msg, assert.notInclude).not.include(inc);\n  };\n\n  /**\n   * ### .match(value, regexp, [message])\n   *\n   * Asserts that `value` matches the regular expression `regexp`.\n   *\n   *     assert.match('foobar', /^foo/, 'regexp matches');\n   *\n   * @name match\n   * @param {Mixed} value\n   * @param {RegExp} regexp\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.match = function (exp, re, msg) {\n    new Assertion(exp, msg).to.match(re);\n  };\n\n  /**\n   * ### .notMatch(value, regexp, [message])\n   *\n   * Asserts that `value` does not match the regular expression `regexp`.\n   *\n   *     assert.notMatch('foobar', /^foo/, 'regexp does not match');\n   *\n   * @name notMatch\n   * @param {Mixed} value\n   * @param {RegExp} regexp\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notMatch = function (exp, re, msg) {\n    new Assertion(exp, msg).to.not.match(re);\n  };\n\n  /**\n   * ### .property(object, property, [message])\n   *\n   * Asserts that `object` has a property named by `property`.\n   *\n   *     assert.property({ tea: { green: 'matcha' }}, 'tea');\n   *\n   * @name property\n   * @param {Object} object\n   * @param {String} property\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.property = function (obj, prop, msg) {\n    new Assertion(obj, msg).to.have.property(prop);\n  };\n\n  /**\n   * ### .notProperty(object, property, [message])\n   *\n   * Asserts that `object` does _not_ have a property named by `property`.\n   *\n   *     assert.notProperty({ tea: { green: 'matcha' }}, 'coffee');\n   *\n   * @name notProperty\n   * @param {Object} object\n   * @param {String} property\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notProperty = function (obj, prop, msg) {\n    new Assertion(obj, msg).to.not.have.property(prop);\n  };\n\n  /**\n   * ### .deepProperty(object, property, [message])\n   *\n   * Asserts that `object` has a property named by `property`, which can be a\n   * string using dot- and bracket-notation for deep reference.\n   *\n   *     assert.deepProperty({ tea: { green: 'matcha' }}, 'tea.green');\n   *\n   * @name deepProperty\n   * @param {Object} object\n   * @param {String} property\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.deepProperty = function (obj, prop, msg) {\n    new Assertion(obj, msg).to.have.deep.property(prop);\n  };\n\n  /**\n   * ### .notDeepProperty(object, property, [message])\n   *\n   * Asserts that `object` does _not_ have a property named by `property`, which\n   * can be a string using dot- and bracket-notation for deep reference.\n   *\n   *     assert.notDeepProperty({ tea: { green: 'matcha' }}, 'tea.oolong');\n   *\n   * @name notDeepProperty\n   * @param {Object} object\n   * @param {String} property\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notDeepProperty = function (obj, prop, msg) {\n    new Assertion(obj, msg).to.not.have.deep.property(prop);\n  };\n\n  /**\n   * ### .propertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` has a property named by `property` with value given\n   * by `value`.\n   *\n   *     assert.propertyVal({ tea: 'is good' }, 'tea', 'is good');\n   *\n   * @name propertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.propertyVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg).to.have.property(prop, val);\n  };\n\n  /**\n   * ### .propertyNotVal(object, property, value, [message])\n   *\n   * Asserts that `object` has a property named by `property`, but with a value\n   * different from that given by `value`.\n   *\n   *     assert.propertyNotVal({ tea: 'is good' }, 'tea', 'is bad');\n   *\n   * @name propertyNotVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.propertyNotVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg).to.not.have.property(prop, val);\n  };\n\n  /**\n   * ### .deepPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` has a property named by `property` with value given\n   * by `value`. `property` can use dot- and bracket-notation for deep\n   * reference.\n   *\n   *     assert.deepPropertyVal({ tea: { green: 'matcha' }}, 'tea.green', 'matcha');\n   *\n   * @name deepPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.deepPropertyVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg).to.have.deep.property(prop, val);\n  };\n\n  /**\n   * ### .deepPropertyNotVal(object, property, value, [message])\n   *\n   * Asserts that `object` has a property named by `property`, but with a value\n   * different from that given by `value`. `property` can use dot- and\n   * bracket-notation for deep reference.\n   *\n   *     assert.deepPropertyNotVal({ tea: { green: 'matcha' }}, 'tea.green', 'konacha');\n   *\n   * @name deepPropertyNotVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.deepPropertyNotVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg).to.not.have.deep.property(prop, val);\n  };\n\n  /**\n   * ### .lengthOf(object, length, [message])\n   *\n   * Asserts that `object` has a `length` property with the expected value.\n   *\n   *     assert.lengthOf([1,2,3], 3, 'array has length of 3');\n   *     assert.lengthOf('foobar', 6, 'string has length of 6');\n   *\n   * @name lengthOf\n   * @param {Mixed} object\n   * @param {Number} length\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.lengthOf = function (exp, len, msg) {\n    new Assertion(exp, msg).to.have.length(len);\n  };\n\n  /**\n   * ### .throws(function, [constructor/string/regexp], [string/regexp], [message])\n   *\n   * Asserts that `function` will throw an error that is an instance of\n   * `constructor`, or alternately that it will throw an error with message\n   * matching `regexp`.\n   *\n   *     assert.throws(fn, 'function throws a reference error');\n   *     assert.throws(fn, /function throws a reference error/);\n   *     assert.throws(fn, ReferenceError);\n   *     assert.throws(fn, ReferenceError, 'function throws a reference error');\n   *     assert.throws(fn, ReferenceError, /function throws a reference error/);\n   *\n   * @name throws\n   * @alias throw\n   * @alias Throw\n   * @param {Function} function\n   * @param {ErrorConstructor} constructor\n   * @param {RegExp} regexp\n   * @param {String} message\n   * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.throws = function (fn, errt, errs, msg) {\n    if ('string' === typeof errt || errt instanceof RegExp) {\n      errs = errt;\n      errt = null;\n    }\n\n    var assertErr = new Assertion(fn, msg).to.throw(errt, errs);\n    return flag(assertErr, 'object');\n  };\n\n  /**\n   * ### .doesNotThrow(function, [constructor/regexp], [message])\n   *\n   * Asserts that `function` will _not_ throw an error that is an instance of\n   * `constructor`, or alternately that it will not throw an error with message\n   * matching `regexp`.\n   *\n   *     assert.doesNotThrow(fn, Error, 'function does not throw');\n   *\n   * @name doesNotThrow\n   * @param {Function} function\n   * @param {ErrorConstructor} constructor\n   * @param {RegExp} regexp\n   * @param {String} message\n   * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotThrow = function (fn, type, msg) {\n    if ('string' === typeof type) {\n      msg = type;\n      type = null;\n    }\n\n    new Assertion(fn, msg).to.not.Throw(type);\n  };\n\n  /**\n   * ### .operator(val1, operator, val2, [message])\n   *\n   * Compares two values using `operator`.\n   *\n   *     assert.operator(1, '<', 2, 'everything is ok');\n   *     assert.operator(1, '>', 2, 'this will fail');\n   *\n   * @name operator\n   * @param {Mixed} val1\n   * @param {String} operator\n   * @param {Mixed} val2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.operator = function (val, operator, val2, msg) {\n    var ok;\n    switch(operator) {\n      case '==':\n        ok = val == val2;\n        break;\n      case '===':\n        ok = val === val2;\n        break;\n      case '>':\n        ok = val > val2;\n        break;\n      case '>=':\n        ok = val >= val2;\n        break;\n      case '<':\n        ok = val < val2;\n        break;\n      case '<=':\n        ok = val <= val2;\n        break;\n      case '!=':\n        ok = val != val2;\n        break;\n      case '!==':\n        ok = val !== val2;\n        break;\n      default:\n        throw new Error('Invalid operator \"' + operator + '\"');\n    }\n    var test = new Assertion(ok, msg);\n    test.assert(\n        true === flag(test, 'object')\n      , 'expected ' + util.inspect(val) + ' to be ' + operator + ' ' + util.inspect(val2)\n      , 'expected ' + util.inspect(val) + ' to not be ' + operator + ' ' + util.inspect(val2) );\n  };\n\n  /**\n   * ### .closeTo(actual, expected, delta, [message])\n   *\n   * Asserts that the target is equal `expected`, to within a +/- `delta` range.\n   *\n   *     assert.closeTo(1.5, 1, 0.5, 'numbers are close');\n   *\n   * @name closeTo\n   * @param {Number} actual\n   * @param {Number} expected\n   * @param {Number} delta\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.closeTo = function (act, exp, delta, msg) {\n    new Assertion(act, msg).to.be.closeTo(exp, delta);\n  };\n\n  /**\n   * ### .approximately(actual, expected, delta, [message])\n   *\n   * Asserts that the target is equal `expected`, to within a +/- `delta` range.\n   *\n   *     assert.approximately(1.5, 1, 0.5, 'numbers are close');\n   *\n   * @name approximately\n   * @param {Number} actual\n   * @param {Number} expected\n   * @param {Number} delta\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.approximately = function (act, exp, delta, msg) {\n    new Assertion(act, msg).to.be.approximately(exp, delta);\n  };\n\n  /**\n   * ### .sameMembers(set1, set2, [message])\n   *\n   * Asserts that `set1` and `set2` have the same members.\n   * Order is not taken into account.\n   *\n   *     assert.sameMembers([ 1, 2, 3 ], [ 2, 1, 3 ], 'same members');\n   *\n   * @name sameMembers\n   * @param {Array} set1\n   * @param {Array} set2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.sameMembers = function (set1, set2, msg) {\n    new Assertion(set1, msg).to.have.same.members(set2);\n  }\n\n  /**\n   * ### .sameDeepMembers(set1, set2, [message])\n   *\n   * Asserts that `set1` and `set2` have the same members - using a deep equality checking.\n   * Order is not taken into account.\n   *\n   *     assert.sameDeepMembers([ {b: 3}, {a: 2}, {c: 5} ], [ {c: 5}, {b: 3}, {a: 2} ], 'same deep members');\n   *\n   * @name sameDeepMembers\n   * @param {Array} set1\n   * @param {Array} set2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.sameDeepMembers = function (set1, set2, msg) {\n    new Assertion(set1, msg).to.have.same.deep.members(set2);\n  }\n\n  /**\n   * ### .includeMembers(superset, subset, [message])\n   *\n   * Asserts that `subset` is included in `superset`.\n   * Order is not taken into account.\n   *\n   *     assert.includeMembers([ 1, 2, 3 ], [ 2, 1 ], 'include members');\n   *\n   * @name includeMembers\n   * @param {Array} superset\n   * @param {Array} subset\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.includeMembers = function (superset, subset, msg) {\n    new Assertion(superset, msg).to.include.members(subset);\n  }\n\n  /**\n   * ### .includeDeepMembers(superset, subset, [message])\n   *\n   * Asserts that `subset` is included in `superset` - using deep equality checking.\n   * Order is not taken into account.\n   * Duplicates are ignored.\n   *\n   *     assert.includeDeepMembers([ {a: 1}, {b: 2}, {c: 3} ], [ {b: 2}, {a: 1}, {b: 2} ], 'include deep members');\n   *\n   * @name includeDeepMembers\n   * @param {Array} superset\n   * @param {Array} subset\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.includeDeepMembers = function (superset, subset, msg) {\n    new Assertion(superset, msg).to.include.deep.members(subset);\n  }\n\n  /**\n   * ### .oneOf(inList, list, [message])\n   *\n   * Asserts that non-object, non-array value `inList` appears in the flat array `list`.\n   *\n   *     assert.oneOf(1, [ 2, 1 ], 'Not found in list');\n   *\n   * @name oneOf\n   * @param {*} inList\n   * @param {Array<*>} list\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.oneOf = function (inList, list, msg) {\n    new Assertion(inList, msg).to.be.oneOf(list);\n  }\n\n   /**\n   * ### .changes(function, object, property)\n   *\n   * Asserts that a function changes the value of a property\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 22 };\n   *     assert.changes(fn, obj, 'val');\n   *\n   * @name changes\n   * @param {Function} modifier function\n   * @param {Object} object\n   * @param {String} property name\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.changes = function (fn, obj, prop) {\n    new Assertion(fn).to.change(obj, prop);\n  }\n\n   /**\n   * ### .doesNotChange(function, object, property)\n   *\n   * Asserts that a function does not changes the value of a property\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { console.log('foo'); };\n   *     assert.doesNotChange(fn, obj, 'val');\n   *\n   * @name doesNotChange\n   * @param {Function} modifier function\n   * @param {Object} object\n   * @param {String} property name\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotChange = function (fn, obj, prop) {\n    new Assertion(fn).to.not.change(obj, prop);\n  }\n\n   /**\n   * ### .increases(function, object, property)\n   *\n   * Asserts that a function increases an object property\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 13 };\n   *     assert.increases(fn, obj, 'val');\n   *\n   * @name increases\n   * @param {Function} modifier function\n   * @param {Object} object\n   * @param {String} property name\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.increases = function (fn, obj, prop) {\n    new Assertion(fn).to.increase(obj, prop);\n  }\n\n   /**\n   * ### .doesNotIncrease(function, object, property)\n   *\n   * Asserts that a function does not increase object property\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 8 };\n   *     assert.doesNotIncrease(fn, obj, 'val');\n   *\n   * @name doesNotIncrease\n   * @param {Function} modifier function\n   * @param {Object} object\n   * @param {String} property name\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotIncrease = function (fn, obj, prop) {\n    new Assertion(fn).to.not.increase(obj, prop);\n  }\n\n   /**\n   * ### .decreases(function, object, property)\n   *\n   * Asserts that a function decreases an object property\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 5 };\n   *     assert.decreases(fn, obj, 'val');\n   *\n   * @name decreases\n   * @param {Function} modifier function\n   * @param {Object} object\n   * @param {String} property name\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.decreases = function (fn, obj, prop) {\n    new Assertion(fn).to.decrease(obj, prop);\n  }\n\n   /**\n   * ### .doesNotDecrease(function, object, property)\n   *\n   * Asserts that a function does not decreases an object property\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 15 };\n   *     assert.doesNotDecrease(fn, obj, 'val');\n   *\n   * @name doesNotDecrease\n   * @param {Function} modifier function\n   * @param {Object} object\n   * @param {String} property name\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotDecrease = function (fn, obj, prop) {\n    new Assertion(fn).to.not.decrease(obj, prop);\n  }\n\n  /*!\n   * ### .ifError(object)\n   *\n   * Asserts if value is not a false value, and throws if it is a true value.\n   * This is added to allow for chai to be a drop-in replacement for Node's\n   * assert class.\n   *\n   *     var err = new Error('I am a custom error');\n   *     assert.ifError(err); // Rethrows err!\n   *\n   * @name ifError\n   * @param {Object} object\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.ifError = function (val) {\n    if (val) {\n      throw(val);\n    }\n  };\n\n  /**\n   * ### .isExtensible(object)\n   *\n   * Asserts that `object` is extensible (can have new properties added to it).\n   *\n   *     assert.isExtensible({});\n   *\n   * @name isExtensible\n   * @alias extensible\n   * @param {Object} object\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isExtensible = function (obj, msg) {\n    new Assertion(obj, msg).to.be.extensible;\n  };\n\n  /**\n   * ### .isNotExtensible(object)\n   *\n   * Asserts that `object` is _not_ extensible.\n   *\n   *     var nonExtensibleObject = Object.preventExtensions({});\n   *     var sealedObject = Object.seal({});\n   *     var frozenObject = Object.freese({});\n   *\n   *     assert.isNotExtensible(nonExtensibleObject);\n   *     assert.isNotExtensible(sealedObject);\n   *     assert.isNotExtensible(frozenObject);\n   *\n   * @name isNotExtensible\n   * @alias notExtensible\n   * @param {Object} object\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotExtensible = function (obj, msg) {\n    new Assertion(obj, msg).to.not.be.extensible;\n  };\n\n  /**\n   * ### .isSealed(object)\n   *\n   * Asserts that `object` is sealed (cannot have new properties added to it\n   * and its existing properties cannot be removed).\n   *\n   *     var sealedObject = Object.seal({});\n   *     var frozenObject = Object.seal({});\n   *\n   *     assert.isSealed(sealedObject);\n   *     assert.isSealed(frozenObject);\n   *\n   * @name isSealed\n   * @alias sealed\n   * @param {Object} object\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isSealed = function (obj, msg) {\n    new Assertion(obj, msg).to.be.sealed;\n  };\n\n  /**\n   * ### .isNotSealed(object)\n   *\n   * Asserts that `object` is _not_ sealed.\n   *\n   *     assert.isNotSealed({});\n   *\n   * @name isNotSealed\n   * @alias notSealed\n   * @param {Object} object\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotSealed = function (obj, msg) {\n    new Assertion(obj, msg).to.not.be.sealed;\n  };\n\n  /**\n   * ### .isFrozen(object)\n   *\n   * Asserts that `object` is frozen (cannot have new properties added to it\n   * and its existing properties cannot be modified).\n   *\n   *     var frozenObject = Object.freeze({});\n   *     assert.frozen(frozenObject);\n   *\n   * @name isFrozen\n   * @alias frozen\n   * @param {Object} object\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isFrozen = function (obj, msg) {\n    new Assertion(obj, msg).to.be.frozen;\n  };\n\n  /**\n   * ### .isNotFrozen(object)\n   *\n   * Asserts that `object` is _not_ frozen.\n   *\n   *     assert.isNotFrozen({});\n   *\n   * @name isNotFrozen\n   * @alias notFrozen\n   * @param {Object} object\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotFrozen = function (obj, msg) {\n    new Assertion(obj, msg).to.not.be.frozen;\n  };\n\n  /*!\n   * Aliases.\n   */\n\n  (function alias(name, as){\n    assert[as] = assert[name];\n    return alias;\n  })\n  ('isOk', 'ok')\n  ('isNotOk', 'notOk')\n  ('throws', 'throw')\n  ('throws', 'Throw')\n  ('isExtensible', 'extensible')\n  ('isNotExtensible', 'notExtensible')\n  ('isSealed', 'sealed')\n  ('isNotSealed', 'notSealed')\n  ('isFrozen', 'frozen')\n  ('isNotFrozen', 'notFrozen');\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chai/lib/chai/interface/assert.js\n// module id = 352\n// module chunks = 1","/*!\n * chai\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nmodule.exports = function (chai, util) {\n  chai.expect = function (val, message) {\n    return new chai.Assertion(val, message);\n  };\n\n  /**\n   * ### .fail(actual, expected, [message], [operator])\n   *\n   * Throw a failure.\n   *\n   * @name fail\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @param {String} operator\n   * @namespace Expect\n   * @api public\n   */\n\n  chai.expect.fail = function (actual, expected, message, operator) {\n    message = message || 'expect.fail()';\n    throw new chai.AssertionError(message, {\n        actual: actual\n      , expected: expected\n      , operator: operator\n    }, chai.expect.fail);\n  };\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chai/lib/chai/interface/expect.js\n// module id = 353\n// module chunks = 1","/*!\n * chai\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nmodule.exports = function (chai, util) {\n  var Assertion = chai.Assertion;\n\n  function loadShould () {\n    // explicitly define this method as function as to have it's name to include as `ssfi`\n    function shouldGetter() {\n      if (this instanceof String || this instanceof Number || this instanceof Boolean ) {\n        return new Assertion(this.valueOf(), null, shouldGetter);\n      }\n      return new Assertion(this, null, shouldGetter);\n    }\n    function shouldSetter(value) {\n      // See https://github.com/chaijs/chai/issues/86: this makes\n      // `whatever.should = someValue` actually set `someValue`, which is\n      // especially useful for `global.should = require('chai').should()`.\n      //\n      // Note that we have to use [[DefineProperty]] instead of [[Put]]\n      // since otherwise we would trigger this very setter!\n      Object.defineProperty(this, 'should', {\n        value: value,\n        enumerable: true,\n        configurable: true,\n        writable: true\n      });\n    }\n    // modify Object.prototype to have `should`\n    Object.defineProperty(Object.prototype, 'should', {\n      set: shouldSetter\n      , get: shouldGetter\n      , configurable: true\n    });\n\n    var should = {};\n\n    /**\n     * ### .fail(actual, expected, [message], [operator])\n     *\n     * Throw a failure.\n     *\n     * @name fail\n     * @param {Mixed} actual\n     * @param {Mixed} expected\n     * @param {String} message\n     * @param {String} operator\n     * @namespace Should\n     * @api public\n     */\n\n    should.fail = function (actual, expected, message, operator) {\n      message = message || 'should.fail()';\n      throw new chai.AssertionError(message, {\n          actual: actual\n        , expected: expected\n        , operator: operator\n      }, should.fail);\n    };\n\n    /**\n     * ### .equal(actual, expected, [message])\n     *\n     * Asserts non-strict equality (`==`) of `actual` and `expected`.\n     *\n     *     should.equal(3, '3', '== coerces values to strings');\n     *\n     * @name equal\n     * @param {Mixed} actual\n     * @param {Mixed} expected\n     * @param {String} message\n     * @namespace Should\n     * @api public\n     */\n\n    should.equal = function (val1, val2, msg) {\n      new Assertion(val1, msg).to.equal(val2);\n    };\n\n    /**\n     * ### .throw(function, [constructor/string/regexp], [string/regexp], [message])\n     *\n     * Asserts that `function` will throw an error that is an instance of\n     * `constructor`, or alternately that it will throw an error with message\n     * matching `regexp`.\n     *\n     *     should.throw(fn, 'function throws a reference error');\n     *     should.throw(fn, /function throws a reference error/);\n     *     should.throw(fn, ReferenceError);\n     *     should.throw(fn, ReferenceError, 'function throws a reference error');\n     *     should.throw(fn, ReferenceError, /function throws a reference error/);\n     *\n     * @name throw\n     * @alias Throw\n     * @param {Function} function\n     * @param {ErrorConstructor} constructor\n     * @param {RegExp} regexp\n     * @param {String} message\n     * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\n     * @namespace Should\n     * @api public\n     */\n\n    should.Throw = function (fn, errt, errs, msg) {\n      new Assertion(fn, msg).to.Throw(errt, errs);\n    };\n\n    /**\n     * ### .exist\n     *\n     * Asserts that the target is neither `null` nor `undefined`.\n     *\n     *     var foo = 'hi';\n     *\n     *     should.exist(foo, 'foo exists');\n     *\n     * @name exist\n     * @namespace Should\n     * @api public\n     */\n\n    should.exist = function (val, msg) {\n      new Assertion(val, msg).to.exist;\n    }\n\n    // negation\n    should.not = {}\n\n    /**\n     * ### .not.equal(actual, expected, [message])\n     *\n     * Asserts non-strict inequality (`!=`) of `actual` and `expected`.\n     *\n     *     should.not.equal(3, 4, 'these numbers are not equal');\n     *\n     * @name not.equal\n     * @param {Mixed} actual\n     * @param {Mixed} expected\n     * @param {String} message\n     * @namespace Should\n     * @api public\n     */\n\n    should.not.equal = function (val1, val2, msg) {\n      new Assertion(val1, msg).to.not.equal(val2);\n    };\n\n    /**\n     * ### .throw(function, [constructor/regexp], [message])\n     *\n     * Asserts that `function` will _not_ throw an error that is an instance of\n     * `constructor`, or alternately that it will not throw an error with message\n     * matching `regexp`.\n     *\n     *     should.not.throw(fn, Error, 'function does not throw');\n     *\n     * @name not.throw\n     * @alias not.Throw\n     * @param {Function} function\n     * @param {ErrorConstructor} constructor\n     * @param {RegExp} regexp\n     * @param {String} message\n     * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\n     * @namespace Should\n     * @api public\n     */\n\n    should.not.Throw = function (fn, errt, errs, msg) {\n      new Assertion(fn, msg).to.not.Throw(errt, errs);\n    };\n\n    /**\n     * ### .not.exist\n     *\n     * Asserts that the target is neither `null` nor `undefined`.\n     *\n     *     var bar = null;\n     *\n     *     should.not.exist(bar, 'bar does not exist');\n     *\n     * @name not.exist\n     * @namespace Should\n     * @api public\n     */\n\n    should.not.exist = function (val, msg) {\n      new Assertion(val, msg).to.not.exist;\n    }\n\n    should['throw'] = should['Throw'];\n    should.not['throw'] = should.not['Throw'];\n\n    return should;\n  };\n\n  chai.should = loadShould;\n  chai.Should = loadShould;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chai/lib/chai/interface/should.js\n// module id = 354\n// module chunks = 1","/*!\n * Chai - addChainingMethod utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Module dependencies\n */\n\nvar transferFlags = require('./transferFlags');\nvar flag = require('./flag');\nvar config = require('../config');\n\n/*!\n * Module variables\n */\n\n// Check whether `__proto__` is supported\nvar hasProtoSupport = '__proto__' in Object;\n\n// Without `__proto__` support, this module will need to add properties to a function.\n// However, some Function.prototype methods cannot be overwritten,\n// and there seems no easy cross-platform way to detect them (@see chaijs/chai/issues/69).\nvar excludeNames = /^(?:length|name|arguments|caller)$/;\n\n// Cache `Function` properties\nvar call  = Function.prototype.call,\n    apply = Function.prototype.apply;\n\n/**\n * ### addChainableMethod (ctx, name, method, chainingBehavior)\n *\n * Adds a method to an object, such that the method can also be chained.\n *\n *     utils.addChainableMethod(chai.Assertion.prototype, 'foo', function (str) {\n *       var obj = utils.flag(this, 'object');\n *       new chai.Assertion(obj).to.be.equal(str);\n *     });\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.addChainableMethod('foo', fn, chainingBehavior);\n *\n * The result can then be used as both a method assertion, executing both `method` and\n * `chainingBehavior`, or as a language chain, which only executes `chainingBehavior`.\n *\n *     expect(fooStr).to.be.foo('bar');\n *     expect(fooStr).to.be.foo.equal('foo');\n *\n * @param {Object} ctx object to which the method is added\n * @param {String} name of method to add\n * @param {Function} method function to be used for `name`, when called\n * @param {Function} chainingBehavior function to be called every time the property is accessed\n * @namespace Utils\n * @name addChainableMethod\n * @api public\n */\n\nmodule.exports = function (ctx, name, method, chainingBehavior) {\n  if (typeof chainingBehavior !== 'function') {\n    chainingBehavior = function () { };\n  }\n\n  var chainableBehavior = {\n      method: method\n    , chainingBehavior: chainingBehavior\n  };\n\n  // save the methods so we can overwrite them later, if we need to.\n  if (!ctx.__methods) {\n    ctx.__methods = {};\n  }\n  ctx.__methods[name] = chainableBehavior;\n\n  Object.defineProperty(ctx, name,\n    { get: function () {\n        chainableBehavior.chainingBehavior.call(this);\n\n        var assert = function assert() {\n          var old_ssfi = flag(this, 'ssfi');\n          if (old_ssfi && config.includeStack === false)\n            flag(this, 'ssfi', assert);\n          var result = chainableBehavior.method.apply(this, arguments);\n          return result === undefined ? this : result;\n        };\n\n        // Use `__proto__` if available\n        if (hasProtoSupport) {\n          // Inherit all properties from the object by replacing the `Function` prototype\n          var prototype = assert.__proto__ = Object.create(this);\n          // Restore the `call` and `apply` methods from `Function`\n          prototype.call = call;\n          prototype.apply = apply;\n        }\n        // Otherwise, redefine all properties (slow!)\n        else {\n          var asserterNames = Object.getOwnPropertyNames(ctx);\n          asserterNames.forEach(function (asserterName) {\n            if (!excludeNames.test(asserterName)) {\n              var pd = Object.getOwnPropertyDescriptor(ctx, asserterName);\n              Object.defineProperty(assert, asserterName, pd);\n            }\n          });\n        }\n\n        transferFlags(this, assert);\n        return assert;\n      }\n    , configurable: true\n  });\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chai/lib/chai/utils/addChainableMethod.js\n// module id = 355\n// module chunks = 1","/*!\n * Chai - addMethod utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar config = require('../config');\n\n/**\n * ### .addMethod (ctx, name, method)\n *\n * Adds a method to the prototype of an object.\n *\n *     utils.addMethod(chai.Assertion.prototype, 'foo', function (str) {\n *       var obj = utils.flag(this, 'object');\n *       new chai.Assertion(obj).to.be.equal(str);\n *     });\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.addMethod('foo', fn);\n *\n * Then can be used as any other assertion.\n *\n *     expect(fooStr).to.be.foo('bar');\n *\n * @param {Object} ctx object to which the method is added\n * @param {String} name of method to add\n * @param {Function} method function to be used for name\n * @namespace Utils\n * @name addMethod\n * @api public\n */\nvar flag = require('./flag');\n\nmodule.exports = function (ctx, name, method) {\n  ctx[name] = function () {\n    var old_ssfi = flag(this, 'ssfi');\n    if (old_ssfi && config.includeStack === false)\n      flag(this, 'ssfi', ctx[name]);\n    var result = method.apply(this, arguments);\n    return result === undefined ? this : result;\n  };\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chai/lib/chai/utils/addMethod.js\n// module id = 356\n// module chunks = 1","/*!\n * Chai - addProperty utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar config = require('../config');\nvar flag = require('./flag');\n\n/**\n * ### addProperty (ctx, name, getter)\n *\n * Adds a property to the prototype of an object.\n *\n *     utils.addProperty(chai.Assertion.prototype, 'foo', function () {\n *       var obj = utils.flag(this, 'object');\n *       new chai.Assertion(obj).to.be.instanceof(Foo);\n *     });\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.addProperty('foo', fn);\n *\n * Then can be used as any other assertion.\n *\n *     expect(myFoo).to.be.foo;\n *\n * @param {Object} ctx object to which the property is added\n * @param {String} name of property to add\n * @param {Function} getter function to be used for name\n * @namespace Utils\n * @name addProperty\n * @api public\n */\n\nmodule.exports = function (ctx, name, getter) {\n  Object.defineProperty(ctx, name,\n    { get: function addProperty() {\n        var old_ssfi = flag(this, 'ssfi');\n        if (old_ssfi && config.includeStack === false)\n          flag(this, 'ssfi', addProperty);\n\n        var result = getter.call(this);\n        return result === undefined ? this : result;\n      }\n    , configurable: true\n  });\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chai/lib/chai/utils/addProperty.js\n// module id = 357\n// module chunks = 1","/*!\n * Chai - expectTypes utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### expectTypes(obj, types)\n *\n * Ensures that the object being tested against is of a valid type.\n *\n *     utils.expectTypes(this, ['array', 'object', 'string']);\n *\n * @param {Mixed} obj constructed Assertion\n * @param {Array} type A list of allowed types for this assertion\n * @namespace Utils\n * @name expectTypes\n * @api public\n */\n\nvar AssertionError = require('assertion-error');\nvar flag = require('./flag');\nvar type = require('type-detect');\n\nmodule.exports = function (obj, types) {\n  var obj = flag(obj, 'object');\n  types = types.map(function (t) { return t.toLowerCase(); });\n  types.sort();\n\n  // Transforms ['lorem', 'ipsum'] into 'a lirum, or an ipsum'\n  var str = types.map(function (t, index) {\n    var art = ~[ 'a', 'e', 'i', 'o', 'u' ].indexOf(t.charAt(0)) ? 'an' : 'a';\n    var or = types.length > 1 && index === types.length - 1 ? 'or ' : '';\n    return or + art + ' ' + t;\n  }).join(', ');\n\n  if (!types.some(function (expected) { return type(obj) === expected; })) {\n    throw new AssertionError(\n      'object tested must be ' + str + ', but ' + type(obj) + ' given'\n    );\n  }\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chai/lib/chai/utils/expectTypes.js\n// module id = 358\n// module chunks = 1","/*!\n * Chai - getEnumerableProperties utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .getEnumerableProperties(object)\n *\n * This allows the retrieval of enumerable property names of an object,\n * inherited or not.\n *\n * @param {Object} object\n * @returns {Array}\n * @namespace Utils\n * @name getEnumerableProperties\n * @api public\n */\n\nmodule.exports = function getEnumerableProperties(object) {\n  var result = [];\n  for (var name in object) {\n    result.push(name);\n  }\n  return result;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chai/lib/chai/utils/getEnumerableProperties.js\n// module id = 359\n// module chunks = 1","/*!\n * Chai - message composition utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Module dependancies\n */\n\nvar flag = require('./flag')\n  , getActual = require('./getActual')\n  , inspect = require('./inspect')\n  , objDisplay = require('./objDisplay');\n\n/**\n * ### .getMessage(object, message, negateMessage)\n *\n * Construct the error message based on flags\n * and template tags. Template tags will return\n * a stringified inspection of the object referenced.\n *\n * Message template tags:\n * - `#{this}` current asserted object\n * - `#{act}` actual value\n * - `#{exp}` expected value\n *\n * @param {Object} object (constructed Assertion)\n * @param {Arguments} chai.Assertion.prototype.assert arguments\n * @namespace Utils\n * @name getMessage\n * @api public\n */\n\nmodule.exports = function (obj, args) {\n  var negate = flag(obj, 'negate')\n    , val = flag(obj, 'object')\n    , expected = args[3]\n    , actual = getActual(obj, args)\n    , msg = negate ? args[2] : args[1]\n    , flagMsg = flag(obj, 'message');\n\n  if(typeof msg === \"function\") msg = msg();\n  msg = msg || '';\n  msg = msg\n    .replace(/#\\{this\\}/g, function () { return objDisplay(val); })\n    .replace(/#\\{act\\}/g, function () { return objDisplay(actual); })\n    .replace(/#\\{exp\\}/g, function () { return objDisplay(expected); });\n\n  return flagMsg ? flagMsg + ': ' + msg : msg;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chai/lib/chai/utils/getMessage.js\n// module id = 360\n// module chunks = 1","/*!\n * Chai - getPathValue utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * @see https://github.com/logicalparadox/filtr\n * MIT Licensed\n */\n\nvar getPathInfo = require('./getPathInfo');\n\n/**\n * ### .getPathValue(path, object)\n *\n * This allows the retrieval of values in an\n * object given a string path.\n *\n *     var obj = {\n *         prop1: {\n *             arr: ['a', 'b', 'c']\n *           , str: 'Hello'\n *         }\n *       , prop2: {\n *             arr: [ { nested: 'Universe' } ]\n *           , str: 'Hello again!'\n *         }\n *     }\n *\n * The following would be the results.\n *\n *     getPathValue('prop1.str', obj); // Hello\n *     getPathValue('prop1.att[2]', obj); // b\n *     getPathValue('prop2.arr[0].nested', obj); // Universe\n *\n * @param {String} path\n * @param {Object} object\n * @returns {Object} value or `undefined`\n * @namespace Utils\n * @name getPathValue\n * @api public\n */\nmodule.exports = function(path, obj) {\n  var info = getPathInfo(path, obj);\n  return info.value;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chai/lib/chai/utils/getPathValue.js\n// module id = 361\n// module chunks = 1","/*!\n * Chai - getProperties utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .getProperties(object)\n *\n * This allows the retrieval of property names of an object, enumerable or not,\n * inherited or not.\n *\n * @param {Object} object\n * @returns {Array}\n * @namespace Utils\n * @name getProperties\n * @api public\n */\n\nmodule.exports = function getProperties(object) {\n  var result = Object.getOwnPropertyNames(object);\n\n  function addProperty(property) {\n    if (result.indexOf(property) === -1) {\n      result.push(property);\n    }\n  }\n\n  var proto = Object.getPrototypeOf(object);\n  while (proto !== null) {\n    Object.getOwnPropertyNames(proto).forEach(addProperty);\n    proto = Object.getPrototypeOf(proto);\n  }\n\n  return result;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chai/lib/chai/utils/getProperties.js\n// module id = 362\n// module chunks = 1","/*!\n * chai\n * Copyright(c) 2011 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Main exports\n */\n\nvar exports = module.exports = {};\n\n/*!\n * test utility\n */\n\nexports.test = require('./test');\n\n/*!\n * type utility\n */\n\nexports.type = require('type-detect');\n\n/*!\n * expectTypes utility\n */\nexports.expectTypes = require('./expectTypes');\n\n/*!\n * message utility\n */\n\nexports.getMessage = require('./getMessage');\n\n/*!\n * actual utility\n */\n\nexports.getActual = require('./getActual');\n\n/*!\n * Inspect util\n */\n\nexports.inspect = require('./inspect');\n\n/*!\n * Object Display util\n */\n\nexports.objDisplay = require('./objDisplay');\n\n/*!\n * Flag utility\n */\n\nexports.flag = require('./flag');\n\n/*!\n * Flag transferring utility\n */\n\nexports.transferFlags = require('./transferFlags');\n\n/*!\n * Deep equal utility\n */\n\nexports.eql = require('deep-eql');\n\n/*!\n * Deep path value\n */\n\nexports.getPathValue = require('./getPathValue');\n\n/*!\n * Deep path info\n */\n\nexports.getPathInfo = require('./getPathInfo');\n\n/*!\n * Check if a property exists\n */\n\nexports.hasProperty = require('./hasProperty');\n\n/*!\n * Function name\n */\n\nexports.getName = require('./getName');\n\n/*!\n * add Property\n */\n\nexports.addProperty = require('./addProperty');\n\n/*!\n * add Method\n */\n\nexports.addMethod = require('./addMethod');\n\n/*!\n * overwrite Property\n */\n\nexports.overwriteProperty = require('./overwriteProperty');\n\n/*!\n * overwrite Method\n */\n\nexports.overwriteMethod = require('./overwriteMethod');\n\n/*!\n * Add a chainable method\n */\n\nexports.addChainableMethod = require('./addChainableMethod');\n\n/*!\n * Overwrite chainable method\n */\n\nexports.overwriteChainableMethod = require('./overwriteChainableMethod');\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chai/lib/chai/utils/index.js\n// module id = 363\n// module chunks = 1","/*!\n * Chai - overwriteChainableMethod utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### overwriteChainableMethod (ctx, name, method, chainingBehavior)\n *\n * Overwites an already existing chainable method\n * and provides access to the previous function or\n * property.  Must return functions to be used for\n * name.\n *\n *     utils.overwriteChainableMethod(chai.Assertion.prototype, 'length',\n *       function (_super) {\n *       }\n *     , function (_super) {\n *       }\n *     );\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.overwriteChainableMethod('foo', fn, fn);\n *\n * Then can be used as any other assertion.\n *\n *     expect(myFoo).to.have.length(3);\n *     expect(myFoo).to.have.length.above(3);\n *\n * @param {Object} ctx object whose method / property is to be overwritten\n * @param {String} name of method / property to overwrite\n * @param {Function} method function that returns a function to be used for name\n * @param {Function} chainingBehavior function that returns a function to be used for property\n * @namespace Utils\n * @name overwriteChainableMethod\n * @api public\n */\n\nmodule.exports = function (ctx, name, method, chainingBehavior) {\n  var chainableBehavior = ctx.__methods[name];\n\n  var _chainingBehavior = chainableBehavior.chainingBehavior;\n  chainableBehavior.chainingBehavior = function () {\n    var result = chainingBehavior(_chainingBehavior).call(this);\n    return result === undefined ? this : result;\n  };\n\n  var _method = chainableBehavior.method;\n  chainableBehavior.method = function () {\n    var result = method(_method).apply(this, arguments);\n    return result === undefined ? this : result;\n  };\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chai/lib/chai/utils/overwriteChainableMethod.js\n// module id = 364\n// module chunks = 1","/*!\n * Chai - overwriteMethod utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### overwriteMethod (ctx, name, fn)\n *\n * Overwites an already existing method and provides\n * access to previous function. Must return function\n * to be used for name.\n *\n *     utils.overwriteMethod(chai.Assertion.prototype, 'equal', function (_super) {\n *       return function (str) {\n *         var obj = utils.flag(this, 'object');\n *         if (obj instanceof Foo) {\n *           new chai.Assertion(obj.value).to.equal(str);\n *         } else {\n *           _super.apply(this, arguments);\n *         }\n *       }\n *     });\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.overwriteMethod('foo', fn);\n *\n * Then can be used as any other assertion.\n *\n *     expect(myFoo).to.equal('bar');\n *\n * @param {Object} ctx object whose method is to be overwritten\n * @param {String} name of method to overwrite\n * @param {Function} method function that returns a function to be used for name\n * @namespace Utils\n * @name overwriteMethod\n * @api public\n */\n\nmodule.exports = function (ctx, name, method) {\n  var _method = ctx[name]\n    , _super = function () { return this; };\n\n  if (_method && 'function' === typeof _method)\n    _super = _method;\n\n  ctx[name] = function () {\n    var result = method(_super).apply(this, arguments);\n    return result === undefined ? this : result;\n  }\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chai/lib/chai/utils/overwriteMethod.js\n// module id = 365\n// module chunks = 1","/*!\n * Chai - overwriteProperty utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### overwriteProperty (ctx, name, fn)\n *\n * Overwites an already existing property getter and provides\n * access to previous value. Must return function to use as getter.\n *\n *     utils.overwriteProperty(chai.Assertion.prototype, 'ok', function (_super) {\n *       return function () {\n *         var obj = utils.flag(this, 'object');\n *         if (obj instanceof Foo) {\n *           new chai.Assertion(obj.name).to.equal('bar');\n *         } else {\n *           _super.call(this);\n *         }\n *       }\n *     });\n *\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.overwriteProperty('foo', fn);\n *\n * Then can be used as any other assertion.\n *\n *     expect(myFoo).to.be.ok;\n *\n * @param {Object} ctx object whose property is to be overwritten\n * @param {String} name of property to overwrite\n * @param {Function} getter function that returns a getter function to be used for name\n * @namespace Utils\n * @name overwriteProperty\n * @api public\n */\n\nmodule.exports = function (ctx, name, getter) {\n  var _get = Object.getOwnPropertyDescriptor(ctx, name)\n    , _super = function () {};\n\n  if (_get && 'function' === typeof _get.get)\n    _super = _get.get\n\n  Object.defineProperty(ctx, name,\n    { get: function () {\n        var result = getter(_super).call(this);\n        return result === undefined ? this : result;\n      }\n    , configurable: true\n  });\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chai/lib/chai/utils/overwriteProperty.js\n// module id = 366\n// module chunks = 1","/*!\n * Chai - test utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Module dependancies\n */\n\nvar flag = require('./flag');\n\n/**\n * # test(object, expression)\n *\n * Test and object for expression.\n *\n * @param {Object} object (constructed Assertion)\n * @param {Arguments} chai.Assertion.prototype.assert arguments\n * @namespace Utils\n * @name test\n */\n\nmodule.exports = function (obj, args) {\n  var negate = flag(obj, 'negate')\n    , expr = args[0];\n  return negate ? !expr : expr;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chai/lib/chai/utils/test.js\n// module id = 367\n// module chunks = 1","module.exports = require('./lib/eql');\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chai/~/deep-eql/index.js\n// module id = 368\n// module chunks = 1","/*!\n * deep-eql\n * Copyright(c) 2013 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Module dependencies\n */\n\nvar type = require('type-detect');\n\n/*!\n * Buffer.isBuffer browser shim\n */\n\nvar Buffer;\ntry { Buffer = require('buffer').Buffer; }\ncatch(ex) {\n  Buffer = {};\n  Buffer.isBuffer = function() { return false; }\n}\n\n/*!\n * Primary Export\n */\n\nmodule.exports = deepEqual;\n\n/**\n * Assert super-strict (egal) equality between\n * two objects of any type.\n *\n * @param {Mixed} a\n * @param {Mixed} b\n * @param {Array} memoised (optional)\n * @return {Boolean} equal match\n */\n\nfunction deepEqual(a, b, m) {\n  if (sameValue(a, b)) {\n    return true;\n  } else if ('date' === type(a)) {\n    return dateEqual(a, b);\n  } else if ('regexp' === type(a)) {\n    return regexpEqual(a, b);\n  } else if (Buffer.isBuffer(a)) {\n    return bufferEqual(a, b);\n  } else if ('arguments' === type(a)) {\n    return argumentsEqual(a, b, m);\n  } else if (!typeEqual(a, b)) {\n    return false;\n  } else if (('object' !== type(a) && 'object' !== type(b))\n  && ('array' !== type(a) && 'array' !== type(b))) {\n    return sameValue(a, b);\n  } else {\n    return objectEqual(a, b, m);\n  }\n}\n\n/*!\n * Strict (egal) equality test. Ensures that NaN always\n * equals NaN and `-0` does not equal `+0`.\n *\n * @param {Mixed} a\n * @param {Mixed} b\n * @return {Boolean} equal match\n */\n\nfunction sameValue(a, b) {\n  if (a === b) return a !== 0 || 1 / a === 1 / b;\n  return a !== a && b !== b;\n}\n\n/*!\n * Compare the types of two given objects and\n * return if they are equal. Note that an Array\n * has a type of `array` (not `object`) and arguments\n * have a type of `arguments` (not `array`/`object`).\n *\n * @param {Mixed} a\n * @param {Mixed} b\n * @return {Boolean} result\n */\n\nfunction typeEqual(a, b) {\n  return type(a) === type(b);\n}\n\n/*!\n * Compare two Date objects by asserting that\n * the time values are equal using `saveValue`.\n *\n * @param {Date} a\n * @param {Date} b\n * @return {Boolean} result\n */\n\nfunction dateEqual(a, b) {\n  if ('date' !== type(b)) return false;\n  return sameValue(a.getTime(), b.getTime());\n}\n\n/*!\n * Compare two regular expressions by converting them\n * to string and checking for `sameValue`.\n *\n * @param {RegExp} a\n * @param {RegExp} b\n * @return {Boolean} result\n */\n\nfunction regexpEqual(a, b) {\n  if ('regexp' !== type(b)) return false;\n  return sameValue(a.toString(), b.toString());\n}\n\n/*!\n * Assert deep equality of two `arguments` objects.\n * Unfortunately, these must be sliced to arrays\n * prior to test to ensure no bad behavior.\n *\n * @param {Arguments} a\n * @param {Arguments} b\n * @param {Array} memoize (optional)\n * @return {Boolean} result\n */\n\nfunction argumentsEqual(a, b, m) {\n  if ('arguments' !== type(b)) return false;\n  a = [].slice.call(a);\n  b = [].slice.call(b);\n  return deepEqual(a, b, m);\n}\n\n/*!\n * Get enumerable properties of a given object.\n *\n * @param {Object} a\n * @return {Array} property names\n */\n\nfunction enumerable(a) {\n  var res = [];\n  for (var key in a) res.push(key);\n  return res;\n}\n\n/*!\n * Simple equality for flat iterable objects\n * such as Arrays or Node.js buffers.\n *\n * @param {Iterable} a\n * @param {Iterable} b\n * @return {Boolean} result\n */\n\nfunction iterableEqual(a, b) {\n  if (a.length !==  b.length) return false;\n\n  var i = 0;\n  var match = true;\n\n  for (; i < a.length; i++) {\n    if (a[i] !== b[i]) {\n      match = false;\n      break;\n    }\n  }\n\n  return match;\n}\n\n/*!\n * Extension to `iterableEqual` specifically\n * for Node.js Buffers.\n *\n * @param {Buffer} a\n * @param {Mixed} b\n * @return {Boolean} result\n */\n\nfunction bufferEqual(a, b) {\n  if (!Buffer.isBuffer(b)) return false;\n  return iterableEqual(a, b);\n}\n\n/*!\n * Block for `objectEqual` ensuring non-existing\n * values don't get in.\n *\n * @param {Mixed} object\n * @return {Boolean} result\n */\n\nfunction isValue(a) {\n  return a !== null && a !== undefined;\n}\n\n/*!\n * Recursively check the equality of two objects.\n * Once basic sameness has been established it will\n * defer to `deepEqual` for each enumerable key\n * in the object.\n *\n * @param {Mixed} a\n * @param {Mixed} b\n * @return {Boolean} result\n */\n\nfunction objectEqual(a, b, m) {\n  if (!isValue(a) || !isValue(b)) {\n    return false;\n  }\n\n  if (a.prototype !== b.prototype) {\n    return false;\n  }\n\n  var i;\n  if (m) {\n    for (i = 0; i < m.length; i++) {\n      if ((m[i][0] === a && m[i][1] === b)\n      ||  (m[i][0] === b && m[i][1] === a)) {\n        return true;\n      }\n    }\n  } else {\n    m = [];\n  }\n\n  try {\n    var ka = enumerable(a);\n    var kb = enumerable(b);\n  } catch (ex) {\n    return false;\n  }\n\n  ka.sort();\n  kb.sort();\n\n  if (!iterableEqual(ka, kb)) {\n    return false;\n  }\n\n  m.push([ a, b ]);\n\n  var key;\n  for (i = ka.length - 1; i >= 0; i--) {\n    key = ka[i];\n    if (!deepEqual(a[key], b[key], m)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chai/~/deep-eql/lib/eql.js\n// module id = 369\n// module chunks = 1","module.exports = require('./lib/type');\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chai/~/deep-eql/~/type-detect/index.js\n// module id = 370\n// module chunks = 1","/*!\n * type-detect\n * Copyright(c) 2013 jake luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Primary Exports\n */\n\nvar exports = module.exports = getType;\n\n/*!\n * Detectable javascript natives\n */\n\nvar natives = {\n    '[object Array]': 'array'\n  , '[object RegExp]': 'regexp'\n  , '[object Function]': 'function'\n  , '[object Arguments]': 'arguments'\n  , '[object Date]': 'date'\n};\n\n/**\n * ### typeOf (obj)\n *\n * Use several different techniques to determine\n * the type of object being tested.\n *\n *\n * @param {Mixed} object\n * @return {String} object type\n * @api public\n */\n\nfunction getType (obj) {\n  var str = Object.prototype.toString.call(obj);\n  if (natives[str]) return natives[str];\n  if (obj === null) return 'null';\n  if (obj === undefined) return 'undefined';\n  if (obj === Object(obj)) return 'object';\n  return typeof obj;\n}\n\nexports.Library = Library;\n\n/**\n * ### Library\n *\n * Create a repository for custom type detection.\n *\n * ```js\n * var lib = new type.Library;\n * ```\n *\n */\n\nfunction Library () {\n  this.tests = {};\n}\n\n/**\n * #### .of (obj)\n *\n * Expose replacement `typeof` detection to the library.\n *\n * ```js\n * if ('string' === lib.of('hello world')) {\n *   // ...\n * }\n * ```\n *\n * @param {Mixed} object to test\n * @return {String} type\n */\n\nLibrary.prototype.of = getType;\n\n/**\n * #### .define (type, test)\n *\n * Add a test to for the `.test()` assertion.\n *\n * Can be defined as a regular expression:\n *\n * ```js\n * lib.define('int', /^[0-9]+$/);\n * ```\n *\n * ... or as a function:\n *\n * ```js\n * lib.define('bln', function (obj) {\n *   if ('boolean' === lib.of(obj)) return true;\n *   var blns = [ 'yes', 'no', 'true', 'false', 1, 0 ];\n *   if ('string' === lib.of(obj)) obj = obj.toLowerCase();\n *   return !! ~blns.indexOf(obj);\n * });\n * ```\n *\n * @param {String} type\n * @param {RegExp|Function} test\n * @api public\n */\n\nLibrary.prototype.define = function (type, test) {\n  if (arguments.length === 1) return this.tests[type];\n  this.tests[type] = test;\n  return this;\n};\n\n/**\n * #### .test (obj, test)\n *\n * Assert that an object is of type. Will first\n * check natives, and if that does not pass it will\n * use the user defined custom tests.\n *\n * ```js\n * assert(lib.test('1', 'int'));\n * assert(lib.test('yes', 'bln'));\n * ```\n *\n * @param {Mixed} object\n * @param {String} type\n * @return {Boolean} result\n * @api public\n */\n\nLibrary.prototype.test = function (obj, type) {\n  if (type === getType(obj)) return true;\n  var test = this.tests[type];\n\n  if (test && 'regexp' === getType(test)) {\n    return test.test(obj);\n  } else if (test && 'function' === getType(test)) {\n    return test(obj);\n  } else {\n    throw new ReferenceError('Type test \"' + type + '\" not defined or invalid.');\n  }\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chai/~/deep-eql/~/type-detect/lib/type.js\n// module id = 371\n// module chunks = 1","/*!\n * type-detect\n * Copyright(c) 2013 jake luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Primary Exports\n */\n\nvar exports = module.exports = getType;\n\n/**\n * ### typeOf (obj)\n *\n * Use several different techniques to determine\n * the type of object being tested.\n *\n *\n * @param {Mixed} object\n * @return {String} object type\n * @api public\n */\nvar objectTypeRegexp = /^\\[object (.*)\\]$/;\n\nfunction getType(obj) {\n  var type = Object.prototype.toString.call(obj).match(objectTypeRegexp)[1].toLowerCase();\n  // Let \"new String('')\" return 'object'\n  if (typeof Promise === 'function' && obj instanceof Promise) return 'promise';\n  // PhantomJS has type \"DOMWindow\" for null\n  if (obj === null) return 'null';\n  // PhantomJS has type \"DOMWindow\" for undefined\n  if (obj === undefined) return 'undefined';\n  return type;\n}\n\nexports.Library = Library;\n\n/**\n * ### Library\n *\n * Create a repository for custom type detection.\n *\n * ```js\n * var lib = new type.Library;\n * ```\n *\n */\n\nfunction Library() {\n  if (!(this instanceof Library)) return new Library();\n  this.tests = {};\n}\n\n/**\n * #### .of (obj)\n *\n * Expose replacement `typeof` detection to the library.\n *\n * ```js\n * if ('string' === lib.of('hello world')) {\n *   // ...\n * }\n * ```\n *\n * @param {Mixed} object to test\n * @return {String} type\n */\n\nLibrary.prototype.of = getType;\n\n/**\n * #### .define (type, test)\n *\n * Add a test to for the `.test()` assertion.\n *\n * Can be defined as a regular expression:\n *\n * ```js\n * lib.define('int', /^[0-9]+$/);\n * ```\n *\n * ... or as a function:\n *\n * ```js\n * lib.define('bln', function (obj) {\n *   if ('boolean' === lib.of(obj)) return true;\n *   var blns = [ 'yes', 'no', 'true', 'false', 1, 0 ];\n *   if ('string' === lib.of(obj)) obj = obj.toLowerCase();\n *   return !! ~blns.indexOf(obj);\n * });\n * ```\n *\n * @param {String} type\n * @param {RegExp|Function} test\n * @api public\n */\n\nLibrary.prototype.define = function(type, test) {\n  if (arguments.length === 1) return this.tests[type];\n  this.tests[type] = test;\n  return this;\n};\n\n/**\n * #### .test (obj, test)\n *\n * Assert that an object is of type. Will first\n * check natives, and if that does not pass it will\n * use the user defined custom tests.\n *\n * ```js\n * assert(lib.test('1', 'int'));\n * assert(lib.test('yes', 'bln'));\n * ```\n *\n * @param {Mixed} object\n * @param {String} type\n * @return {Boolean} result\n * @api public\n */\n\nLibrary.prototype.test = function(obj, type) {\n  if (type === getType(obj)) return true;\n  var test = this.tests[type];\n\n  if (test && 'regexp' === getType(test)) {\n    return test.test(obj);\n  } else if (test && 'function' === getType(test)) {\n    return test(obj);\n  } else {\n    throw new ReferenceError('Type test \"' + type + '\" not defined or invalid.');\n  }\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chai/~/type-detect/lib/type.js\n// module id = 372\n// module chunks = 1","module.exports = require(\"os\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"os\"\n// module id = 38\n// module chunks = 0 1","module.exports = require(\"buffer\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"buffer\"\n// module id = 433\n// module chunks = 1","/* global describe:false, before:false, it:false */\n\nrequire('./store.js');\nrequire('./martians+robots.js');\nrequire('./controller.js');\nrequire('./cardinalPoints.js');\nrequire('./config+helpers.js');\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./tests/tests.js\n// module id = 438\n// module chunks = 1","/*!\n * Chai - flag utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### flag(object, key, [value])\n *\n * Get or set a flag value on an object. If a\n * value is provided it will be set, else it will\n * return the currently set value or `undefined` if\n * the value is not set.\n *\n *     utils.flag(this, 'foo', 'bar'); // setter\n *     utils.flag(this, 'foo'); // getter, returns `bar`\n *\n * @param {Object} object constructed Assertion\n * @param {String} key\n * @param {Mixed} value (optional)\n * @namespace Utils\n * @name flag\n * @api private\n */\n\nmodule.exports = function (obj, key, value) {\n  var flags = obj.__flags || (obj.__flags = Object.create(null));\n  if (arguments.length === 3) {\n    flags[key] = value;\n  } else {\n    return flags[key];\n  }\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chai/lib/chai/utils/flag.js\n// module id = 48\n// module chunks = 1","var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n/** @module Martian Robot **/\n\nimport Martian from './martian';\nimport { isPosSafe } from '../helpers';\nimport { bounds } from '../config';\nimport { lostList } from '../store';\n\nvar _processMotion = new WeakMap();\nvar _hasScent = new WeakMap();\n\n/*\n * defines a martian robot and its current state\n * a martian robot will \"fall off\" the boundaries of mars\n * or be inhibited from falling off where another robot has fallen off\n * @extends Martian\n */\n\nvar MartianRobot = function (_Martian) {\n  _inherits(MartianRobot, _Martian);\n\n  /**\n   *\n   /**\n   *\n   * @param {string}   name        robot name: defaults to time string\n   * @param {number} x           robot x coordinate: default to zero\n   * @param {number} y           robot y coordinate: default to zero\n   * @param {string}   orientation\n   * robot orientation, must be a valid CardinalPoint or will default to north\n   * @param {boolean} isAlive     robot status, defaults to true\n   */\n  function MartianRobot(name, x, y, orientation) {\n    _classCallCheck(this, MartianRobot);\n\n    var _this = _possibleConstructorReturn(this, (MartianRobot.__proto__ || Object.getPrototypeOf(MartianRobot)).call(this, name, x, y, orientation));\n\n    _this._isAlive = true;\n\n    /**\n     * Private methods via WeakMaps:\n     * http://exploringjs.com/es6/ch_classes.html#_private-data-via-weakmaps\n     *\n     * I wanted utility/helper functions. By definition I don't want these to show up\n     * as a robot method. At first I thought, utility module/class thingermabob i.e. robotHelpers.js.\n     * But that seemed to depart from \"encapsulation\" and the \"single responsibility principle\"; also the internets says thats a anti-pattern/code smell\n     * This method works well, but the internets also says its a bit of a memory hog.\n     * Its making each instantiation more expensive;\n     * in my head these helpers should only exist once and be called on-demand. *shrugs*\n     *\n     * @param {number} tempPos: position to move to if valid\n     * @param {string} axis: x or y axis to move along\n     */\n    _processMotion.set(_this, function (tempPos, axis) {\n      var hs = _hasScent.get(_this);\n\n      switch (hs(_this.point, tempPos, bounds.point.get(axis))) {\n        case 0:\n          break;\n        case 1:\n          _this._isAlive = false;\n          lostList.push(_this.point);\n          break;\n        case 2:\n          _this[axis] = tempPos;\n          break;\n        default:\n        // do nothing\n      }\n    });\n\n    /**\n     * Lost robots leave a robot “scent” which we store in `lostList[]`.\n     * The scent prohibits future robots from dropping off the world at the same grid point.\n     * The scent is left at the last grid position the robot occupied before disappearing over the edge.\n     * We ignore instructions to to move “off” the world from a grid point from which a robot has been lost.\n     *\n     * @param {string} pointStr: 'x,y' coords\n     * @param {number} tempPos: instructed position\n     * @param {number} axisBounds: intructed boundary axis\n     * @returns {boolean || null}:\n     * - 0: check if location has scent by looking in the lost list\n     * then if the next move is fatal, don't move robot\n     *\n     * - 1: if location does NOT have a scent and the next move is fatal let it happen,\n     * but add the location to the lost list and update the bot status to LOST\n     *\n     * - 2: if the next move is safe let it happen\n     */\n    _hasScent.set(_this, function (pointStr, tempPos, axisBounds) {\n      if (lostList.find(function (point) {\n        return point === pointStr;\n      }) && !isPosSafe(tempPos, axisBounds)) {\n        return 0;\n      } else if (!isPosSafe(tempPos, axisBounds)) {\n        return 1;\n      }\n\n      return 2;\n    });\n    return _this;\n  }\n\n  _createClass(MartianRobot, [{\n    key: 'move',\n\n\n    /**\n     * orientation determines which axis to increment/decrement along\n     */\n    value: function move() {\n      var pm = _processMotion.get(this);\n\n      switch (this._orientation) {\n        case 'N':\n          pm(this._y + 1, 'y');\n          break;\n        case 'S':\n          pm(this._y - 1, 'y');\n          break;\n        case 'E':\n          pm(this._x + 1, 'x');\n          break;\n        case 'W':\n          pm(this._x - 1, 'x');\n          break;\n        default:\n        // do nothing\n      }\n    }\n  }, {\n    key: 'isAlive',\n    set: function set(value) {\n      if (typeof value === 'boolean') {\n        this._isAlive = value;\n      } else {\n        //          this._isAlive = true;\n        throw new Error('A robot can only be alive (true) or lost (false).');\n      }\n    },\n    get: function get() {\n      return this._isAlive;\n    }\n  }, {\n    key: 'type',\n    get: function get() {\n      return 'Robot';\n    }\n  }]);\n\n  return MartianRobot;\n}(Martian);\n\nexport default MartianRobot;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/classes/martianRobot.js\n// module id = 49\n// module chunks = 0 1","function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\n/** @module Controller */\n\nimport { MAX_INSTRUCTION } from './config';\nimport { beingAsEmoji } from './helpers';\nimport os from 'os';\n\n/**\n * Calls the approrpriate action\n *\n * @private\n * @param {string} char  Left/Right/Forward\n * @param {object} being: the object we're acting on\n * @return {boolean} is being lost?\n */\nfunction _processCommands(char, being) {\n  switch (char) {\n    case 'L':\n    case 'R':\n      being.turn(char);\n      break;\n    case 'F':\n      being.move();\n      break;\n    default:\n      console.log('Invalid command received while processing \\'' + being.name + '\\', moving to next character.');\n  }\n\n  return being.isAlive; // dealbreaking flag, halts looping on false (robot lost)\n}\n\n/**\n *\n * @param   {object} being: robot or martian\n * @param   {string} instructionsStr: intructions for moving a robot or martian\n * @returns {object} returns a updated martian or robot\n */\nexport function instruct(being, instructionsStr) {\n  var str = instructionsStr.trim().substring(0, MAX_INSTRUCTION);\n\n  for (var i = 0; i < str.length; i++) {\n    if (_processCommands(str.charAt(i).toUpperCase(), being) === false) {\n      break;\n    }\n  }\n  return being;\n}\n\n/**\n *\n * @param   {Map.values}    mars      collection of martians and robots to print\n * @returns {String}    formatted string\n */\nexport function printMars(mars) {\n  var arr = mars.map(function (value) {\n    return '' + (os.type() === 'Darwin' ? beingAsEmoji(value.toString(true)) : value.toString(true));\n  });\n\n  var arrStr = arr.toString().replace(/,/g, '\\n');\n  return { array: arr, string: arrStr };\n}\n\n/**\n *\n * @param   {Map.values}    mars      collection of martians and robots to filter\n * @param   {string|binary} condition value to filter against\n * @param   {string} property  = 'type' martian or robot property to compare condition\n * @returns {Array & String} filtered array with formatted filtered results\n * returns string with emoji if OSX (Darwin)\n */\nexport function searchMars(mars, condition) {\n  var property = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'type';\n\n  var arr = printMars([].concat(_toConsumableArray(mars)).filter(function (value) {\n    return value[property] === condition;\n  }));\n\n  return { array: arr.array, string: arr.string };\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/controller.js\n// module id = 50\n// module chunks = 0 1","var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/** @module Store */\n\nexport var lostList = []; // manages grid points of lost robots\n\nvar _mars = new WeakMap();\n\n/**\n * Storage object and methods\n */\n\nvar Store = function () {\n  function Store() {\n    _classCallCheck(this, Store);\n\n    _mars.set(this, new Map());\n  }\n\n  /**\n   *\n   * @throws {Error} only add martians or robots\n   * @param   {Array} ...martian: add one... or add many\n   * @returns {number} size of mars Map\n   */\n\n\n  _createClass(Store, [{\n    key: 'add',\n    value: function add() {\n      var mars = _mars.get(this);\n\n      for (var _len = arguments.length, martian = Array(_len), _key = 0; _key < _len; _key++) {\n        martian[_key] = arguments[_key];\n      }\n\n      martian.forEach(function (m) {\n        try {\n          if (['Martian', 'Robot'].includes(m.type)) {\n            mars.set(m.name, m);\n          }\n        } catch (e) {\n          throw new Error('Can only store Martians and Robots.');\n        }\n      });\n\n      return mars.size;\n    }\n\n    /**\n     *\n     * @param   {object}   martian to act on\n     * @returns {boolean} reflect if boolean was successful\n     */\n\n  }, {\n    key: 'update',\n    value: function update(martian) {\n      var mars = _mars.get(this);\n\n      if (mars.has(martian.name)) {\n        mars.set(martian.name, martian);\n      }\n\n      return mars.has(martian.name);\n    }\n\n    /**\n     *\n     * @param   {string} martianName: use as key to delete from mars\n     * @returns {boolean} confirm deletion\n     */\n\n  }, {\n    key: 'remove',\n    value: function remove(martianName) {\n      var mars = _mars.get(this);\n      return mars.delete(martianName);\n    }\n\n    /**\n     *\n     * @param   {string} martianName: key to retrieve\n     * @returns {object} martian/robot or undefined\n     */\n\n  }, {\n    key: 'get',\n    value: function get(martianName) {\n      var mars = _mars.get(this);\n      return mars.get(martianName);\n    }\n\n    /**\n     *\n     * @returns {Map} return all mars contents\n     */\n\n  }, {\n    key: 'getAll',\n    value: function getAll() {\n      var mars = _mars.get(this);\n      return mars;\n    }\n  }]);\n\n  return Store;\n}();\n\nexport default Store;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/store.js\n// module id = 53\n// module chunks = 0 1","module.exports = {\n\n  /**\n   * ### config.includeStack\n   *\n   * User configurable property, influences whether stack trace\n   * is included in Assertion error message. Default of false\n   * suppresses stack trace in the error message.\n   *\n   *     chai.config.includeStack = true;  // enable stack on error\n   *\n   * @param {Boolean}\n   * @api public\n   */\n\n   includeStack: false,\n\n  /**\n   * ### config.showDiff\n   *\n   * User configurable property, influences whether or not\n   * the `showDiff` flag should be included in the thrown\n   * AssertionErrors. `false` will always be `false`; `true`\n   * will be true when the assertion has requested a diff\n   * be shown.\n   *\n   * @param {Boolean}\n   * @api public\n   */\n\n  showDiff: true,\n\n  /**\n   * ### config.truncateThreshold\n   *\n   * User configurable property, sets length threshold for actual and\n   * expected values in assertion errors. If this threshold is exceeded, for\n   * example for large data structures, the value is replaced with something\n   * like `[ Array(3) ]` or `{ Object (prop1, prop2) }`.\n   *\n   * Set it to zero if you want to disable truncating altogether.\n   *\n   * This is especially userful when doing assertions on arrays: having this\n   * set to a reasonable large value makes the failure messages readily\n   * inspectable.\n   *\n   *     chai.config.truncateThreshold = 0;  // disable truncating\n   *\n   * @param {Number}\n   * @api public\n   */\n\n  truncateThreshold: 40\n\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chai/lib/chai/config.js\n// module id = 59\n// module chunks = 1","module.exports = require('./lib/chai');\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chai/index.js\n// module id = 63\n// module chunks = 1","var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/** @module CardinalPoints */\n\n/**\n * Cardinal Points Object\n * Methods to access/verify point names and values:\n * [\"N\", 0], [\"E\", 90], [\"S\", 180], [\"W\", 270]\n */\nvar _points = new WeakMap();\n\nvar CardinalPoints = function () {\n  function CardinalPoints() {\n    _classCallCheck(this, CardinalPoints);\n\n    /*\n     * Private data via WeakMaps:\n     * http://exploringjs.com/es6/ch_classes.html#_private-data-via-weakmaps\n     */\n    _points.set(this, new Map([['N', 0], ['E', 90], ['S', 180], ['W', 270]]));\n  }\n\n  /**\n   *\n   * @param   {string} Cardinal Point\n   * @returns {number} Corresponding degree for cardinal point\n   */\n\n\n  _createClass(CardinalPoints, [{\n    key: 'getDegree',\n    value: function getDegree(point) {\n      var points = _points.get(this);\n      return points.get(point.toString().toUpperCase());\n    }\n\n    /**\n     *\n     * @param   {number} degree\n     * @returns {string} Corresponding cardinal point for degree\n     */\n\n  }, {\n    key: 'getPointName',\n    value: function getPointName(degree) {\n      var points = _points.get(this);\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = points[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var _step$value = _slicedToArray(_step.value, 2);\n\n          var key = _step$value[0];\n          var value = _step$value[1];\n\n          if (value === Number.parseInt(degree, 10)) {\n            return key;\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      return undefined;\n    }\n\n    /**\n     *\n     * @param   {string} Cardinal point\n     * @returns {boolean} True if point exists in Cardinal Points map\n     */\n\n  }, {\n    key: 'isValidPoint',\n    value: function isValidPoint(point) {\n      var points = _points.get(this);\n      return points.has(point.toString().toUpperCase());\n    }\n  }]);\n\n  return CardinalPoints;\n}();\n\nexport default CardinalPoints;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/classes/cardinalPoints.js\n// module id = 78\n// module chunks = 0 1"],"sourceRoot":""}